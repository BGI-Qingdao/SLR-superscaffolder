#ifndef __STLFR_TRUNKGAP_H__
#define __STLFR_TRUNKGAP_H__

#include <iostream>
#include <sstream>
#include <vector>
#include <map>

/**********************************************************
 *
 * @Brief : 
 *  Define the common interface for loading order of contigs.
 *
 * The order of contigs generated by MST is used in :
 *   + BinCluster ( except the first round cluster before MST )
 *   + Orientation
 *   + GapSize
 *   + SeedCluster
 *   + Trunk2ScaffInfo
 *
 * *******************************************************/

namespace BGIQD {
    namespace stLFR {

        template<class T>
            struct TrunkGap
            {
                typedef T  Data;
                unsigned int prev ;
                unsigned int next ;
                Data data;
            };

        template<class T>
            void Load_MST_Trunk_Linear( std::istream & ist , std::map<int ,std::vector<TrunkGap<T> > >& data )
            {
                typedef TrunkGap<T> DataItem;
                std::string line ;
                unsigned int prev = -1 ;
                int id = 0;
                while(! std::getline(ist,line).eof() )
                {
                    if( line[0] == '-' )
                    {
                        id ++ ;
                        prev = -1 ;
                        continue ;
                    }
                    unsigned int now = std::stoul(line);
                    if( prev != (unsigned int )-1 )
                    {
                        DataItem info ;
                        info.prev = prev ;
                        info.next = now ;
                        data[id].push_back(info);
                    }
                    prev = now ;
                }
            }
    }
}

#endif //__STLFR_TRUNKGAP_H__
