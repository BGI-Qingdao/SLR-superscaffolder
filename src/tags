!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	Development	//
A	dev_tools/LinkCheck.cpp	/^struct A$/;"	s	file:
A	dev_tools/LinkCheck_1.cpp	/^struct A$/;"	s	file:
ACCESS	algorithm/graph/GraphTest.cpp	/^struct ACCESS : public BGIQD::GRAPH::GraphAccessBase<TestGraph1 , char , int >$/;"	s	file:
ACCESS	algorithm/graph/SPFSearch_test.cpp	/^struct ACCESS : public BGIQD::GRAPH::GraphAccessBase<$/;"	s	file:
ADD_A_FLAG	common/flags/flags.h	8;"	d
ARGS	common/args/argsparser.h	/^    namespace ARGS{$/;"	n	namespace:BGIQD
Access	algorithm/graph/Graph.h	/^                typedef GraphAccess                       Access;$/;"	t	struct:BGIQD::GRAPH::PathEndHelperBase
AccessEdge	algorithm/graph/Graph.h	/^                Edge & AccessEdge(EdgeId , GraphNodeId ){ assert(0); }$/;"	f	struct:BGIQD::GRAPH::GraphAccessBase
AccessEdge	algorithm/graph/GraphTest.cpp	/^    Edge & AccessEdge(GraphEdgeId i , GraphNodeId )$/;"	f	struct:ACCESS
AccessEdge	algorithm/graph/SPFSearch_test.cpp	/^    Edge & AccessEdge(GraphEdgeId i , GraphNodeId )$/;"	f	struct:ACCESS
AccessEdge	soap2/contigGraphSearch.h	/^            Edge & AccessEdge(GraphEdgeId i , GraphNodeId from)$/;"	f	struct:BGIQD::SOAP2::GraphEA_Access
AccessNode	algorithm/graph/Graph.h	/^                Node & AccessNode(NodeId) { assert(0) ; }$/;"	f	struct:BGIQD::GRAPH::GraphAccessBase
AccessNode	algorithm/graph/GraphTest.cpp	/^    Node & AccessNode(GraphNodeId i)$/;"	f	struct:ACCESS
AccessNode	algorithm/graph/SPFSearch_test.cpp	/^    Node & AccessNode(GraphNodeId i)$/;"	f	struct:ACCESS
AccessNode	soap2/contigGraphSearch.h	/^            Node & AccessNode(GraphNodeId i)$/;"	f	struct:BGIQD::SOAP2::GraphEA_Access
AddChild	algorithm/fibheap/fib_heap.h	/^                void AddChild(Node & child)$/;"	f	struct:BGIQD::FIBHEAP::Node
AddCircle	stLFR/barcodeOnContig.h	/^                void AddCircle( const Circle & c)$/;"	f	struct:BGIQD::stLFR::P2PGraph::Path
AddConnect	algorithm/disjoin_set/disjoin_set.h	/^                void AddConnect( const Key a , const Key b )$/;"	f	class:BGIQD::Algorithm::DisJoin_Set
AddContigInfo	soap2/contigType.cpp	/^        void ContigTypeDetecter::AddContigInfo(int length, float cov )$/;"	f	class:BGIQD::SOAP2::ContigTypeDetecter
AddEdge	algorithm/graph/Graph.h	/^                void AddEdge(const Edge & ) {assert(0);}$/;"	f	struct:BGIQD::GRAPH::PathEndHelperBase
AddEdge	algorithm/graph/GraphBasic.h	/^                void AddEdge( const typename Basic::NodeId & from , const typename Basic::NodeId & to )$/;"	f	struct:BGIQD::GRAPH::ListDigraph
AddEdge	algorithm/graph/GraphBasic.h	/^                void AddEdge( const typename Basic::NodeId & from ,const typename Basic::NodeId & to )$/;"	f	struct:BGIQD::GRAPH::ListGraph
AddEdge	algorithm/graph/GraphBasic.h	/^                void AddEdge(const NodeEdgeId &id )$/;"	f	struct:BGIQD::GRAPH::IGraphNodeBasic
AddEdge	algorithm/graph/GraphBasic.h	/^                void AddEdge(const TEdge &tmp)$/;"	f	struct:BGIQD::GRAPH::ListDigraph
AddEdge	algorithm/graph/GraphBasic.h	/^                void AddEdge(const TEdge &tmp)$/;"	f	struct:BGIQD::GRAPH::ListGraph
AddEdge	algorithm/graph/GraphTest.cpp	/^    void AddEdge(const Edge & ) {$/;"	f	struct:Ender1
AddEdge	algorithm/graph/GraphTest.cpp	/^    void AddEdge(const Edge & ) {$/;"	f	struct:Ender2
AddEdge	algorithm/graph/SPFSearch.h	/^                    void AddEdge(EdgeItr & itr)$/;"	f	struct:BGIQD::GRAPH::SPFSearch
AddEdge	algorithm/graph/SPFSearch_test.cpp	/^    void AddEdge(const Edge & ) {$/;"	f	struct:Ender1
AddEdge	soap2/contigGraphDepth.h	/^                void AddEdge(const Edge & ) $/;"	f	struct:BGIQD::SOAP2::DepthSearchEAEnder
AddEdge	soap2/contigGraphSPF.h	/^            void AddEdge(const Edge & ) { ender_flag = false ; }$/;"	f	struct:BGIQD::SOAP2::SFPEnder
AddEdge	stLFR/barcodeOnContig.h	/^                bool AddEdge(const Edge & edge ) $/;"	f	struct:BGIQD::stLFR::P2PGraph::Path
AddEdge	unused/graph/Graph.h	/^                EdgeIndex AddEdge( I from , I to )$/;"	f	class:BGIQD::Graph::DiGraph_VE
AddEdgeSim	stLFR/contigSimGraph.h	/^            void AddEdgeSim( unsigned int from , unsigned int to , float sim)$/;"	f	struct:BGIQD::stLFR::ContigSimGraph
AddEdgeValue	algorithm/graph/GraphTrunk_test.cpp	/^    void AddEdgeValue( const std::string & from , const std::string & to, int value )$/;"	f	struct:TKTestGraphBasic
AddEdgeValue	algorithm/graph/MinTree_test.cpp	/^    void AddEdgeValue( const std::string & from , const std::string & to, int value )$/;"	f	struct:MTestGraphBasic
AddFromTo	stLFR/barcodeOnContig.cpp	/^        void P2PGraph::AddFromTo( unsigned int from , unsigned int to )$/;"	f	class:BGIQD::stLFR::P2PGraph
AddGroup	stLFR/LineGroup.cpp	/^        void ContigRoad::AddGroup( const std::vector<unsigned int > & a )$/;"	f	class:BGIQD::stLFR::ContigRoad
AddJob	common/multithread/MultiThread.h	/^        void AddJob( const Job & j ) $/;"	f	struct:BGIQD::MultiThread::MultiThread
AddNode	algorithm/graph/Graph.h	/^                void AddNode(const Node & , const SearchNode &) {assert(0);}$/;"	f	struct:BGIQD::GRAPH::PathEndHelperBase
AddNode	algorithm/graph/GraphBasic.h	/^                void AddNode(const Node & n )$/;"	f	struct:BGIQD::GRAPH::ListGraphBasic
AddNode	algorithm/graph/GraphBasic.h	/^                void AddNode(const NodeId &id )$/;"	f	struct:BGIQD::GRAPH::ListGraphBasic
AddNode	algorithm/graph/GraphTest.cpp	/^    void AddNode(const Node & , const SNode & dnode) {$/;"	f	struct:Ender1
AddNode	algorithm/graph/GraphTest.cpp	/^    void AddNode(const Node &n , const SNode & ) {$/;"	f	struct:Ender2
AddNode	algorithm/graph/SPFSearch_test.cpp	/^    void AddNode(const Node &n , const SNode & dnode) {$/;"	f	struct:Ender1
AddNode	soap2/contigGraphDepth.h	/^                void AddNode(const Node & node , const SNode & dnode ) $/;"	f	struct:BGIQD::SOAP2::DepthSearchEAEnder
AddNode	soap2/contigGraphSPF.h	/^            void AddNode(const Node & node , const SNode & dnode ) $/;"	f	struct:BGIQD::SOAP2::SFPEnder
AddResult	common/multithread/MapReduce.h	/^        void AddResult(const K2& k ,const V2 & v )$/;"	f	class:BGIQD::MultiThread::Shuffler
AddSeq	dev_tools/ContigRoadFill2Fasta.cpp	/^        void AddSeq ( const std::string & line, int k)$/;"	f	struct:GlobalContig::ContigFastA
AddSeq	soap2/contigFasta.cpp	/^        void ContigFastA::AddSeq ( const std::string & line, int k)$/;"	f	class:BGIQD::SOAP2::ContigFastA
AddTag	stLFR/barcodeId.cpp	/^    int BarcodeId::AddTag(const std::string & tag)$/;"	f	class:BGIQD::stLFR::BarcodeId
Algorithm	algorithm/disjoin_set/disjoin_set.h	/^namespace Algorithm$/;"	n	namespace:BGIQD
All	main/MergeContig.cpp	/^        All = 5 ,$/;"	e	enum:AppConfig::WorkType	file:
AllocNewGraph_linear	main/MergeContig.cpp	/^    void AllocNewGraph_linear()$/;"	f	struct:AppConfig	file:
AllocNewGraph_super	main/MergeContig.cpp	/^    void AllocNewGraph_super()$/;"	f	struct:AppConfig	file:
AllocRelationArray	main/BinCluster.cpp	/^    void AllocRelationArray()$/;"	f	struct:AppConfig
AppConf	main/MinTree.cpp	/^struct AppConf$/;"	s	file:
AppConf	tools/stLFR_2_10X.cpp	/^    AppConf() : $/;"	f	struct:AppConf
AppConf	tools/stLFR_2_10X.cpp	/^struct AppConf$/;"	s	file:
AppConfig	main/BinCluster.cpp	/^struct AppConfig$/;"	s	file:
AppConfig	main/ChopBin.cpp	/^struct AppConfig$/;"	s	file:
AppConfig	main/ContigDlink.cpp	/^struct AppConfig$/;"	s	file:
AppConfig	main/LinearCDG.cpp	/^struct  AppConfig$/;"	s	file:
AppConfig	main/MergeContig.cpp	/^struct AppConfig$/;"	s	file:
AppConfig	main/Sam2ReadOnContig.cpp	/^struct AppConfig$/;"	s	file:
AppConfig	main/StaticsticUnique.cpp	/^struct AppConfig$/;"	s	file:
AppendPath	main/FillContigRoad.cpp	/^bool AppendPath( const  BGIQD::stLFR::P2PGraph & p2pgrapg , const SearchResult & result, BGIQD::stLFR::ContigRoad & road)$/;"	f
Arc	soap2/contigGraph.h	/^        struct Arc$/;"	s	namespace:BGIQD::SOAP2
Arc	soap2/graphEA.h	/^        struct Arc$/;"	s	namespace:BGIQD::SOAP2
ArcArray	soap2/graphEA.h	/^            typedef BGIQD::INCRARRAY::IncrArray<Arc> ArcArray;$/;"	t	struct:BGIQD::SOAP2::GraphEA
ArcNum	soap2/contigGraph.cpp	/^        int Edge::ArcNum() const $/;"	f	class:BGIQD::SOAP2::Edge
AssignTag	stLFR/barcodeId.cpp	/^    bool BarcodeId::AssignTag( const std::string &tag, int number )$/;"	f	class:BGIQD::stLFR::BarcodeId
AttrString	algorithm/graph/GraphBasic.h	/^                std::string AttrString() const$/;"	f	struct:BGIQD::GRAPH::IDigraphEdgeBase
AttrString	algorithm/graph/GraphBasic.h	/^                std::string AttrString() const$/;"	f	struct:BGIQD::GRAPH::IGraphEdgeBasic
AttrString	stLFR/contigSimGraph.h	/^            std::string AttrString() const$/;"	f	struct:BGIQD::stLFR::Edge
BGIQD	algorithm/bi_list/bi_list.h	/^namespace BGIQD{$/;"	n
BGIQD	algorithm/collection/collection.h	/^namespace BGIQD{$/;"	n
BGIQD	algorithm/disjoin_set/disjoin_set.h	/^namespace BGIQD{$/;"	n
BGIQD	algorithm/fibheap/fib_heap.h	/^namespace BGIQD {$/;"	n
BGIQD	algorithm/graph/DepthSearch.h	/^namespace BGIQD{$/;"	n
BGIQD	algorithm/graph/Graph.h	/^namespace BGIQD {$/;"	n
BGIQD	algorithm/graph/GraphBasic.h	/^namespace BGIQD {$/;"	n
BGIQD	algorithm/graph/GraphTrunk.h	/^namespace BGIQD{$/;"	n
BGIQD	algorithm/graph/MinTree.h	/^namespace BGIQD {$/;"	n
BGIQD	algorithm/graph/SPFSearch.h	/^namespace BGIQD{$/;"	n
BGIQD	algorithm/incr_array/incr_array.h	/^namespace BGIQD {$/;"	n
BGIQD	biocommon/pair/pair_sam_parser.cpp	/^namespace BGIQD{$/;"	n	file:
BGIQD	biocommon/pair/pair_sam_parser.h	/^namespace BGIQD{$/;"	n
BGIQD	biocommon/sam_bam/sam_parser.cpp	/^namespace BGIQD{$/;"	n	file:
BGIQD	biocommon/sam_bam/sam_parser.h	/^namespace BGIQD{$/;"	n
BGIQD	biocommon/seq/tool_func.h	/^namespace BGIQD{$/;"	n
BGIQD	common/args/argsparser.h	/^namespace BGIQD{$/;"	n
BGIQD	common/files/file_reader.cpp	/^namespace BGIQD{$/;"	n	file:
BGIQD	common/files/file_reader.h	/^namespace BGIQD{$/;"	n
BGIQD	common/files/file_writer.cpp	/^namespace BGIQD{$/;"	n	file:
BGIQD	common/files/file_writer.h	/^namespace BGIQD{$/;"	n
BGIQD	common/freq/freq.h	/^namespace BGIQD{$/;"	n
BGIQD	common/log/log.cpp	/^namespace BGIQD{$/;"	n	file:
BGIQD	common/log/log.h	/^namespace BGIQD{$/;"	n
BGIQD	common/log/logfilter.cpp	/^namespace BGIQD{$/;"	n	file:
BGIQD	common/log/logfilter.h	/^namespace BGIQD{$/;"	n
BGIQD	common/multithread/Job.h	/^namespace BGIQD{$/;"	n
BGIQD	common/multithread/JobQueue.h	/^namespace BGIQD{$/;"	n
BGIQD	common/multithread/MapReduce.h	/^namespace BGIQD{$/;"	n
BGIQD	common/multithread/MultiThread.h	/^namespace BGIQD{$/;"	n
BGIQD	common/stl/mapHelper.h	/^namespace BGIQD{$/;"	n
BGIQD	common/string/stringtools.cpp	/^namespace BGIQD{$/;"	n	file:
BGIQD	common/string/stringtools.h	/^namespace BGIQD{$/;"	n
BGIQD	common/time/timetools.cpp	/^namespace BGIQD{$/;"	n	file:
BGIQD	common/time/timetools.h	/^namespace BGIQD{$/;"	n
BGIQD	dev_tools/contig_barcode.cpp	/^namespace BGIQD {$/;"	n	file:
BGIQD	dev_tools/contig_barcode.h	/^namespace BGIQD {$/;"	n
BGIQD	soap2/contigFasta.cpp	/^namespace BGIQD {$/;"	n	file:
BGIQD	soap2/contigFasta.h	/^namespace BGIQD {$/;"	n
BGIQD	soap2/contigGraph.cpp	/^namespace BGIQD{$/;"	n	file:
BGIQD	soap2/contigGraph.h	/^namespace BGIQD {$/;"	n
BGIQD	soap2/contigGraphDepth.h	/^namespace BGIQD{$/;"	n
BGIQD	soap2/contigGraphSPF.h	/^namespace BGIQD{$/;"	n
BGIQD	soap2/contigGraphSearch.h	/^namespace BGIQD{$/;"	n
BGIQD	soap2/contigType.cpp	/^namespace BGIQD {$/;"	n	file:
BGIQD	soap2/contigType.h	/^namespace BGIQD {$/;"	n
BGIQD	soap2/fileName.h	/^namespace BGIQD {$/;"	n
BGIQD	soap2/graphEA.h	/^namespace BGIQD {$/;"	n
BGIQD	soap2/kmer.h	/^namespace BGIQD {$/;"	n
BGIQD	soap2/soap2.h	/^namespace BGIQD{$/;"	n
BGIQD	stLFR/CBB.cpp	/^namespace BGIQD{$/;"	n	file:
BGIQD	stLFR/CBB.h	/^namespace BGIQD{$/;"	n
BGIQD	stLFR/ContigCluster.cpp	/^namespace BGIQD{$/;"	n	file:
BGIQD	stLFR/ContigCluster.h	/^namespace BGIQD{$/;"	n
BGIQD	stLFR/Line.h	/^namespace BGIQD {$/;"	n
BGIQD	stLFR/LineGroup.cpp	/^namespace BGIQD{$/;"	n	file:
BGIQD	stLFR/LineGroup.h	/^namespace BGIQD {$/;"	n
BGIQD	stLFR/barcodeId.cpp	/^namespace BGIQD{$/;"	n	file:
BGIQD	stLFR/barcodeId.h	/^namespace BGIQD{$/;"	n
BGIQD	stLFR/barcodeOnContig.cpp	/^namespace BGIQD {$/;"	n	file:
BGIQD	stLFR/barcodeOnContig.h	/^namespace BGIQD {$/;"	n
BGIQD	stLFR/contigSimGraph.h	/^namespace BGIQD {$/;"	n
BGIQD	stLFR/readName2Barcode.cpp	/^namespace BGIQD{$/;"	n	file:
BGIQD	stLFR/readName2Barcode.h	/^namespace BGIQD{$/;"	n
BGIQD	unused/fastqa/fasta.cpp	/^namespace BGIQD{$/;"	n	file:
BGIQD	unused/fastqa/fasta.h	/^namespace BGIQD{$/;"	n
BGIQD	unused/graph/Edge.h	/^namespace BGIQD{$/;"	n
BGIQD	unused/graph/Graph.h	/^namespace BGIQD{$/;"	n
BGIQD	unused/graph/Vertex.h	/^namespace BGIQD{$/;"	n
BGIQD	unused/stl/stack.h	/^namespace BGIQD {$/;"	n
BILIST	algorithm/bi_list/bi_list.h	/^    namespace BILIST{$/;"	n	namespace:BGIQD
Backword	algorithm/bi_list/bi_list.h	/^                BiListPtr Backword()$/;"	f	struct:BGIQD::BILIST::BiList
BarcodeCollection	stLFR/CBB.h	/^        typedef BGIQD::Collection::Collection<int> BarcodeCollection;$/;"	t	namespace:BGIQD::stLFR
BarcodeCov_CutCircle	main/FillContigRoad.cpp	/^        BarcodeCov_CutCircle = 3,$/;"	e	enum:GlobalConfig::FillStrategy	file:
BarcodeCov_FillCircle	main/FillContigRoad.cpp	/^        BarcodeCov_FillCircle = 4,$/;"	e	enum:GlobalConfig::FillStrategy	file:
BarcodeCov_GiveUpCircle	main/FillContigRoad.cpp	/^        BarcodeCov_GiveUpCircle = 2 ,$/;"	e	enum:GlobalConfig::FillStrategy	file:
BarcodeId	stLFR/barcodeId.h	/^        BarcodeId() : curr(1) {}$/;"	f	class:BGIQD::stLFR::BarcodeId
BarcodeId	stLFR/barcodeId.h	/^class BarcodeId$/;"	c	namespace:BGIQD::stLFR
BarcodeIdHelper	stLFR/barcodeId.h	/^class BarcodeIdHelper$/;"	c	namespace:BGIQD::stLFR
BarcodeNum	dev_tools/contig_barcode.h	/^    BarcodeNum() : next(1) {}$/;"	f	struct:BGIQD::JOB01::BarcodeNum
BarcodeNum	dev_tools/contig_barcode.h	/^struct BarcodeNum$/;"	s	namespace:BGIQD::JOB01
BarcodeOnBin	stLFR/CBB.h	/^        struct BarcodeOnBin$/;"	s	namespace:BGIQD::stLFR
BarcodeOnBinArray	stLFR/CBB.h	/^        typedef  BGIQD::INCRARRAY::IncrArray<BarcodeOnBin>      BarcodeOnBinArray;$/;"	t	namespace:BGIQD::stLFR
BarcodeOnBin_cpp	dev_tools/Makefile	/^BarcodeOnBin_cpp =	BarcodeOnBin.cpp$/;"	m
BarcodeOnBin_o	dev_tools/Makefile	/^BarcodeOnBin_o   =	${BarcodeOnBin_cpp:%.cpp=%.o} ${source_cpp:%.cpp=%.o}$/;"	m
BarcodeOnContig	main/ChopBin.cpp	/^    typedef std::map<unsigned int, ConfigBarcodeInfo>  BarcodeOnContig;$/;"	t	struct:AppConfig	file:
BarcodeOnContig	stLFR/barcodeOnContig.h	/^        typedef std::map<int, int> BarcodeOnContig;$/;"	t	namespace:BGIQD::stLFR
BarcodeOnContig_cpp	dev_tools/Makefile	/^BarcodeOnContig_cpp =	BarcodeOnContig.cpp$/;"	m
BarcodeOnContig_o	dev_tools/Makefile	/^BarcodeOnContig_o   =	${BarcodeOnContig_cpp:%.cpp=%.o} ${source_cpp:%.cpp=%.o}$/;"	m
Base	algorithm/graph/SPFSearch.h	/^                FibBaseNode Base;$/;"	m	struct:BGIQD::GRAPH::SPFNode
Base	algorithm/incr_array/incr_array.h	/^                typedef T Base ;$/;"	t	struct:BGIQD::INCRARRAY::non_const_traits
Base	algorithm/incr_array/incr_array.h	/^                typedef const T Base ;$/;"	t	struct:BGIQD::INCRARRAY::const_traits
Base	algorithm/incr_array/incr_array.h	/^            typedef typename T::Base Base;$/;"	t	struct:BGIQD::INCRARRAY::iterator_base
BasePointer	algorithm/incr_array/incr_array.h	/^                typedef T * BasePointer;$/;"	t	struct:BGIQD::INCRARRAY::non_const_traits
BasePointer	algorithm/incr_array/incr_array.h	/^                typedef T const * BasePointer;$/;"	t	struct:BGIQD::INCRARRAY::const_traits
BasePointer	algorithm/incr_array/incr_array.h	/^            typedef typename T::BasePointer  BasePointer;$/;"	t	struct:BGIQD::INCRARRAY::iterator_base
BaseType	algorithm/graph/GraphBasic.h	/^                typedef IGraphEdgeBasic<NodeId, EdgeId> BaseType ;$/;"	t	struct:BGIQD::GRAPH::IDigraphEdgeBase
Basic	algorithm/graph/GraphBasic.h	/^                typedef ListGraphBasic<TNode , TEdge, TNodes , TEdges> Basic;$/;"	t	struct:BGIQD::GRAPH::ListDigraph
Basic	algorithm/graph/GraphBasic.h	/^                typedef ListGraphBasic<TNode , TEdge, TNodes , TEdges> Basic;$/;"	t	struct:BGIQD::GRAPH::ListGraph
Basic	algorithm/graph/GraphTrunk_test.cpp	/^    typedef BGIQD::GRAPH::ListGraph<TKTestNode , TKEdge> Basic;$/;"	t	struct:TKTestGraphBasic	file:
Basic	algorithm/graph/MinTree_test.cpp	/^    typedef BGIQD::GRAPH::ListGraph<MTestNode , MTEdge> Basic;$/;"	t	struct:MTestGraphBasic	file:
Basic	stLFR/contigSimGraph.h	/^            typedef BGIQD::GRAPH::ListGraph<Node,Edge> Basic ;$/;"	t	struct:BGIQD::stLFR::ContigSimGraph
BiList	algorithm/bi_list/bi_list.h	/^            struct BiList$/;"	s	namespace:BGIQD::BILIST
BiList	algorithm/fibheap/fib_heap.h	/^                typedef BGIQD::BILIST::BiList<Node> BiList;$/;"	t	struct:BGIQD::FIBHEAP::Node
BiListPtr	algorithm/bi_list/bi_list.h	/^                typedef BiList * BiListPtr ;$/;"	t	struct:BGIQD::BILIST::BiList
BinCluster_cpp	main/Makefile	/^BinCluster_cpp =	BinCluster.cpp$/;"	m
BinCluster_o	main/Makefile	/^BinCluster_o   =	${BinCluster_cpp:%.cpp=%.o} ${source_cpp:%.cpp=%.o}$/;"	m
BinIndexOnBarcode	main/BinCluster.cpp	/^    typedef std::map< int , std::set<int> > BinIndexOnBarcode;$/;"	t	struct:AppConfig	file:
BinRelation	stLFR/CBB.h	/^        struct BinRelation$/;"	s	namespace:BGIQD::stLFR
BinRelationArray	stLFR/CBB.h	/^        typedef  BGIQD::INCRARRAY::IncrArray<BinRelation>       BinRelationArray;$/;"	t	namespace:BGIQD::stLFR
BinSimularity	stLFR/CBB.h	/^        struct BinSimularity$/;"	s	namespace:BGIQD::stLFR
Black	algorithm/graph/DepthSearch.h	/^            Black = 2 ,$/;"	e	enum:BGIQD::GRAPH::DepthSearchEdgeType
BuildABBAResult	main/BinCluster.cpp	/^    void BuildABBAResult()$/;"	f	struct:AppConfig
BuildBinIndexOnBarcode	main/BinCluster.cpp	/^    void BuildBinIndexOnBarcode()$/;"	f	struct:AppConfig
BuildContigRelation	main/BinCluster.cpp	/^    void BuildContigRelation()$/;"	f	struct:AppConfig
CC	dev_tools/Makefile	/^CC 		   =	gcc$/;"	m
CC	main/Makefile	/^CC 		   =	gcc$/;"	m
CC	test/Makefile	/^CC 		   =	gcc$/;"	m
CC	tools/Makefile	/^CC 		   =	gcc$/;"	m
CHECK	common/test/Check.h	15;"	d
CHECK	dev_tools/bin_sim_len.cpp	63;"	d	file:
CHECK	dev_tools/bin_simularity.cpp	63;"	d	file:
CHECK_AND_ONERR	common/test/Check.h	19;"	d
CHECK_STRUCT	common/test/Check.h	4;"	d
CHECK_STRUCT_AND_ONERR	common/test/Check.h	8;"	d
CIGAR	biocommon/sam_bam/sam_parser.h	/^enum CIGAR$/;"	g	namespace:BGIQD::SAM
CXX	dev_tools/Makefile	/^CXX 	   =	g++$/;"	m
CXX	main/Makefile	/^CXX 	   =	g++$/;"	m
CXX	test/Makefile	/^CXX 	   =	g++$/;"	m
CXX	tools/Makefile	/^CXX 	   =	g++$/;"	m
CXXFLAGS	dev_tools/Makefile	/^CXXFLAGS   =	-std=c++11\\$/;"	m
CXXFLAGS	main/Makefile	/^CXXFLAGS   =	-std=c++11\\$/;"	m
CXXFLAGS	test/Makefile	/^CXXFLAGS   =	-std=c++11\\$/;"	m
CXXFLAGS	tools/Makefile	/^CXXFLAGS   =	-std=c++11\\$/;"	m
Calc1Bin2All	main/BinCluster.cpp	/^    void Calc1Bin2All(int i )$/;"	f	struct:AppConfig
CalcCov	main/StaticsticUnique.cpp	/^    void CalcCov()$/;"	f	struct:AppConfig
CalcCov	stLFR/barcodeOnContig.h	/^                void CalcCov()$/;"	f	struct:BGIQD::stLFR::P2PGraph::Path
CascadingCut	algorithm/fibheap/fib_heap.h	/^                    void CascadingCut(Node & father)$/;"	f	struct:BGIQD::FIBHEAP::FibHeap
CharCollect	algorithm/collection/collection_test.cpp	/^typedef BGIQD::Collection::Collection<char> CharCollect;$/;"	t	file:
CheckCircle	soap2/contigGraph.cpp	/^        void KeyEdge::CheckCircle()$/;"	f	class:BGIQD::SOAP2::KeyEdge
CheckEdge	algorithm/graph/GraphBasic.h	/^                bool CheckEdge(const NodeId & from ,const  NodeId & to )$/;"	f	struct:BGIQD::GRAPH::ListGraphBasic
CheckPalindrome	stLFR/barcodeOnContig.cpp	/^        bool P2PGraph::CheckPalindrome() const$/;"	f	class:BGIQD::stLFR::P2PGraph
ChopBin	main/ChopBin.cpp	/^    void ChopBin()$/;"	f	struct:AppConfig
ChopBin_cpp	main/Makefile	/^ChopBin_cpp 	=	ChopBin.cpp$/;"	m
ChopBin_o	main/Makefile	/^ChopBin_o   =	${ChopBin_cpp:%.cpp=%.o} ${source_cpp:%.cpp=%.o}$/;"	m
Circle	stLFR/barcodeOnContig.h	/^            struct Circle$/;"	s	struct:BGIQD::stLFR::P2PGraph
CircleStrategy	stLFR/barcodeOnContig.h	/^            enum CircleStrategy$/;"	g	struct:BGIQD::stLFR::P2PGraph
Clean	algorithm/graph/DepthSearch.h	/^                void Clean()$/;"	f	struct:BGIQD::GRAPH::DepthSearchNode
Clean	stLFR/barcodeOnContig.h	/^                void Clean()$/;"	f	struct:BGIQD::stLFR::P2PGraph::Circle
CleanAndSavePath	stLFR/barcodeOnContig.cpp	/^        void P2PGraph::CleanAndSavePath()$/;"	f	class:BGIQD::stLFR::P2PGraph
CleanCollectionAndIndexMap	main/BinCluster.cpp	/^    void CleanCollectionAndIndexMap()$/;"	f	struct:AppConfig
ClusterGap_cpp	dev_tools/Makefile	/^ClusterGap_cpp =	ClusterGap.cpp$/;"	m
ClusterGap_o	dev_tools/Makefile	/^ClusterGap_o   =	${ClusterGap_cpp:%.cpp=%.o} ${source_cpp:%.cpp=%.o}$/;"	m
ClusterLengthSim_cpp	dev_tools/Makefile	/^ClusterLengthSim_cpp 	= ClusterLengthSim.cpp$/;"	m
ClusterLengthSim_o	dev_tools/Makefile	/^ClusterLengthSim_o		= ${ClusterLengthSim_cpp:%.cpp=%.o} ${source_cpp:%.cpp=%.o}$/;"	m
Collection	algorithm/collection/collection.h	/^                Collection() {}$/;"	f	struct:BGIQD::Collection::Collection
Collection	algorithm/collection/collection.h	/^                Collection(const Collection & other ) $/;"	f	struct:BGIQD::Collection::Collection
Collection	algorithm/collection/collection.h	/^            struct Collection$/;"	s	namespace:BGIQD::Collection
Collection	algorithm/collection/collection.h	/^    namespace Collection{$/;"	n	namespace:BGIQD
Combiner	common/multithread/MapReduce.h	/^class Combiner$/;"	c	namespace:BGIQD::MultiThread
Complete	stLFR/LineGroup.h	/^                Complete = 3$/;"	e	enum:BGIQD::stLFR::ContigRoad::FillStatus
ConfigBarcodeInfo	main/ChopBin.cpp	/^    struct ConfigBarcodeInfo$/;"	s	struct:AppConfig	file:
Conflict	stLFR/LineGroup.h	/^                Conflict = 1 ,$/;"	e	enum:BGIQD::stLFR::ContigRoad::FillStatus
Consolidate	algorithm/fibheap/fib_heap.h	/^                    void Consolidate() $/;"	f	struct:BGIQD::FIBHEAP::FibHeap
ContainerPtr	algorithm/bi_list/bi_list.h	/^                typedef T *      ContainerPtr;$/;"	t	struct:BGIQD::BILIST::BiList
ContigCluster	stLFR/ContigCluster.h	/^        struct ContigCluster$/;"	s	namespace:BGIQD::stLFR
ContigDlink_cpp	main/Makefile	/^ContigDlink_cpp 		= ContigDlink.cpp$/;"	m
ContigDlink_o	main/Makefile	/^ContigDlink_o			= ${ContigDlink_cpp:%.cpp=%.o} ${source_cpp:%.cpp=%.o}$/;"	m
ContigFastA	dev_tools/ContigRoadFill2Fasta.cpp	/^    struct ContigFastA$/;"	s	struct:GlobalContig	file:
ContigFastA	soap2/contigFasta.h	/^        struct ContigFastA$/;"	s	namespace:BGIQD::SOAP2
ContigFastAMap	soap2/contigFasta.h	/^        class ContigFastAMap$/;"	c	namespace:BGIQD::SOAP2
ContigGraphType_cpp	dev_tools/Makefile	/^ContigGraphType_cpp =	ContigGraphType.cpp$/;"	m
ContigGraphType_o	dev_tools/Makefile	/^ContigGraphType_o   =	${ContigGraphType_cpp:%.cpp=%.o} ${source_cpp:%.cpp=%.o}$/;"	m
ContigId	soap2/soap2.h	/^        typedef unsigned int ContigId;$/;"	t	namespace:BGIQD::SOAP2
ContigId	stLFR/barcodeOnContig.h	/^        typedef unsigned int ContigId; $/;"	t	namespace:BGIQD::stLFR
ContigInfo	main/StaticsticUnique.cpp	/^    struct ContigInfo$/;"	s	struct:AppConfig	file:
ContigRelation	stLFR/CBB.h	/^        struct ContigRelation$/;"	s	namespace:BGIQD::stLFR
ContigRelationArray	stLFR/CBB.h	/^        typedef  BGIQD::INCRARRAY::IncrArray<ContigRelation>    ContigRelationArray;$/;"	t	namespace:BGIQD::stLFR
ContigRoad	soap2/contigGraph.h	/^        struct ContigRoad$/;"	s	namespace:BGIQD::SOAP2
ContigRoad	stLFR/LineGroup.h	/^        struct ContigRoad$/;"	s	namespace:BGIQD::stLFR
ContigRoadFill	stLFR/LineGroup.h	/^        typedef std::vector<unsigned int> ContigRoadFill ;$/;"	t	namespace:BGIQD::stLFR
ContigRoadFill2Fasta_cpp	dev_tools/Makefile	/^ContigRoadFill2Fasta_cpp= ContigRoadFill2Fasta.cpp$/;"	m
ContigRoadFill2Fasta_o	dev_tools/Makefile	/^ContigRoadFill2Fasta_o	= ${ContigRoadFill2Fasta_cpp:%.cpp=%.o} ${source_cpp:%.cpp=%.o}$/;"	m
ContigRoadFills	stLFR/LineGroup.h	/^        struct ContigRoadFills$/;"	s	namespace:BGIQD::stLFR
ContigRoads	stLFR/LineGroup.h	/^        struct ContigRoads$/;"	s	namespace:BGIQD::stLFR
ContigSimGraph	stLFR/contigSimGraph.h	/^        struct ContigSimGraph : public BGIQD::GRAPH::ListGraph<Node,Edge>$/;"	s	namespace:BGIQD::stLFR
ContigSims	main/BinCluster.cpp	/^    typedef std::map<BGIQD::SOAP2::ContigId ,std::map< BGIQD::SOAP2::ContigId ,float> > ContigSims;$/;"	t	struct:AppConfig	file:
ContigSimularity	stLFR/CBB.h	/^        struct ContigSimularity$/;"	s	namespace:BGIQD::stLFR
ContigStatus	main/MergeContig.cpp	/^    enum ContigStatus $/;"	g	struct:AppConfig	file:
ContigType	soap2/contigType.cpp	/^        ContigTypeDetecter::Type  ContigTypeDetecter::ContigType(int length, float cov )$/;"	f	class:BGIQD::SOAP2::ContigTypeDetecter
ContigTypeByRef_cpp	dev_tools/Makefile	/^ContigTypeByRef_cpp =	ContigTypeByRef.cpp$/;"	m
ContigTypeByRef_o	dev_tools/Makefile	/^ContigTypeByRef_o   =	${ContigTypeByRef_cpp:%.cpp=%.o} ${source_cpp:%.cpp=%.o}$/;"	m
ContigTypeDetecter	soap2/contigType.h	/^        struct ContigTypeDetecter$/;"	s	namespace:BGIQD::SOAP2
ContigVE	unused/graph/Graph.h	/^        struct ContigVE$/;"	s	namespace:BGIQD::Graph
CurrentPair	biocommon/pair/pair_sam_parser.cpp	/^    std::pair<MatchData , MatchData> PairedSAMParser::CurrentPair()$/;"	f	class:BGIQD::SAM::PairedSAMParser
Cut	algorithm/fibheap/fib_heap.h	/^                    void Cut(Node & son , Node & father)$/;"	f	struct:BGIQD::FIBHEAP::FibHeap
D	biocommon/sam_bam/sam_parser.h	/^    D = 2 ,$/;"	e	enum:BGIQD::SAM::CIGAR
DEBUG	common/log/logfilter.h	/^    DEBUG = 3$/;"	e	enum:BGIQD::LOG::loglevel
DEFINE_ARG_OPTIONAL	common/args/argsparser.h	330;"	d
DEFINE_ARG_REQUIRED	common/args/argsparser.h	327;"	d
DEFINE_SUFFIX	soap2/fileName.h	17;"	d
DEUBG_CXX	dev_tools/Makefile	/^DEUBG_CXX  =	${CXXFLAGS} -g$/;"	m
DEUBG_CXX	main/Makefile	/^DEUBG_CXX  =	${CXXFLAGS} -g$/;"	m
DEUBG_CXX	test/Makefile	/^DEUBG_CXX  =	${CXXFLAGS} -g$/;"	m
DEUBG_CXX	tools/Makefile	/^DEUBG_CXX  =	${CXXFLAGS} -g$/;"	m
DJ_Sets	stLFR/contigSimGraph.h	/^            typedef BGIQD::Algorithm::DisJoin_Set<NodeId> DJ_Sets;$/;"	t	struct:BGIQD::stLFR::ContigSimGraph
DNode_EA	soap2/contigGraphDepth.h	/^        struct DNode_EA : public BGIQD::GRAPH::DepthSearchNode<Node_EA>$/;"	s	namespace:BGIQD::SOAP2
DOTHead	algorithm/graph/GraphBasic.h	/^                static std::string DOTHead()$/;"	f	struct:BGIQD::GRAPH::IDigraphEdgeBase
DOTHead	algorithm/graph/GraphBasic.h	/^                static std::string DOTHead()$/;"	f	struct:BGIQD::GRAPH::IGraphEdgeBasic
Data	biocommon/sam_bam/sam_parser.h	/^    struct Data$/;"	s	struct:BGIQD::SAM::Head
DecreaseKey	algorithm/fibheap/fib_heap.h	/^                void DecreaseKey( Node & node , Key new_key)$/;"	f	struct:BGIQD::FIBHEAP::FibHeap
DelayHeapLinkInfo	algorithm/fibheap/fib_heap.h	/^                    struct DelayHeapLinkInfo$/;"	s	struct:BGIQD::FIBHEAP::FibHeap
DeleteLinearContig	main/MergeContig.cpp	/^    void DeleteLinearContig() $/;"	f	struct:AppConfig	file:
DeleteMe	algorithm/bi_list/bi_list.h	/^                void DeleteMe() $/;"	f	struct:BGIQD::BILIST::BiList
DeleteUniqueContigInSuperContig	main/MergeContig.cpp	/^    void DeleteUniqueContigInSuperContig()$/;"	f	struct:AppConfig
DepthSearch	algorithm/graph/DepthSearch.h	/^            struct DepthSearch$/;"	s	namespace:BGIQD::GRAPH
DepthSearch	soap2/contigGraph.cpp	/^        void Edge::DepthSearch(Edge * array $/;"	f	class:BGIQD::SOAP2::Edge
DepthSearchEAEnder	soap2/contigGraphDepth.h	/^        struct DepthSearchEAEnder :$/;"	s	namespace:BGIQD::SOAP2
DepthSearchEdgeType	algorithm/graph/DepthSearch.h	/^        enum DepthSearchEdgeType$/;"	g	namespace:BGIQD::GRAPH
DepthSearchNode	algorithm/graph/DepthSearch.h	/^            struct DepthSearchNode$/;"	s	namespace:BGIQD::GRAPH
DiGraph_VE	unused/graph/Graph.h	/^        class DiGraph_VE$/;"	c	namespace:BGIQD::Graph
DirectoryOfThisScript	.ycm_extra_conf.py	/^def DirectoryOfThisScript():$/;"	f
DisJoin_Set	algorithm/disjoin_set/disjoin_set.h	/^        class DisJoin_Set{$/;"	c	namespace:BGIQD::Algorithm
DoDepthSearch	algorithm/graph/DepthSearch.h	/^                int DoDepthSearch(NodeId start , int s_step )$/;"	f	struct:BGIQD::GRAPH::DepthSearch
DoSPFSearch	algorithm/graph/SPFSearch.h	/^                void DoSPFSearch(NodeId start)$/;"	f	struct:BGIQD::GRAPH::SPFSearch
EAttr	algorithm/graph/MinTree_test.cpp	/^struct EAttr$/;"	s	file:
END_PARSE_ARGS	common/args/argsparser.h	343;"	d
EQUAL	biocommon/sam_bam/sam_parser.h	/^    EQUAL = 7 ,$/;"	e	enum:BGIQD::SAM::CIGAR
ERROR	common/log/logfilter.h	/^    ERROR = 0,$/;"	e	enum:BGIQD::LOG::loglevel
EachLine	common/files/file_reader.cpp	/^    void FileReaderFactory::EachLine(std::istream & ist , ParseLine parse)$/;"	f	class:BGIQD::FILES::FileReaderFactory
Ecov	main/FillContigRoad.cpp	/^    float Ecov ;$/;"	m	struct:GlobalConfig	file:
Ecov	main/StaticsticUnique.cpp	/^    float Ecov ;$/;"	m	struct:AppConfig	file:
Ecov	soap2/contigType.h	/^                float Ecov;$/;"	m	struct:BGIQD::SOAP2::ContigTypeDetecter
Edge	algorithm/graph/Graph.h	/^                typedef Edge1                        Edge;$/;"	t	struct:BGIQD::GRAPH::GraphAccessBase
Edge	algorithm/graph/Graph.h	/^                typedef typename GraphAccess::Edge        Edge;$/;"	t	struct:BGIQD::GRAPH::EdgeIterator
Edge	algorithm/graph/Graph.h	/^                typedef typename GraphAccess::Edge        Edge;$/;"	t	struct:BGIQD::GRAPH::PathEndHelperBase
Edge	algorithm/graph/GraphBasic.h	/^                typedef TEdge Edge ;$/;"	t	struct:BGIQD::GRAPH::ListDigraph
Edge	algorithm/graph/GraphBasic.h	/^                typedef TEdge Edge ;$/;"	t	struct:BGIQD::GRAPH::ListGraph
Edge	algorithm/graph/GraphBasic.h	/^                typedef TEdge Edge ;$/;"	t	struct:BGIQD::GRAPH::ListGraphBasic
Edge	algorithm/graph/GraphTest.cpp	/^    struct Edge$/;"	s	struct:TestGraph1	file:
Edge	algorithm/graph/GraphTrunk.h	/^                    typedef typename TListGraph::Edge Edge;$/;"	t	struct:BGIQD::GRAPH::TrunkHelper
Edge	algorithm/graph/MinTree.h	/^                typedef typename TListGraph::Edge Edge;$/;"	t	struct:BGIQD::GRAPH::MinTreeHelper
Edge	algorithm/graph/SPFSearch_test.cpp	/^    struct Edge$/;"	s	struct:TestGraph	file:
Edge	soap2/contigGraph.h	/^        struct Edge$/;"	s	namespace:BGIQD::SOAP2
Edge	soap2/graphEA.h	/^        struct Edge$/;"	s	namespace:BGIQD::SOAP2
Edge	stLFR/barcodeOnContig.h	/^            struct Edge$/;"	s	struct:BGIQD::stLFR::P2PGraph
Edge	stLFR/contigSimGraph.h	/^        struct Edge : public BGIQD::GRAPH::IGraphEdgeBasic<unsigned int , long >$/;"	s	namespace:BGIQD::stLFR
Edge	unused/graph/Edge.h	/^        class Edge{$/;"	c	namespace:BGIQD::Graph
EdgeArray	soap2/graphEA.h	/^            typedef BGIQD::INCRARRAY::IncrArray<Edge>  EdgeArray;$/;"	t	struct:BGIQD::SOAP2::GraphEA
EdgeAttr	stLFR/contigSimGraph.h	/^        struct EdgeAttr$/;"	s	namespace:BGIQD::stLFR
EdgeBase	algorithm/graph/DepthSearch.h	/^                typedef typename GraphAccess::Edge          EdgeBase;$/;"	t	struct:BGIQD::GRAPH::DepthSearch
EdgeBase	algorithm/graph/SPFSearch.h	/^                typedef typename GraphAccess::Edge          EdgeBase;$/;"	t	struct:BGIQD::GRAPH::SPFSearch
EdgeEdgeId	algorithm/graph/Graph.h	/^                typedef EdgeId EdgeEdgeId;$/;"	t	struct:BGIQD::GRAPH::GraphEdgeBase
EdgeEdgeId	algorithm/graph/GraphBasic.h	/^                typedef EdgeId EdgeEdgeId;$/;"	t	struct:BGIQD::GRAPH::IDigraphEdgeBase
EdgeEdgeId	algorithm/graph/GraphBasic.h	/^                typedef EdgeId EdgeEdgeId;$/;"	t	struct:BGIQD::GRAPH::IGraphEdgeBasic
EdgeId	algorithm/graph/DepthSearch.h	/^                typedef typename GraphAccess::GraphEdgeId   EdgeId;$/;"	t	struct:BGIQD::GRAPH::DepthSearch
EdgeId	algorithm/graph/Graph.h	/^                typedef typename GraphAccess::GraphEdgeId EdgeId;$/;"	t	struct:BGIQD::GRAPH::PathEndHelperBase
EdgeId	algorithm/graph/GraphBasic.h	/^                typedef typename Edge::EdgeEdgeId EdgeId ;$/;"	t	struct:BGIQD::GRAPH::ListDigraph
EdgeId	algorithm/graph/GraphBasic.h	/^                typedef typename Edge::EdgeEdgeId EdgeId ;$/;"	t	struct:BGIQD::GRAPH::ListGraph
EdgeId	algorithm/graph/GraphBasic.h	/^                typedef typename Edge::EdgeEdgeId EdgeId ;$/;"	t	struct:BGIQD::GRAPH::ListGraphBasic
EdgeId	algorithm/graph/GraphTrunk.h	/^                    typedef typename Edge::EdgeEdgeId EdgeId;$/;"	t	struct:BGIQD::GRAPH::TrunkHelper
EdgeId	algorithm/graph/GraphTrunk.h	/^                typedef typename TEdge::EdgeEdgeId EdgeId;$/;"	t	struct:BGIQD::GRAPH::TrunkNode
EdgeId	algorithm/graph/MinTree.h	/^                typedef typename Edge::EdgeEdgeId EdgeId;$/;"	t	struct:BGIQD::GRAPH::MinTreeHelper
EdgeId	algorithm/graph/SPFSearch.h	/^                typedef typename GraphAccess::GraphEdgeId   EdgeId;$/;"	t	struct:BGIQD::GRAPH::SPFSearch
EdgeId	stLFR/contigSimGraph.h	/^            typedef Basic::EdgeId EdgeId;$/;"	t	struct:BGIQD::stLFR::ContigSimGraph
EdgeIndex	unused/graph/Graph.h	/^                typedef E EdgeIndex;$/;"	t	class:BGIQD::Graph::DiGraph_VE
EdgeIndex	unused/graph/Vertex.h	/^            typedef E EdgeIndex ;$/;"	t	struct:BGIQD::Graph::VertexWithEdge
EdgeIterator	algorithm/graph/Graph.h	/^                EdgeIterator( const EdgeIterator & ei )$/;"	f	struct:BGIQD::GRAPH::EdgeIterator
EdgeIterator	algorithm/graph/Graph.h	/^                EdgeIterator() : curr(NULL) ,accessor( NULL ) { }$/;"	f	struct:BGIQD::GRAPH::EdgeIterator
EdgeIterator	algorithm/graph/Graph.h	/^                EdgeIterator(const Edge & e , GraphAccess & acc )$/;"	f	struct:BGIQD::GRAPH::EdgeIterator
EdgeIterator	algorithm/graph/Graph.h	/^            struct EdgeIterator : public std::iterator<std::forward_iterator_tag,int>$/;"	s	namespace:BGIQD::GRAPH
EdgeItr	algorithm/graph/GraphTest.cpp	/^typedef BGIQD::GRAPH::EdgeIterator<ACCESS> EdgeItr;$/;"	t	file:
EdgeItr	algorithm/graph/SPFSearch_test.cpp	/^typedef BGIQD::GRAPH::EdgeIterator<ACCESS> EdgeItr;$/;"	t	file:
EdgeItr	main/FillContigRoad.cpp	/^typedef BGIQD::GRAPH::EdgeIterator<BGIQD::SOAP2::GraphEA_Access> EdgeItr;$/;"	t	file:
EdgeNodeId	algorithm/graph/Graph.h	/^                typedef NodeId EdgeNodeId;$/;"	t	struct:BGIQD::GRAPH::GraphEdgeBase
EdgeNodeId	algorithm/graph/GraphBasic.h	/^                typedef NodeId EdgeNodeId;$/;"	t	struct:BGIQD::GRAPH::IDigraphEdgeBase
EdgeNodeId	algorithm/graph/GraphBasic.h	/^                typedef NodeId EdgeNodeId;$/;"	t	struct:BGIQD::GRAPH::IGraphEdgeBasic
Edges	algorithm/graph/GraphBasic.h	/^                typedef TEdges Edges ;$/;"	t	struct:BGIQD::GRAPH::ListDigraph
Edges	algorithm/graph/GraphBasic.h	/^                typedef TEdges Edges ;$/;"	t	struct:BGIQD::GRAPH::ListGraph
Edges	algorithm/graph/GraphBasic.h	/^                typedef TEdges Edges ;$/;"	t	struct:BGIQD::GRAPH::ListGraphBasic
EdgesSize	algorithm/graph/GraphBasic.h	/^                size_t EdgesSize() const $/;"	f	struct:BGIQD::GRAPH::ListGraphBasic
Element	algorithm/collection/collection.h	/^                typedef T Element;$/;"	t	struct:BGIQD::Collection::Collection
Element	algorithm/incr_array/incr_array.h	/^                typedef T Element;$/;"	t	struct:BGIQD::INCRARRAY::IncrArray
Element	algorithm/incr_array/incr_array.h	/^                typedef typename T::Element Element;$/;"	t	struct:BGIQD::INCRARRAY::non_const_traits
Element	algorithm/incr_array/incr_array.h	/^                typedef typename T::Element const Element;$/;"	t	class:BGIQD::INCRARRAY::const_traits::T
Empty	algorithm/fibheap/fib_heap.h	/^                bool Empty()$/;"	f	struct:BGIQD::FIBHEAP::FibHeap
End	common/multithread/JobQueue.h	/^            void End()$/;"	f	struct:BGIQD::MultiThread::JobQueue
End	common/multithread/MultiThread.h	/^        void End()$/;"	f	struct:BGIQD::MultiThread::MultiThread
EndPoint	algorithm/graph/DepthSearch.h	/^            EndPoint  = 3 ,$/;"	e	enum:BGIQD::GRAPH::DepthSearchEdgeType
EndType	soap2/contigGraphSearch.h	/^            enum EndType $/;"	g	struct:BGIQD::SOAP2::Node_EA
Ender1	algorithm/graph/GraphTest.cpp	/^struct Ender1 : public BGIQD::GRAPH::PathEndHelperBase<ACCESS, traits_1 , BGIQD::GRAPH::DepthSearchNode<ACCESS::Node>>$/;"	s	file:
Ender1	algorithm/graph/SPFSearch_test.cpp	/^struct Ender1 : public BGIQD::GRAPH::PathEndHelperBase<ACCESS, traits_1 , BGIQD::GRAPH::SPFNode<ACCESS::Node>>$/;"	s	file:
Ender2	algorithm/graph/GraphTest.cpp	/^struct Ender2 : public BGIQD::GRAPH::PathEndHelperBase<ACCESS, traits_2, BGIQD::GRAPH::DepthSearchNode<ACCESS::Node>>$/;"	s	file:
ErrConnect	dev_tools/ContigTypeByRef.cpp	/^bool ErrConnect( const contigMatchData & v, int thresold ,  int & err)$/;"	f
Error	soap2/contigType.h	/^                    Error = 1 ,$/;"	e	enum:BGIQD::SOAP2::ContigTypeDetecter::Type
ErrorCovHigh	soap2/contigType.h	/^                float ErrorCovHigh ;$/;"	m	struct:BGIQD::SOAP2::ContigTypeDetecter
ExtractMin	algorithm/fibheap/fib_heap.h	/^                Node & ExtractMin()$/;"	f	struct:BGIQD::FIBHEAP::FibHeap
F	algorithm/incr_array/incr_array.h	/^            typedef iterator_base<const_traits<T> > F;$/;"	t	struct:BGIQD::INCRARRAY::const_iterator
F	algorithm/incr_array/incr_array.h	/^            typedef iterator_base<non_const_traits<T> > F;$/;"	t	struct:BGIQD::INCRARRAY::iterator
FASTA	unused/fastqa/fasta.h	/^    FASTA = 2,$/;"	e	enum:BGIQD::FASTQA::Type
FASTQ	unused/fastqa/fasta.h	/^    FASTQ = 1,$/;"	e	enum:BGIQD::FASTQA::Type
FASTQA	unused/fastqa/fasta.cpp	/^namespace FASTQA{$/;"	n	namespace:BGIQD	file:
FASTQA	unused/fastqa/fasta.h	/^namespace FASTQA{$/;"	n	namespace:BGIQD
FATAL	common/error/Error.h	7;"	d
FIBHEAP	algorithm/fibheap/fib_heap.h	/^    namespace FIBHEAP {$/;"	n	namespace:BGIQD
FILES	common/files/file_reader.cpp	/^namespace FILES {$/;"	n	namespace:BGIQD	file:
FILES	common/files/file_reader.h	/^namespace FILES{$/;"	n	namespace:BGIQD
FILES	common/files/file_writer.cpp	/^namespace FILES{$/;"	n	namespace:BGIQD	file:
FILES	common/files/file_writer.h	/^namespace FILES{$/;"	n	namespace:BGIQD
FLAGS	biocommon/sam_bam/sam_parser.h	/^struct FLAGS$/;"	s	namespace:BGIQD::SAM
FLAGS_INT	biocommon/sam_bam/sam_parser.h	/^union FLAGS_INT$/;"	u	namespace:BGIQD::SAM
FLAGS_INT	common/flags/flags.h	6;"	d
FLAGS_INT	soap2/graphEA.h	/^            FLAGS_INT;$/;"	m	struct:BGIQD::SOAP2::Edge
FLAGS_INT	stLFR/LineGroup.h	/^            FLAGS_INT ;$/;"	m	struct:BGIQD::stLFR::fill_flag
FLAGS_INT	stLFR/barcodeOnContig.h	/^                FLAGS_INT ;$/;"	m	struct:BGIQD::stLFR::P2PGraph::Circle
FLAGS_INT	stLFR/barcodeOnContig.h	/^                FLAGS_INT;$/;"	m	struct:BGIQD::stLFR::P2PGraph::Edge
FREQ	common/freq/freq.h	/^namespace FREQ{$/;"	n	namespace:BGIQD
FibBaseNode	algorithm/graph/SPFSearch.h	/^                typedef BGIQD::FIBHEAP::Node<int,typename BaseNode::NodeNodeId> FibBaseNode;$/;"	t	struct:BGIQD::GRAPH::SPFNode
FibHeap	algorithm/fibheap/fib_heap.h	/^                FibHeap() : min( NULL ) , n (0) {}$/;"	f	struct:BGIQD::FIBHEAP::FibHeap
FibHeap	algorithm/fibheap/fib_heap.h	/^            struct FibHeap$/;"	s	namespace:BGIQD::FIBHEAP
FibHeap	algorithm/graph/SPFSearch.h	/^                typedef BGIQD::FIBHEAP::FibHeap<FibNode>    FibHeap;$/;"	t	struct:BGIQD::GRAPH::SPFSearch
FibNode	algorithm/graph/SPFSearch.h	/^                typedef typename SPFNode1::FibBaseNode      FibNode;$/;"	t	struct:BGIQD::GRAPH::SPFSearch
FileNames	soap2/fileName.h	/^        struct FileNames$/;"	s	namespace:BGIQD::SOAP2
FileReaderFactory	common/files/file_reader.h	/^class FileReaderFactory {$/;"	c	namespace:BGIQD::FILES
FileWriterFactory	common/files/file_writer.h	/^class FileWriterFactory{$/;"	c	namespace:BGIQD::FILES
FillCircle	stLFR/barcodeOnContig.h	/^                FillCircle = 2 ,$/;"	e	enum:BGIQD::stLFR::P2PGraph::CircleStrategy
FillContigRoad	main/FillContigRoad.cpp	/^void FillContigRoad( int i ) \/\/BGIQD::stLFR::ContigRoad & road)$/;"	f
FillContigRoad_cpp	main/Makefile	/^FillContigRoad_cpp		= FillContigRoad.cpp$/;"	m
FillContigRoad_o	main/Makefile	/^FillContigRoad_o 		= ${FillContigRoad_cpp:%.cpp=%.o} ${source_cpp:%.cpp=%.o}$/;"	m
FillStatus	stLFR/LineGroup.h	/^            enum FillStatus$/;"	g	struct:BGIQD::stLFR::ContigRoad
FillStrategy	main/FillContigRoad.cpp	/^    enum FillStrategy$/;"	g	struct:GlobalConfig	file:
FilterAllReads	tools/stLFR_2_10X.cpp	/^    void FilterAllReads(std::istream & r1 , std::istream & r2 , std::ostream & out)$/;"	f	struct:AppConf
FindCorrectPath	main/FillContigRoad.cpp	/^void FindCorrectPath(unsigned int from , unsigned int to, $/;"	f
Finish	algorithm/graph/SPFSearch.h	/^                    Finish = 2 ,$/;"	e	enum:BGIQD::GRAPH::SPFNode::Type
Finish	unused/fastqa/fasta.h	/^        Finish = 7,$/;"	e	enum:BGIQD::FASTQA::SeqItemFactory::Process
FlagsForFile	.ycm_extra_conf.py	/^def FlagsForFile( filename, **kwargs ):$/;"	f
FormatBarcodeOnRef_cpp	dev_tools/Makefile	/^FormatBarcodeOnRef_cpp =	FormatBarcodeOnRef.cpp$/;"	m
FormatBarcodeOnRef_o	dev_tools/Makefile	/^FormatBarcodeOnRef_o   =	${FormatBarcodeOnRef_cpp:%.cpp=%.o} ${source_cpp:%.cpp=%.o}$/;"	m
Forward	algorithm/bi_list/bi_list.h	/^                BiListPtr Forward()$/;"	f	struct:BGIQD::BILIST::BiList
Freq	common/freq/freq.h	/^        class Freq$/;"	c	namespace:BGIQD::FREQ
From	unused/graph/Graph.h	/^                VertexIndex From( EdgeIndex e)$/;"	f	class:BGIQD::Graph::DiGraph_VE
GRAPH	algorithm/graph/DepthSearch.h	/^    namespace GRAPH{$/;"	n	namespace:BGIQD
GRAPH	algorithm/graph/Graph.h	/^    namespace GRAPH {$/;"	n	namespace:BGIQD
GRAPH	algorithm/graph/GraphBasic.h	/^    namespace GRAPH {$/;"	n	namespace:BGIQD
GRAPH	algorithm/graph/GraphTrunk.h	/^    namespace GRAPH{$/;"	n	namespace:BGIQD
GRAPH	algorithm/graph/MinTree.h	/^    namespace GRAPH {$/;"	n	namespace:BGIQD
GRAPH	algorithm/graph/SPFSearch.h	/^    namespace GRAPH{$/;"	n	namespace:BGIQD
GZSTREAM_H	common/files/gzstream.h	37;"	d
GZSTREAM_NAMESPACE	common/files/gzstream.cpp	/^namespace GZSTREAM_NAMESPACE {$/;"	n	file:
GZSTREAM_NAMESPACE	common/files/gzstream.h	/^namespace GZSTREAM_NAMESPACE {$/;"	n
G_Edge	unused/graph/Graph.h	/^                typedef Edge<I>  G_Edge;$/;"	t	class:BGIQD::Graph::DiGraph_VE
G_Vertex	unused/graph/Graph.h	/^                typedef VertexWithEdge<E> G_Vertex;$/;"	t	class:BGIQD::Graph::DiGraph_VE
GenerateMinTreeTrunkLinears	main/MinTree.cpp	/^    void GenerateMinTreeTrunkLinears()$/;"	f	struct:AppConf
GenerateMinTreeTrunks	main/MinTree.cpp	/^    void GenerateMinTreeTrunks()$/;"	f	struct:AppConf
GenerateMinTrees	main/MinTree.cpp	/^    void GenerateMinTrees()$/;"	f	struct:AppConf
GenerateNewContigSeq	main/MergeContig.cpp	/^    void GenerateNewContigSeq()$/;"	f	struct:AppConfig
GenerateNewContigSeq_linear	main/MergeContig.cpp	/^    void GenerateNewContigSeq_linear()$/;"	f	struct:AppConfig	file:
GenerateNewContigSeq_super	main/MergeContig.cpp	/^    void GenerateNewContigSeq_super()$/;"	f	struct:AppConfig	file:
GeneratePath	stLFR/barcodeOnContig.cpp	/^        void P2PGraph::GeneratePath()$/;"	f	class:BGIQD::stLFR::P2PGraph
GenerateReaderFromFileName	common/files/file_reader.cpp	/^    std::istream * FileReaderFactory::GenerateReaderFromFileName(const std::string & file_name )$/;"	f	class:BGIQD::FILES::std::FileReaderFactory
GenerateWriterFromFileName	common/files/file_writer.cpp	/^    std::ostream * FileWriterFactory::GenerateWriterFromFileName( const std::string & file_name )$/;"	f	class:BGIQD::FILES::std::FileWriterFactory
Get	common/multithread/JobQueue.h	/^            std::pair<bool , Job> Get()$/;"	f	struct:BGIQD::MultiThread::JobQueue
GetAttr	algorithm/graph/Graph.h	/^                void GetAttr(const Node & , const Edge & ,$/;"	f	struct:BGIQD::GRAPH::GraphAccessBase
GetAttr	algorithm/graph/SPFSearch_test.cpp	/^    void GetAttr( const Node & n , const Edge & e , const std::string & name , int & l)$/;"	f	struct:ACCESS
GetAttr	soap2/contigGraphSearch.h	/^            void GetAttr(const Node & node, const Edge & ,$/;"	f	struct:BGIQD::SOAP2::GraphEA_Access
GetCompilationInfoForFile	.ycm_extra_conf.py	/^def GetCompilationInfoForFile( filename ):$/;"	f
GetEdge	algorithm/graph/GraphBasic.h	/^                Edge & GetEdge( const EdgeId & id )$/;"	f	struct:BGIQD::GRAPH::ListGraphBasic
GetEdge	algorithm/graph/GraphBasic.h	/^                const Edge & GetEdge( const EdgeId &id )const$/;"	f	struct:BGIQD::GRAPH::ListGraphBasic
GetEdge	main/MergeContig.cpp	/^    std::pair< ContigStatus , BGIQD::SOAP2::Edge & > GetEdge( unsigned int id )$/;"	f	struct:AppConfig
GetGroup	algorithm/disjoin_set/disjoin_set.h	/^                Key GetGroup( const Key a )$/;"	f	class:BGIQD::Algorithm::DisJoin_Set
GetLinearFromNode	main/MergeContig.cpp	/^    void GetLinearFromNode(const BGIQD::SOAP2::Edge & edge , std::vector<unsigned int> & path)$/;"	f	struct:AppConfig	file:
GetNode	algorithm/graph/GraphBasic.h	/^                Node & GetNode(const NodeId & id )$/;"	f	struct:BGIQD::GRAPH::ListGraphBasic
GetNode	algorithm/graph/GraphBasic.h	/^                const Node & GetNode(const NodeId & id )const $/;"	f	struct:BGIQD::GRAPH::ListGraphBasic
GetRepresentation	algorithm/disjoin_set/disjoin_set.h	/^                Node * GetRepresentation(Key a)$/;"	f	class:BGIQD::Algorithm::DisJoin_Set
GetResults	common/multithread/MapReduce.h	/^        ShufflerResult && GetResults()$/;"	f	class:BGIQD::MultiThread::Shuffler
GetTestData	algorithm/incr_array/incr_array_test.cpp	/^IntArray & GetTestData()$/;"	f
GetTestGraph	algorithm/graph/GraphTest.cpp	/^    static TestGraph1 GetTestGraph()$/;"	f	struct:TestGraph1
GetTestGraph	algorithm/graph/SPFSearch_test.cpp	/^    static TestGraph GetTestGraph()$/;"	f	struct:TestGraph
GetValidFrom	soap2/contigGraph.cpp	/^        KeyConn & KeyEdge::GetValidFrom() $/;"	f	class:BGIQD::SOAP2::KeyEdge
GetValidTo	soap2/contigGraph.cpp	/^        KeyConn & KeyEdge::GetValidTo() $/;"	f	class:BGIQD::SOAP2::KeyEdge
GetValue	algorithm/graph/MinTree.h	/^                Value GetValue( const TEdge & ) const {}$/;"	f	struct:BGIQD::GRAPH::NodeAttr
GetValue	algorithm/graph/MinTree_test.cpp	/^    int GetValue(const MTEdge & e ) const$/;"	f	struct:EAttr
GetValue	stLFR/contigSimGraph.h	/^            float GetValue(const Edge & e ) const $/;"	f	struct:BGIQD::stLFR::EdgeAttr
GiveUp	stLFR/barcodeOnContig.h	/^                GiveUp = 1 ,$/;"	e	enum:BGIQD::stLFR::P2PGraph::CircleStrategy
GlobalAnalysis	soap2/contigType.cpp	/^        void ContigTypeDetecter::GlobalAnalysis()$/;"	f	class:BGIQD::SOAP2::ContigTypeDetecter
GlobalConfig	main/FillContigRoad.cpp	/^struct GlobalConfig$/;"	s	file:
GlobalContig	dev_tools/ContigRoadFill2Fasta.cpp	/^struct GlobalContig$/;"	s	file:
Graph	unused/graph/Edge.h	/^namespace Graph{$/;"	n	namespace:BGIQD
Graph	unused/graph/Graph.h	/^namespace Graph{$/;"	n	namespace:BGIQD
Graph	unused/graph/Vertex.h	/^namespace Graph{$/;"	n	namespace:BGIQD
GraphAccessBase	algorithm/graph/Graph.h	/^            struct GraphAccessBase$/;"	s	namespace:BGIQD::GRAPH
GraphEA	soap2/contigGraph.h	/^        struct  GraphEA$/;"	s	namespace:BGIQD::SOAP2
GraphEA	soap2/graphEA.h	/^        struct  GraphEA$/;"	s	namespace:BGIQD::SOAP2
GraphEA_Access	soap2/contigGraphSearch.h	/^        struct GraphEA_Access : public BGIQD::GRAPH::GraphAccessBase<$/;"	s	namespace:BGIQD::SOAP2
GraphEA_withBarcode	stLFR/barcodeOnContig.h	/^        struct GraphEA_withBarcode$/;"	s	namespace:BGIQD::stLFR
GraphEdgeBase	algorithm/graph/Graph.h	/^            struct GraphEdgeBase$/;"	s	namespace:BGIQD::GRAPH
GraphEdgeId	algorithm/graph/Graph.h	/^                typedef EdgeId                       GraphEdgeId ;$/;"	t	struct:BGIQD::GRAPH::GraphAccessBase
GraphNodeBase	algorithm/graph/Graph.h	/^            struct GraphNodeBase$/;"	s	namespace:BGIQD::GRAPH
GraphNodeId	algorithm/graph/Graph.h	/^                typedef NodeId                       GraphNodeId ;$/;"	t	struct:BGIQD::GRAPH::GraphAccessBase
Gray	algorithm/graph/DepthSearch.h	/^            Gray = 1 ,$/;"	e	enum:BGIQD::GRAPH::DepthSearchEdgeType
H	biocommon/sam_bam/sam_parser.h	/^    H = 5 ,$/;"	e	enum:BGIQD::SAM::CIGAR
Half	soap2/contigType.h	/^                    Half = 2,$/;"	e	enum:BGIQD::SOAP2::ContigTypeDetecter::Type
HalfCovHigh	soap2/contigType.h	/^                float HalfCovHigh;$/;"	m	struct:BGIQD::SOAP2::ContigTypeDetecter
HasEdge	algorithm/graph/GraphBasic.h	/^                bool HasEdge(const NodeEdgeId &id )$/;"	f	struct:BGIQD::GRAPH::IGraphNodeBasic
HasNode	algorithm/graph/GraphBasic.h	/^                bool HasNode( const NodeId & id )$/;"	f	struct:BGIQD::GRAPH::ListGraphBasic
HasPecfectMatch	dev_tools/ContigTypeByRef.cpp	/^bool HasPecfectMatch( const contigMatchData & v)$/;"	f
Head	biocommon/sam_bam/sam_parser.h	/^struct Head$/;"	s	namespace:BGIQD::SAM
HeadLine	biocommon/sam_bam/sam_parser.h	/^        HeadLine= 0 ,$/;"	e	enum:BGIQD::SAM::Head::HeadType
HeadType	biocommon/sam_bam/sam_parser.h	/^    enum HeadType$/;"	g	struct:BGIQD::SAM::Head
HeapLink	algorithm/fibheap/fib_heap.h	/^                    void HeapLink(Node * y , Node * x )$/;"	f	struct:BGIQD::FIBHEAP::FibHeap
I	biocommon/sam_bam/sam_parser.h	/^    I = 1 ,$/;"	e	enum:BGIQD::SAM::CIGAR
IDigraphEdgeBase	algorithm/graph/GraphBasic.h	/^            struct IDigraphEdgeBase : public IGraphEdgeBasic<NodeId, EdgeId>$/;"	s	namespace:BGIQD::GRAPH
IGraphEdgeBasic	algorithm/graph/GraphBasic.h	/^            struct IGraphEdgeBasic$/;"	s	namespace:BGIQD::GRAPH
IGraphNodeBasic	algorithm/graph/GraphBasic.h	/^            struct IGraphNodeBasic$/;"	s	namespace:BGIQD::GRAPH
ILine	stLFR/Line.h	/^class ILine$/;"	c	namespace:BGIQD::stLFR
INCRARRAY	algorithm/incr_array/incr_array.h	/^    namespace INCRARRAY {$/;"	n	namespace:BGIQD
INFO	common/log/logfilter.h	/^    INFO = 1,$/;"	e	enum:BGIQD::LOG::loglevel
Id	algorithm/graph/Graph.h	/^                typedef typename GraphAccess::GraphEdgeId Id;$/;"	t	struct:BGIQD::GRAPH::EdgeIterator
Id	stLFR/barcodeId.cpp	/^    int BarcodeId::Id(const std::string & tag ) const $/;"	f	class:BGIQD::stLFR::BarcodeId
Id	stLFR/barcodeId.cpp	/^    int BarcodeIdHelper::Id(const std::string & tag)$/;"	f	class:BGIQD::stLFR::BarcodeIdHelper
IgnoreCircle	stLFR/barcodeOnContig.h	/^                IgnoreCircle = 3 ,$/;"	e	enum:BGIQD::stLFR::P2PGraph::CircleStrategy
InHeap	algorithm/graph/SPFSearch.h	/^                    InHeap = 1 ,$/;"	e	enum:BGIQD::GRAPH::SPFNode::Type
Incr	common/stl/mapHelper.h	/^                static void Incr(Map & map , const Key & k , const Value & value)$/;"	f	struct:BGIQD::STL::MapHelper
IncrArray	algorithm/incr_array/incr_array.h	/^                IncrArray() $/;"	f	struct:BGIQD::INCRARRAY::IncrArray
IncrArray	algorithm/incr_array/incr_array.h	/^                IncrArray(size_t block_size)$/;"	f	struct:BGIQD::INCRARRAY::IncrArray
IncrArray	algorithm/incr_array/incr_array.h	/^            struct  IncrArray$/;"	s	namespace:BGIQD::INCRARRAY
IncreaseElement	algorithm/collection/collection.h	/^                void IncreaseElement(const Element & e, int num = 1)$/;"	f	struct:BGIQD::Collection::Collection
Init	algorithm/bi_list/bi_list.h	/^                void Init(T * s) $/;"	f	struct:BGIQD::BILIST::BiList
Init	algorithm/fibheap/fib_heap.h	/^                void Init() $/;"	f	struct:BGIQD::FIBHEAP::Node
Init	algorithm/graph/DepthSearch.h	/^                void Init(const Node & me,const DepthSearchNode & parenet,int step_start )$/;"	f	struct:BGIQD::GRAPH::DepthSearchNode
Init	algorithm/graph/GraphBasic.h	/^                void Init()$/;"	f	struct:BGIQD::GRAPH::ListGraphBasic
Init	algorithm/incr_array/incr_array.h	/^                void Init( size_t block_size) $/;"	f	struct:BGIQD::INCRARRAY::IncrArray
Init	dev_tools/ContigRoadFill2Fasta.cpp	/^        void Init(const std::string & line , int k) {$/;"	f	struct:GlobalContig::ContigFastA
Init	dev_tools/ContigRoadFill2Fasta.cpp	/^    void Init(int k , const std::string & f)$/;"	f	struct:GlobalContig
Init	main/BinCluster.cpp	/^    void Init(const std::string & p , float t)$/;"	f	struct:AppConfig
Init	main/ChopBin.cpp	/^    void Init(const std::string & prefix,const  int bin)$/;"	f	struct:AppConfig
Init	main/ContigDlink.cpp	/^    void Init(const std::string & prefix , int k )$/;"	f	struct:AppConfig
Init	main/FillContigRoad.cpp	/^    void Init(const std::string & prefix)$/;"	f	struct:GlobalConfig
Init	main/LinearCDG.cpp	/^    void Init(const std::string & prefix)$/;"	f	struct:AppConfig
Init	main/MergeContig.cpp	/^    void Init(const std::string & prefix , int rd, int k , WorkType t)$/;"	f	struct:AppConfig
Init	main/MinTree.cpp	/^    void Init(const std::string & prefix)$/;"	f	struct:AppConf
Init	main/Sam2ReadOnContig.cpp	/^    void Init(const std::string & prefix  ,const std::string & b2n_f, bool b )$/;"	f	struct:AppConfig
Init	main/StaticsticUnique.cpp	/^    void Init(int k, int m ,const std::string & prefix )$/;"	f	struct:AppConfig
Init	soap2/contigFasta.cpp	/^        void ContigFastA::Init(const std::string & line , int k) {$/;"	f	class:BGIQD::SOAP2::ContigFastA
Init	soap2/contigFasta.h	/^                void Init(int k )$/;"	f	class:BGIQD::SOAP2::ContigFastAMap
Init	soap2/contigGraph.cpp	/^        void KeyEdge::Init(int i , unsigned int b)$/;"	f	class:BGIQD::SOAP2::KeyEdge
Init	soap2/contigGraphDepth.h	/^                void Init( NodeTypeDetector key ,int max_l , int max_d )$/;"	f	struct:BGIQD::SOAP2::DepthSearchEAEnder
Init	soap2/contigGraphDepth.h	/^            void Init(const Node & me,const DNode_EA & parenet,int step_start )$/;"	f	struct:BGIQD::SOAP2::DNode_EA
Init	soap2/contigGraphSPF.h	/^            void Init( NodeTypeDetector  k , int max_l )$/;"	f	struct:BGIQD::SOAP2::SFPEnder
Init	soap2/contigType.h	/^            void Init(int k)$/;"	f	struct:BGIQD::SOAP2::ContigTypeDetecter
Init	soap2/fileName.h	/^            void Init(const std::string & prefix)$/;"	f	struct:BGIQD::SOAP2::FileNames
Init	stLFR/barcodeOnContig.cpp	/^        void P2PGraph::Init( unsigned int from , unsigned int to)$/;"	f	class:BGIQD::stLFR::P2PGraph
Init	stLFR/barcodeOnContig.h	/^                void Init()$/;"	f	struct:BGIQD::stLFR::P2PGraph::Path
Init	unused/fastqa/fasta.h	/^    void Init( Type t) { type = t ; }$/;"	f	struct:BGIQD::FASTQA::SeqItemFactory
InitAsRoot	algorithm/graph/SPFSearch.h	/^                void InitAsRoot(const BaseNode & node )$/;"	f	struct:BGIQD::GRAPH::SPFNode
InitC1	algorithm/collection/collection_test.cpp	/^CharCollect InitC1()$/;"	f
InitC2	algorithm/collection/collection_test.cpp	/^CharCollect InitC2()$/;"	f
InitEdge	stLFR/barcodeOnContig.cpp	/^        void P2PGraph::InitEdge( unsigned int id)$/;"	f	class:BGIQD::stLFR::P2PGraph
InitFrom	soap2/contigGraph.cpp	/^        void KeyEdge::InitFrom( const std::string & str )$/;"	f	class:BGIQD::SOAP2::KeyEdge
InitFromString	soap2/contigGraph.cpp	/^        void KeyConn::InitFromString( const std::string & str )$/;"	f	class:BGIQD::SOAP2::KeyConn
InitFromString	stLFR/CBB.cpp	/^        void BarcodeOnBin::InitFromString(const std::string & line)$/;"	f	class:BGIQD::stLFR::BarcodeOnBin
InitFromString	stLFR/CBB.cpp	/^        void BinRelation::InitFromString(const std::string & line)$/;"	f	class:BGIQD::stLFR::BinRelation
InitFromString	stLFR/CBB.cpp	/^        void ContigRelation::InitFromString(const std::string &line )$/;"	f	class:BGIQD::stLFR::ContigRelation
InitNode	algorithm/graph/SPFSearch.h	/^                void InitNode(const BaseNode & node ,const SPFNode & father , int length)$/;"	f	struct:BGIQD::GRAPH::SPFNode
InitRoot	algorithm/graph/DepthSearch.h	/^                void InitRoot(const Node & me,int step_start )$/;"	f	struct:BGIQD::GRAPH::DepthSearchNode
InitRoot	soap2/contigGraphDepth.h	/^            void InitRoot(const Node & me,int step_start )$/;"	f	struct:BGIQD::SOAP2::DNode_EA
InitTo	soap2/contigGraph.cpp	/^        void KeyEdge::InitTo( const std::string & str )$/;"	f	class:BGIQD::SOAP2::KeyEdge
Insert	algorithm/bi_list/bi_list.h	/^                void Insert( BiListPtr node)$/;"	f	struct:BGIQD::BILIST::BiList
Insert	algorithm/fibheap/fib_heap.h	/^                void Insert( Node & node )$/;"	f	struct:BGIQD::FIBHEAP::Node
Insert	algorithm/fibheap/fib_heap.h	/^                void Insert(Node & x)$/;"	f	struct:BGIQD::FIBHEAP::FibHeap
IntArray	algorithm/incr_array/incr_array_test.cpp	/^typedef BGIQD::INCRARRAY::IncrArray<int> IntArray;$/;"	t	file:
Intersection	algorithm/collection/collection.h	/^                static Collection Intersection( const Collection & c1 , const Collection & c2 )$/;"	f	struct:BGIQD::Collection::Collection
Invalid	algorithm/graph/DepthSearch.h	/^            Invalid = -1 ,$/;"	e	enum:BGIQD::GRAPH::DepthSearchEdgeType
Invalid	stLFR/barcodeOnContig.h	/^                Invalid = 4 $/;"	e	enum:BGIQD::stLFR::P2PGraph::CircleStrategy
IsBase	dev_tools/ContigRoadFill2Fasta.cpp	/^        bool IsBase() const { return flag & 0x4; }$/;"	f	struct:GlobalContig::ContigFastA
IsBase	soap2/contigFasta.h	/^            bool IsBase() const     { return    flag &  0x4; }$/;"	f	struct:BGIQD::SOAP2::ContigFastA
IsBase	soap2/contigGraph.h	/^            bool IsBase() const     { return flag & 0x200 ; }$/;"	f	struct:BGIQD::SOAP2::Edge
IsBiNotSupport	soap2/contigGraph.h	/^            bool IsBiNotSupport() const { return flag & 0x4 ;}$/;"	f	struct:BGIQD::SOAP2::KeyConn
IsCircle	soap2/contigGraph.h	/^            bool IsCircle() const { return flag & 0x40 ; }$/;"	f	struct:BGIQD::SOAP2::KeyEdge
IsConnected	unused/graph/Graph.h	/^                bool IsConnected(I i1 , I i2 , E & e)$/;"	f	class:BGIQD::Graph::DiGraph_VE
IsDelete	soap2/contigGraph.h	/^            bool IsDelete() const   { return flag & 0x1 ; }$/;"	f	struct:BGIQD::SOAP2::Edge
IsE	biocommon/sam_bam/sam_parser.cpp	/^bool MatchData::IsE() const$/;"	f	class:BGIQD::SAM::MatchData
IsEnd	algorithm/graph/Graph.h	/^                bool IsEnd() const { assert(0) ;} ;$/;"	f	struct:BGIQD::GRAPH::PathEndHelperBase
IsEnd	algorithm/graph/GraphTest.cpp	/^    bool IsEnd() const {$/;"	f	struct:Ender1
IsEnd	algorithm/graph/GraphTest.cpp	/^    bool IsEnd() const {$/;"	f	struct:Ender2
IsEnd	algorithm/graph/SPFSearch_test.cpp	/^    bool IsEnd() const {$/;"	f	struct:Ender1
IsEnd	soap2/contigGraphDepth.h	/^                bool IsEnd() const {$/;"	f	struct:BGIQD::SOAP2::DepthSearchEAEnder
IsEnd	soap2/contigGraphSPF.h	/^            bool IsEnd() const { return ender_flag ; }$/;"	f	struct:BGIQD::SOAP2::SFPEnder
IsHead	biocommon/sam_bam/sam_parser.h	/^        bool IsHead() const { return m_line.at(0) == '@' ; }$/;"	f	class:BGIQD::SAM::LineParser
IsHeaderFile	.ycm_extra_conf.py	/^def IsHeaderFile( filename ):$/;"	f
IsJumpConn	soap2/contigGraph.h	/^            bool IsJumpConn() const { return flag & 0x1 ;}$/;"	f	struct:BGIQD::SOAP2::KeyConn
IsJumpStep	soap2/contigGraph.h	/^            bool IsJumpStep() const { return flag & 0x80 ; }$/;"	f	struct:BGIQD::SOAP2::Edge
IsJunction	soap2/contigGraph.h	/^            bool IsJunction() const { return flag & 0x4 ; }$/;"	f	struct:BGIQD::SOAP2::KeyEdge
IsKSet	dev_tools/ContigRoadFill2Fasta.cpp	/^        bool IsKSet() const { return flag & 0x2 ; }$/;"	f	struct:GlobalContig::ContigFastA
IsKSet	soap2/contigFasta.h	/^            bool IsKSet() const     { return    flag &  0x2 ; }$/;"	f	struct:BGIQD::SOAP2::ContigFastA
IsKey	soap2/contigGraph.h	/^            bool IsKey() const      { return flag & 0x40 ; }$/;"	f	struct:BGIQD::SOAP2::Edge
IsLinear	soap2/contigGraph.h	/^            bool IsLinear() const   { return flag & 0x8 ; }$/;"	f	struct:BGIQD::SOAP2::Edge
IsLinear	soap2/contigGraph.h	/^            bool IsLinear() const { return flag & 0x1 ; }$/;"	f	struct:BGIQD::SOAP2::KeyEdge
IsMarked	soap2/contigGraph.h	/^            bool IsMarked() const   { return flag & 0x400 ; }$/;"	f	struct:BGIQD::SOAP2::Edge
IsMarked	soap2/contigGraph.h	/^            bool IsMarked() { return flag & 0x8 ;}$/;"	f	struct:BGIQD::SOAP2::KeyEdge
IsMerge	dev_tools/ContigRoadFill2Fasta.cpp	/^        bool IsMerge() const { return flag & 0x1 ; }$/;"	f	struct:GlobalContig::ContigFastA
IsMerge	soap2/contigFasta.h	/^            bool IsMerge() const    { return    flag &  0x1 ; }$/;"	f	struct:BGIQD::SOAP2::ContigFastA
IsP	biocommon/sam_bam/sam_parser.cpp	/^bool MatchData::IsP() const$/;"	f	class:BGIQD::SAM::MatchData
IsPCRduplicae	biocommon/sam_bam/sam_parser.cpp	/^bool MatchData::IsPCRduplicae() const$/;"	f	class:BGIQD::SAM::MatchData
IsPalindrome	soap2/contigGraph.h	/^            bool IsPalindrome()const{ return flag & 0x100 ; }$/;"	f	struct:BGIQD::SOAP2::Edge
IsParlindorme	soap2/contigFasta.h	/^            bool IsParlindorme()const{return    flag &  0x8; }$/;"	f	struct:BGIQD::SOAP2::ContigFastA
IsPathInCircle	stLFR/barcodeOnContig.h	/^                bool IsPathInCircle(const Circle & c)$/;"	f	struct:BGIQD::stLFR::P2PGraph::Path
IsPositive	soap2/contigGraph.h	/^            bool IsPositive() const { return flag & 0x2 ; }$/;"	f	struct:BGIQD::SOAP2::KeyConn
IsPrimaryMatch	biocommon/sam_bam/sam_parser.cpp	/^bool MatchData::IsPrimaryMatch() const$/;"	f	class:BGIQD::SAM::MatchData
IsRepeat	soap2/contigGraph.h	/^            bool IsRepeat() const   { return flag & 0x2 ; }$/;"	f	struct:BGIQD::SOAP2::Edge
IsReverseComplete	biocommon/sam_bam/sam_parser.cpp	/^bool MatchData::IsReverseComplete() const$/;"	f	class:BGIQD::SAM::MatchData
IsSeqComplete	dev_tools/ContigRoadFill2Fasta.cpp	/^        bool IsSeqComplete(int k) const $/;"	f	struct:GlobalContig::ContigFastA
IsSeqComplete	soap2/contigFasta.h	/^            bool IsSeqComplete(int k) const $/;"	f	struct:BGIQD::SOAP2::ContigFastA
IsSeqComplete	soap2/graphEA.h	/^            bool IsSeqComplete(int k) const$/;"	f	struct:BGIQD::SOAP2::Edge
IsSingle	soap2/contigGraph.h	/^            bool IsSingle() const { return flag & 0x20 ; }$/;"	f	struct:BGIQD::SOAP2::KeyEdge
IsTipEnd	soap2/contigGraph.h	/^            bool IsTipEnd() const   { return flag & 0x20 ; }$/;"	f	struct:BGIQD::SOAP2::Edge
IsTipFrom	soap2/contigGraph.h	/^            bool IsTipFrom() const { return flag & 0x2 ; }$/;"	f	struct:BGIQD::SOAP2::KeyEdge
IsTipStart	soap2/contigGraph.h	/^            bool IsTipStart() const { return flag & 0x10 ; }$/;"	f	struct:BGIQD::SOAP2::Edge
IsTipTo	soap2/contigGraph.h	/^            bool IsTipTo() const { return flag & 0x10 ; }$/;"	f	struct:BGIQD::SOAP2::KeyEdge
IsUnique	soap2/contigGraph.h	/^            bool IsUnique() const   { return flag & 0x4 ; }$/;"	f	struct:BGIQD::SOAP2::Edge
IsUsedInSuper	soap2/contigGraph.h	/^            bool IsUsedInSuper()const{return flag & 0x800 ; }$/;"	f	struct:BGIQD::SOAP2::Edge
IsVaid	biocommon/sam_bam/sam_parser.h	/^        bool IsVaid() const { return m_line.size() > 0 ; }$/;"	f	class:BGIQD::SAM::LineParser
IsValid	soap2/contigGraph.h	/^            bool IsValid() const { return  ! ( IsBiNotSupport() ||  IsJumpConn() ); }$/;"	f	struct:BGIQD::SOAP2::KeyConn
JOB01	dev_tools/contig_barcode.cpp	/^    namespace JOB01 {$/;"	n	namespace:BGIQD	file:
JOB01	dev_tools/contig_barcode.h	/^namespace JOB01 {$/;"	n	namespace:BGIQD
Jaccard	algorithm/collection/collection.h	/^                static float Jaccard(const Collection & c1 , const Collection & c2 )$/;"	f	struct:BGIQD::Collection::Collection
Job	common/multithread/Job.h	/^        typedef std::function<void(void)> Job;$/;"	t	namespace:BGIQD::MultiThread
JobQueue	common/multithread/JobQueue.h	/^            JobQueue() : end( false ) {}$/;"	f	struct:BGIQD::MultiThread::JobQueue
JobQueue	common/multithread/JobQueue.h	/^    struct JobQueue$/;"	s	namespace:BGIQD::MultiThread
JoinNode	algorithm/disjoin_set/disjoin_set.h	/^                void JoinNode(Node * a , Node * b)$/;"	f	class:BGIQD::Algorithm::DisJoin_Set
JumpStep	soap2/contigGraph.h	/^            void JumpStep()         { flag |= 0x80 ; }$/;"	f	struct:BGIQD::SOAP2::Edge
Junction	stLFR/contigSimGraph.h	/^                Junction = 4  ,$/;"	e	enum:BGIQD::stLFR::Node::Type
K	dev_tools/ContigRoadFill2Fasta.cpp	/^        std::string     K;$/;"	m	struct:GlobalContig::ContigFastA	file:
K	dev_tools/ContigRoadFill2Fasta.cpp	/^    int K;$/;"	m	struct:GlobalContig	file:
K	main/ContigDlink.cpp	/^    int K;$/;"	m	struct:AppConfig	file:
K	main/FillContigRoad.cpp	/^    int K;$/;"	m	struct:GlobalConfig	file:
K	main/MergeContig.cpp	/^    int K;$/;"	m	struct:AppConfig	file:
K	main/StaticsticUnique.cpp	/^    int K;$/;"	m	struct:AppConfig	file:
K	soap2/contigFasta.h	/^                int K;$/;"	m	class:BGIQD::SOAP2::ContigFastAMap
K	soap2/contigFasta.h	/^            std::string     K;$/;"	m	struct:BGIQD::SOAP2::ContigFastA
K	soap2/contigGraphSearch.h	/^            int K ;$/;"	m	struct:BGIQD::SOAP2::GraphEA_Access
K	soap2/contigType.h	/^                int K ;$/;"	m	struct:BGIQD::SOAP2::ContigTypeDetecter
K	soap2/graphEA.h	/^            std::string     K;$/;"	m	struct:BGIQD::SOAP2::Edge
K	stLFR/barcodeOnContig.h	/^                int K ;$/;"	m	struct:BGIQD::stLFR::P2PGraph::Path
K	stLFR/barcodeOnContig.h	/^            int K ;$/;"	m	struct:BGIQD::stLFR::P2PGraph
Key	algorithm/fibheap/fib_heap.h	/^                typedef TKey Key;$/;"	t	struct:BGIQD::FIBHEAP::Node
Key	algorithm/fibheap/fib_heap.h	/^                typedef typename TNode::Key Key;$/;"	t	struct:BGIQD::FIBHEAP::FibHeap
Key	common/stl/mapHelper.h	/^                typedef typename Map::key_type Key;$/;"	t	struct:BGIQD::STL::MapHelper
KeyConn	soap2/contigGraph.h	/^        struct KeyConn$/;"	s	namespace:BGIQD::SOAP2
KeyEdge	soap2/contigGraph.h	/^        struct KeyEdge$/;"	s	namespace:BGIQD::SOAP2
KeyEnd	soap2/contigGraphSearch.h	/^                KeyEnd = 1 ,$/;"	e	enum:BGIQD::SOAP2::Node_EA::EndType
Key_Neibs	soap2/contigGraphSearch.h	/^            Key_Neibs  = 4 , $/;"	e	enum:BGIQD::SOAP2::NodeType
Key_Unknow	soap2/contigGraphSearch.h	/^            Key_Unknow = 2,$/;"	e	enum:BGIQD::SOAP2::NodeType
Kmer	soap2/kmer.h	/^        typedef uint64_t Kmer[4];$/;"	t	namespace:BGIQD::SOAP2
LINEAR	main/MergeContig.cpp	/^        LINEAR = 3 ,$/;"	e	enum:AppConfig::ContigStatus	file:
LOG	common/log/log.cpp	/^namespace LOG{$/;"	n	namespace:BGIQD	file:
LOG	common/log/log.h	/^namespace LOG{$/;"	n	namespace:BGIQD
LOG	common/log/logfilter.cpp	/^namespace LOG {$/;"	n	namespace:BGIQD	file:
LOG	common/log/logfilter.h	/^namespace LOG{$/;"	n	namespace:BGIQD
L_NodeBase	algorithm/graph/SPFSearch_test.cpp	/^struct L_NodeBase : public BGIQD::GRAPH::GraphNodeBase<char , int>$/;"	s	file:
Last	algorithm/fibheap/fib_heap.h	/^                Node & Last()$/;"	f	struct:BGIQD::FIBHEAP::Node
Line	stLFR/Line.h	/^class Line : public ILine$/;"	c	namespace:BGIQD::stLFR
Line1	unused/fastqa/fasta.h	/^        Line1 = 1 ,$/;"	e	enum:BGIQD::FASTQA::SeqItemFactory::Process
Line2	unused/fastqa/fasta.h	/^        Line2 = 2 ,$/;"	e	enum:BGIQD::FASTQA::SeqItemFactory::Process
Line2More	unused/fastqa/fasta.h	/^        Line2More = 3 ,$/;"	e	enum:BGIQD::FASTQA::SeqItemFactory::Process
Line3	unused/fastqa/fasta.h	/^        Line3 = 4,$/;"	e	enum:BGIQD::FASTQA::SeqItemFactory::Process
Line4	unused/fastqa/fasta.h	/^        Line4 = 5,$/;"	e	enum:BGIQD::FASTQA::SeqItemFactory::Process
Line4More	unused/fastqa/fasta.h	/^        Line4More = 6,$/;"	e	enum:BGIQD::FASTQA::SeqItemFactory::Process
LineFactor	stLFR/Line.h	/^        typedef std::function<float ( const base_line & )> LineFactor;$/;"	t	class:BGIQD::stLFR::ILine
LineFactory	stLFR/Line.h	/^class LineFactory$/;"	c	namespace:BGIQD::stLFR
LineParser	biocommon/sam_bam/sam_parser.h	/^        LineParser( const std::string & line ) : m_line(line) {}$/;"	f	class:BGIQD::SAM::LineParser
LineParser	biocommon/sam_bam/sam_parser.h	/^class LineParser$/;"	c	namespace:BGIQD::SAM
LineSelect	stLFR/Line.h	/^        virtual base_line LineSelect(LineFactor func)$/;"	f	class:BGIQD::stLFR::MultiLine
LineSelect	stLFR/Line.h	/^        virtual base_line LineSelect(LineFactor)$/;"	f	class:BGIQD::stLFR::Line
Linear	main/MergeContig.cpp	/^    void Linear()$/;"	f	struct:AppConfig
Linear	stLFR/contigSimGraph.h	/^                Linear = 3 ,$/;"	e	enum:BGIQD::stLFR::Node::Type
LinearANode	main/MergeContig.cpp	/^    void LinearANode(unsigned int i)$/;"	f	struct:AppConfig	file:
LinearCDG_cpp	main/Makefile	/^LinearCDG_cpp 			= LinearCDG.cpp$/;"	m
LinearCDG_o	main/Makefile	/^LinearCDG_o				= ${LinearCDG_cpp:%.cpp=%.o} ${source_cpp:%.cpp=%.o}$/;"	m
LinearClusterResult_cpp	dev_tools/Makefile	/^LinearClusterResult_cpp =	LinearClusterResult.cpp$/;"	m
LinearClusterResult_o	dev_tools/Makefile	/^LinearClusterResult_o   =	${LinearClusterResult_cpp:%.cpp=%.o} ${source_cpp:%.cpp=%.o}$/;"	m
LinearTrunk	algorithm/graph/GraphTrunk.h	/^                    static std::vector<NodeId> LinearTrunk(const ListGraph &  base )$/;"	f	struct:BGIQD::GRAPH::TrunkHelper
LinkCheck_1_cpp	dev_tools/Makefile	/^LinkCheck_1_cpp			= LinkCheck_1.cpp$/;"	m
LinkCheck_1_o	dev_tools/Makefile	/^LinkCheck_1_o			= ${LinkCheck_1_cpp:%.cpp=%.o} ${source_cpp:%.cpp=%.o}$/;"	m
LinkCheck_cpp	dev_tools/Makefile	/^LinkCheck_cpp			= LinkCheck.cpp$/;"	m
LinkCheck_o	dev_tools/Makefile	/^LinkCheck_o				= ${LinkCheck_cpp:%.cpp=%.o} ${source_cpp:%.cpp=%.o}$/;"	m
ListDigraph	algorithm/graph/GraphBasic.h	/^            struct ListDigraph  : public ListGraphBasic<TNode , TEdge, TNodes , TEdges>$/;"	s	namespace:BGIQD::GRAPH
ListGraph	algorithm/graph/GraphBasic.h	/^            struct ListGraph : public ListGraphBasic<TNode , TEdge, TNodes , TEdges>$/;"	s	namespace:BGIQD::GRAPH
ListGraph	algorithm/graph/GraphTrunk.h	/^                    typedef TListGraph ListGraph ;$/;"	t	struct:BGIQD::GRAPH::TrunkHelper
ListGraphBasic	algorithm/graph/GraphBasic.h	/^            struct ListGraphBasic$/;"	s	namespace:BGIQD::GRAPH
Load	stLFR/barcodeId.cpp	/^    void BarcodeIdHelper::Load( const std::string & file ) $/;"	f	class:BGIQD::stLFR::BarcodeIdHelper
LoadArc	soap2/contigGraph.cpp	/^        void GraphEA::LoadArc( const std::string & file)$/;"	f	class:BGIQD::SOAP2::GraphEA
LoadB2BArray	main/BinCluster.cpp	/^    void LoadB2BArray( )$/;"	f	struct:AppConfig
LoadBarcodeMap	tools/stLFR_2_10X.cpp	/^    void LoadBarcodeMap(std::istream & in )$/;"	f	struct:AppConf
LoadBarcodeOnBinArray	stLFR/CBB.cpp	/^        void LoadBarcodeOnBinArray( const std::string & file , BarcodeOnBinArray & data )$/;"	f	namespace:BGIQD::stLFR
LoadBarcodeOnConfig	stLFR/barcodeOnContig.cpp	/^        void GraphEA_withBarcode::LoadBarcodeOnConfig(const std::string & file)$/;"	f	class:BGIQD::stLFR::GraphEA_withBarcode
LoadBarcodeOnContig	main/ChopBin.cpp	/^    void LoadBarcodeOnContig()$/;"	f	struct:AppConfig
LoadBinRelationArray	stLFR/CBB.cpp	/^        void LoadBinRelationArray(const std::string & file , BinRelationArray & data)$/;"	f	namespace:BGIQD::stLFR
LoadContig	dev_tools/ContigRoadFill2Fasta.cpp	/^    void LoadContig()$/;"	f	struct:GlobalContig
LoadContig	soap2/contigFasta.cpp	/^        void ContigFastAMap::LoadContig(const std::string & file)$/;"	f	class:BGIQD::SOAP2::ContigFastAMap
LoadContigInfo	main/StaticsticUnique.cpp	/^    void LoadContigInfo()$/;"	f	struct:AppConfig
LoadContigRelationArray	stLFR/CBB.cpp	/^        void LoadContigRelationArray(const std::string & file ,ContigRelationArray & data)$/;"	f	namespace:BGIQD::stLFR
LoadContigRoadFills	stLFR/LineGroup.cpp	/^        void ContigRoadFills::LoadContigRoadFills( const std::string &file )$/;"	f	class:BGIQD::stLFR::ContigRoadFills
LoadContigSimGraph	main/MinTree.cpp	/^    void LoadContigSimGraph()$/;"	f	struct:AppConf
LoadEdge	soap2/contigGraph.cpp	/^        void GraphEA::LoadEdge( const std::string & file, int K)$/;"	f	class:BGIQD::SOAP2::GraphEA
LoadKeyInfo	main/FillContigRoad.cpp	/^    void LoadKeyInfo()$/;"	f	struct:GlobalConfig
LoadRoads	stLFR/LineGroup.cpp	/^        void ContigRoads::LoadRoads(const std::string &file)$/;"	f	class:BGIQD::stLFR::ContigRoads
LoadSeeds	main/ChopBin.cpp	/^    void LoadSeeds()$/;"	f	struct:AppConfig
LogFreq	main/ContigDlink.cpp	/^    void LogFreq()$/;"	f	struct:AppConfig
M	biocommon/sam_bam/sam_parser.h	/^    M = 0 ,$/;"	e	enum:BGIQD::SAM::CIGAR
MTEdge	algorithm/graph/MinTree_test.cpp	/^struct MTEdge : public MTestEdge$/;"	s	file:
MTHelper	algorithm/graph/MinTree_test.cpp	/^typedef BGIQD::GRAPH::MinTreeHelper<MTestGraphBasic, int ,EAttr> MTHelper;$/;"	t	file:
MTHelper	stLFR/contigSimGraph.h	/^            typedef BGIQD::GRAPH::MinTreeHelper<ContigSimGraph, float , EdgeAttr> MTHelper;$/;"	t	struct:BGIQD::stLFR::ContigSimGraph
MTSearchNode	algorithm/graph/MinTree.h	/^                struct MTSearchNode$/;"	s	struct:BGIQD::GRAPH::MinTreeHelper
MTestEdge	algorithm/graph/MinTree_test.cpp	/^typedef BGIQD::GRAPH::IGraphEdgeBasic<std::string , int > MTestEdge;$/;"	t	file:
MTestGraphBasic	algorithm/graph/MinTree_test.cpp	/^struct MTestGraphBasic : public BGIQD::GRAPH::ListGraph<MTestNode , MTEdge>$/;"	s	file:
MTestNode	algorithm/graph/MinTree_test.cpp	/^typedef BGIQD::GRAPH::IGraphNodeBasic<std::string , int > MTestNode ;$/;"	t	file:
MakeRelativePathsInFlagsAbsolute	.ycm_extra_conf.py	/^def MakeRelativePathsInFlagsAbsolute( flags, working_directory ):$/;"	f
MapHelper	common/stl/mapHelper.h	/^            struct MapHelper$/;"	s	namespace:BGIQD::STL
MapReduce	common/multithread/MapReduce.h	/^class MapReduce$/;"	c	namespace:BGIQD::MultiThread
Maper	common/multithread/MapReduce.h	/^class Maper$/;"	c	namespace:BGIQD::MultiThread
Mark	soap2/contigGraph.h	/^            void Mark() { flag |= 0x8 ; }$/;"	f	struct:BGIQD::SOAP2::KeyEdge
MarkBase	dev_tools/ContigRoadFill2Fasta.cpp	/^        void MarkBase() { flag |= 0x4 ; }$/;"	f	struct:GlobalContig::ContigFastA
MarkBase	soap2/contigFasta.h	/^            void MarkBase()         {           flag |= 0x4 ; }$/;"	f	struct:BGIQD::SOAP2::ContigFastA
MarkMerge	dev_tools/ContigRoadFill2Fasta.cpp	/^        void MarkMerge() { flag  |= 0x1 ; }$/;"	f	struct:GlobalContig::ContigFastA
MarkMerge	soap2/contigFasta.h	/^            void MarkMerge()        {           flag |= 0x1 ; }$/;"	f	struct:BGIQD::SOAP2::ContigFastA
MarkParlindorme	soap2/contigFasta.h	/^            void MarkParlindorme()  {           flag |= 0x8; }$/;"	f	struct:BGIQD::SOAP2::ContigFastA
MarkSetK	dev_tools/ContigRoadFill2Fasta.cpp	/^        void MarkSetK() { flag |= 0x2 ; }$/;"	f	struct:GlobalContig::ContigFastA
MarkSetK	soap2/contigFasta.h	/^            void MarkSetK()         {           flag |= 0x2 ; }$/;"	f	struct:BGIQD::SOAP2::ContigFastA
MatchData	biocommon/sam_bam/sam_parser.h	/^    MatchData() : read_name("") , ref_name("")$/;"	f	struct:BGIQD::SAM::MatchData
MatchData	biocommon/sam_bam/sam_parser.h	/^struct MatchData$/;"	s	namespace:BGIQD::SAM
MatchDetail	biocommon/sam_bam/sam_parser.h	/^struct MatchDetail$/;"	s	namespace:BGIQD::SAM
MatchInfo	biocommon/sam_bam/sam_parser.h	/^struct MatchInfo$/;"	s	namespace:BGIQD::SAM
MaxDepth	soap2/contigGraphSearch.h	/^                MaxDepth = 3 ,$/;"	e	enum:BGIQD::SOAP2::Node_EA::EndType
MaxLength	soap2/contigGraphSearch.h	/^                MaxLength = 2 ,$/;"	e	enum:BGIQD::SOAP2::Node_EA::EndType
MergeCircle	stLFR/barcodeOnContig.cpp	/^        void P2PGraph::Path::MergeCircle()$/;"	f	class:BGIQD::stLFR::P2PGraph::Path
MergeClusterResult_cpp	dev_tools/Makefile	/^MergeClusterResult_cpp	= MergeClusterResult.cpp$/;"	m
MergeClusterResult_o	dev_tools/Makefile	/^MergeClusterResult_o 	= ${MergeClusterResult_cpp:%.cpp=%.o} ${source_cpp:%.cpp=%.o} $/;"	m
MergeContig	dev_tools/ContigRoadFill2Fasta.cpp	/^    ContigFastA MergeContig(const std::vector<std::string> & line)$/;"	f	struct:GlobalContig
MergeContig	soap2/contigFasta.cpp	/^        ContigFastA ContigFastAMap::MergeContig(const std::vector<std::string> & line)$/;"	f	class:BGIQD::SOAP2::ContigFastAMap
MergeContig	soap2/contigFasta.cpp	/^        ContigFastA ContigFastAMap::MergeContig(const std::vector<unsigned  int> & line)$/;"	f	class:BGIQD::SOAP2::ContigFastAMap
MergeContig_cpp	main/Makefile	/^MergeContig_cpp			= MergeContig.cpp$/;"	m
MergeContig_o	main/Makefile	/^MergeContig_o			= ${MergeContig_cpp:%.cpp=%.o} ${source_cpp:%.cpp=%.o}$/;"	m
Min	algorithm/fibheap/fib_heap.h	/^                Node & Min() const $/;"	f	struct:BGIQD::FIBHEAP::FibHeap
MinTree	algorithm/graph/MinTree.h	/^                TheGraph MinTree(const TheGraph & base , const TheAttr & attr )$/;"	f	struct:BGIQD::GRAPH::MinTreeHelper
MinTree	stLFR/contigSimGraph.h	/^            ContigSimGraph  MinTree() const $/;"	f	struct:BGIQD::stLFR::ContigSimGraph
MinTreeHelper	algorithm/graph/MinTree.h	/^            struct MinTreeHelper$/;"	s	namespace:BGIQD::GRAPH
MinTree_cpp	main/Makefile	/^MinTree_cpp 			= MinTree.cpp$/;"	m
MinTree_o	main/Makefile	/^MinTree_o				= ${MinTree_cpp:%.cpp=%.o} ${source_cpp:%.cpp=%.o}$/;"	m
MultiLine	stLFR/Line.h	/^class MultiLine : public ILine$/;"	c	namespace:BGIQD::stLFR
MultiThread	common/multithread/Job.h	/^    namespace MultiThread{$/;"	n	namespace:BGIQD
MultiThread	common/multithread/JobQueue.h	/^namespace MultiThread{$/;"	n	namespace:BGIQD
MultiThread	common/multithread/MapReduce.h	/^namespace MultiThread{$/;"	n	namespace:BGIQD
MultiThread	common/multithread/MultiThread.h	/^        MultiThread() {}$/;"	f	struct:BGIQD::MultiThread::MultiThread
MultiThread	common/multithread/MultiThread.h	/^namespace MultiThread{$/;"	n	namespace:BGIQD
MultiThread	common/multithread/MultiThread.h	/^struct MultiThread$/;"	s	namespace:BGIQD::MultiThread
N	algorithm/fibheap/fib_heap.h	/^                    static const int N = 100 ;$/;"	m	struct:BGIQD::FIBHEAP::FibHeap
N	biocommon/sam_bam/sam_parser.h	/^    N = 3 ,$/;"	e	enum:BGIQD::SAM::CIGAR
NONE	biocommon/sam_bam/sam_parser.h	/^    NONE = -1,$/;"	e	enum:BGIQD::SAM::CIGAR
NewId	main/MergeContig.cpp	/^    unsigned int NewId(unsigned int old)$/;"	f	struct:AppConfig	file:
Next	algorithm/fibheap/fib_heap.h	/^                Node & Next()$/;"	f	struct:BGIQD::FIBHEAP::Node
Node	algorithm/disjoin_set/disjoin_set.h	/^                struct Node$/;"	s	class:BGIQD::Algorithm::DisJoin_Set
Node	algorithm/fibheap/fib_heap.h	/^                typedef TNode Node;$/;"	t	struct:BGIQD::FIBHEAP::FibHeap
Node	algorithm/fibheap/fib_heap.h	/^            struct Node : public BGIQD::BILIST::BiList<Node<TKey,TValue> >$/;"	s	namespace:BGIQD::FIBHEAP
Node	algorithm/graph/DepthSearch.h	/^                typedef DepthNode                           Node;$/;"	t	struct:BGIQD::GRAPH::DepthSearch
Node	algorithm/graph/DepthSearch.h	/^                typedef NodeBase                      Node;$/;"	t	struct:BGIQD::GRAPH::DepthSearchNode
Node	algorithm/graph/Graph.h	/^                typedef Node1                        Node;$/;"	t	struct:BGIQD::GRAPH::GraphAccessBase
Node	algorithm/graph/Graph.h	/^                typedef typename GraphAccess::Node        Node;$/;"	t	struct:BGIQD::GRAPH::PathEndHelperBase
Node	algorithm/graph/GraphBasic.h	/^                typedef TNode Node ;$/;"	t	struct:BGIQD::GRAPH::ListDigraph
Node	algorithm/graph/GraphBasic.h	/^                typedef TNode Node ;$/;"	t	struct:BGIQD::GRAPH::ListGraph
Node	algorithm/graph/GraphBasic.h	/^                typedef TNode Node ;$/;"	t	struct:BGIQD::GRAPH::ListGraphBasic
Node	algorithm/graph/GraphTest.cpp	/^    struct Node$/;"	s	struct:TestGraph1	file:
Node	algorithm/graph/GraphTrunk.h	/^                    typedef typename TListGraph::Node Node;$/;"	t	struct:BGIQD::GRAPH::TrunkHelper
Node	algorithm/graph/MinTree.h	/^                typedef typename TListGraph::Node Node;$/;"	t	struct:BGIQD::GRAPH::MinTreeHelper
Node	algorithm/graph/SPFSearch_test.cpp	/^    struct Node$/;"	s	struct:TestGraph	file:
Node	stLFR/contigSimGraph.h	/^        struct Node : public BGIQD::GRAPH::IGraphNodeBasic<unsigned int , long> $/;"	s	namespace:BGIQD::stLFR
NodeAttr	algorithm/graph/MinTree.h	/^            struct NodeAttr$/;"	s	namespace:BGIQD::GRAPH
NodeBase	algorithm/graph/DepthSearch.h	/^                typedef typename GraphAccess::Node          NodeBase;$/;"	t	struct:BGIQD::GRAPH::DepthSearch
NodeBase	algorithm/graph/SPFSearch.h	/^                typedef typename GraphAccess::Node          NodeBase;$/;"	t	struct:BGIQD::GRAPH::SPFSearch
NodeEdgeId	algorithm/graph/Graph.h	/^                typedef EdgeId NodeEdgeId;$/;"	t	struct:BGIQD::GRAPH::GraphNodeBase
NodeEdgeId	algorithm/graph/GraphBasic.h	/^                typedef EdgeId NodeEdgeId;$/;"	t	struct:BGIQD::GRAPH::IGraphNodeBasic
NodeId	algorithm/graph/DepthSearch.h	/^                typedef typename GraphAccess::GraphNodeId   NodeId;$/;"	t	struct:BGIQD::GRAPH::DepthSearch
NodeId	algorithm/graph/DepthSearch.h	/^                typedef typename NodeBase::NodeNodeId NodeId;$/;"	t	struct:BGIQD::GRAPH::DepthSearchNode
NodeId	algorithm/graph/Graph.h	/^                typedef typename GraphAccess::GraphNodeId NodeId;$/;"	t	struct:BGIQD::GRAPH::PathEndHelperBase
NodeId	algorithm/graph/GraphBasic.h	/^                typedef typename Node::NodeNodeId NodeId ;$/;"	t	struct:BGIQD::GRAPH::ListDigraph
NodeId	algorithm/graph/GraphBasic.h	/^                typedef typename Node::NodeNodeId NodeId ;$/;"	t	struct:BGIQD::GRAPH::ListGraph
NodeId	algorithm/graph/GraphBasic.h	/^                typedef typename Node::NodeNodeId NodeId ;$/;"	t	struct:BGIQD::GRAPH::ListGraphBasic
NodeId	algorithm/graph/GraphTrunk.h	/^                    typedef typename Edge::EdgeNodeId NodeId;$/;"	t	struct:BGIQD::GRAPH::TrunkHelper
NodeId	algorithm/graph/GraphTrunk.h	/^                typedef typename TEdge::EdgeNodeId NodeId;$/;"	t	struct:BGIQD::GRAPH::TrunkNode
NodeId	algorithm/graph/MinTree.h	/^                typedef typename Edge::EdgeNodeId NodeId;$/;"	t	struct:BGIQD::GRAPH::MinTreeHelper
NodeId	algorithm/graph/SPFSearch.h	/^                typedef typename BaseNode::NodeNodeId NodeId;$/;"	t	struct:BGIQD::GRAPH::SPFNode
NodeId	algorithm/graph/SPFSearch.h	/^                typedef typename GraphAccess::GraphNodeId   NodeId;$/;"	t	struct:BGIQD::GRAPH::SPFSearch
NodeId	stLFR/contigSimGraph.h	/^            typedef Basic::NodeId NodeId;$/;"	t	struct:BGIQD::stLFR::ContigSimGraph
NodeNodeId	algorithm/graph/Graph.h	/^                typedef NodeId NodeNodeId;$/;"	t	struct:BGIQD::GRAPH::GraphNodeBase
NodeNodeId	algorithm/graph/GraphBasic.h	/^                typedef NodeId NodeNodeId;$/;"	t	struct:BGIQD::GRAPH::IGraphNodeBasic
NodeType	soap2/contigGraphSearch.h	/^        enum NodeType$/;"	g	namespace:BGIQD::SOAP2
NodeTypeDetector	soap2/contigGraphDepth.h	/^                typedef std::function<NodeType(NodeId)> NodeTypeDetector;$/;"	t	struct:BGIQD::SOAP2::DepthSearchEAEnder
NodeTypeDetector	soap2/contigGraphSPF.h	/^            typedef std::function<NodeType(NodeId)> NodeTypeDetector;$/;"	t	struct:BGIQD::SOAP2::SFPEnder
Node_EA	soap2/contigGraphSearch.h	/^        struct Node_EA : public BGIQD::GRAPH::GraphNodeBase<unsigned int , long>$/;"	s	namespace:BGIQD::SOAP2
Nodes	algorithm/graph/GraphBasic.h	/^                typedef TNodes Nodes ;$/;"	t	struct:BGIQD::GRAPH::ListDigraph
Nodes	algorithm/graph/GraphBasic.h	/^                typedef TNodes Nodes ;$/;"	t	struct:BGIQD::GRAPH::ListGraph
Nodes	algorithm/graph/GraphBasic.h	/^                typedef TNodes Nodes ;$/;"	t	struct:BGIQD::GRAPH::ListGraphBasic
NodesSize	algorithm/graph/GraphBasic.h	/^                size_t NodesSize() const $/;"	f	struct:BGIQD::GRAPH::ListGraphBasic
None	stLFR/LineGroup.h	/^                None = 0 ,$/;"	e	enum:BGIQD::stLFR::ContigRoad::FillStatus
Normal	soap2/contigGraphSearch.h	/^            Normal = 1 ,$/;"	e	enum:BGIQD::SOAP2::NodeType
ORIGINAL	main/MergeContig.cpp	/^        ORIGINAL = 1 ,$/;"	e	enum:AppConfig::ContigStatus	file:
OneLineComment	biocommon/sam_bam/sam_parser.h	/^        OneLineComment = 4$/;"	e	enum:BGIQD::SAM::Head::HeadType
OppoNode	algorithm/graph/GraphBasic.h	/^                NodeId OppoNode(const NodeId & one) const $/;"	f	struct:BGIQD::GRAPH::IGraphEdgeBasic
OtherUnMap	biocommon/sam_bam/sam_parser.cpp	/^bool MatchData::OtherUnMap() const $/;"	f	class:BGIQD::SAM::MatchData
P	biocommon/sam_bam/sam_parser.h	/^    P = 6 ,$/;"	e	enum:BGIQD::SAM::CIGAR
P2PGraph	stLFR/barcodeOnContig.h	/^        struct  P2PGraph$/;"	s	namespace:BGIQD::stLFR
PairedSAMParser	biocommon/pair/pair_sam_parser.h	/^        PairedSAMParser( std::istream & ist ) : m_ist(ist) {}$/;"	f	class:BGIQD::SAM::PairedSAMParser
PairedSAMParser	biocommon/pair/pair_sam_parser.h	/^class PairedSAMParser$/;"	c	namespace:BGIQD::SAM
ParseAsHead	biocommon/sam_bam/sam_parser.cpp	/^Head LineParser::ParseAsHead()const$/;"	f	class:BGIQD::SAM::LineParser
ParseAsMatchData	biocommon/sam_bam/sam_parser.cpp	/^MatchData LineParser::ParseAsMatchData() const $/;"	f	class:BGIQD::SAM::LineParser
ParseLine	common/files/file_reader.h	/^        typedef std::function<void(const std::string & line)> ParseLine;$/;"	t	class:BGIQD::FILES::FileReaderFactory
ParseSam2ReadOnContig	main/Sam2ReadOnContig.cpp	/^    void ParseSam2ReadOnContig()$/;"	f	struct:AppConfig
ParseStringAsCIGAR	biocommon/sam_bam/sam_parser.cpp	/^size_t LineParser::ParseStringAsCIGAR( const std::string &str ,size_t first_match_on_ref, MatchDetail & detail) const $/;"	f	class:BGIQD::SAM::LineParser
PartSucc	stLFR/LineGroup.h	/^                PartSucc = 2 ,$/;"	e	enum:BGIQD::stLFR::ContigRoad::FillStatus
Path	stLFR/barcodeOnContig.h	/^            struct Path$/;"	s	struct:BGIQD::stLFR::P2PGraph
PathEndHelperBase	algorithm/graph/Graph.h	/^            struct PathEndHelperBase$/;"	s	namespace:BGIQD::GRAPH
PopEdge	algorithm/graph/Graph.h	/^                void PopEdge() {assert(0);}$/;"	f	struct:BGIQD::GRAPH::PathEndHelperBase
PopEdge	algorithm/graph/GraphTest.cpp	/^    void PopEdge() {$/;"	f	struct:Ender2
PopEdge	algorithm/graph/GraphTest.cpp	/^    void PopEdge() {clean();}$/;"	f	struct:Ender1
PopEdge	algorithm/graph/SPFSearch_test.cpp	/^    void PopEdge() {clean();}$/;"	f	struct:Ender1
PopEdge	soap2/contigGraphDepth.h	/^                void PopEdge() {$/;"	f	struct:BGIQD::SOAP2::DepthSearchEAEnder
PopEdge	soap2/contigGraphSPF.h	/^            void PopEdge() { ender_flag  = false ; }$/;"	f	struct:BGIQD::SOAP2::SFPEnder
PopNode	algorithm/graph/Graph.h	/^                void PopNode() {assert(0);}$/;"	f	struct:BGIQD::GRAPH::PathEndHelperBase
PopNode	algorithm/graph/GraphTest.cpp	/^    void PopNode() {$/;"	f	struct:Ender2
PopNode	algorithm/graph/GraphTest.cpp	/^    void PopNode() {clean();}$/;"	f	struct:Ender1
PopNode	algorithm/graph/SPFSearch_test.cpp	/^    void PopNode() {clean();}$/;"	f	struct:Ender1
PopNode	soap2/contigGraphDepth.h	/^                void PopNode() {$/;"	f	struct:BGIQD::SOAP2::DepthSearchEAEnder
PopNode	soap2/contigGraphSPF.h	/^            void PopNode() { ender_flag  = false ; }$/;"	f	struct:BGIQD::SOAP2::SFPEnder
Print	stLFR/barcodeId.cpp	/^    void BarcodeId::Print( std::ostream & out ) const $/;"	f	class:BGIQD::stLFR::BarcodeId
Print	stLFR/barcodeId.cpp	/^    void BarcodeIdHelper::Print(const std::string & file)$/;"	f	class:BGIQD::stLFR::BarcodeIdHelper
PrintAsDOT	algorithm/graph/GraphBasic.h	/^                void PrintAsDOT(std::ostream & out)$/;"	f	struct:BGIQD::GRAPH::ListGraphBasic
PrintBarcodeList	main/Sam2ReadOnContig.cpp	/^    void PrintBarcodeList()$/;"	f	struct:AppConfig
PrintBarcodeOnBinArray	stLFR/CBB.cpp	/^        void PrintBarcodeOnBinArray( const std::string & file , const BarcodeOnBinArray & data)$/;"	f	namespace:BGIQD::stLFR
PrintBarcodeOnContig	main/ChopBin.cpp	/^    void PrintBarcodeOnContig()$/;"	f	struct:AppConfig
PrintBinInfo	main/ChopBin.cpp	/^    void PrintBinInfo()$/;"	f	struct:AppConfig
PrintBinRelation	main/BinCluster.cpp	/^    void PrintBinRelation()$/;"	f	struct:AppConfig
PrintBinRelationArray	stLFR/CBB.cpp	/^        void PrintBinRelationArray(const std::string & file ,const BinRelationArray & data)$/;"	f	namespace:BGIQD::stLFR
PrintContigDlinkGraph	main/ContigDlink.cpp	/^    void PrintContigDlinkGraph()$/;"	f	struct:AppConfig
PrintContigRelation	main/BinCluster.cpp	/^    void PrintContigRelation()$/;"	f	struct:AppConfig
PrintContigRelationArray	stLFR/CBB.cpp	/^        void PrintContigRelationArray(const std::string & file ,const ContigRelationArray & data)$/;"	f	namespace:BGIQD::stLFR
PrintNodes	algorithm/graph/DepthSearch.h	/^                void PrintNodes() const$/;"	f	struct:BGIQD::GRAPH::DepthSearch
PrintNodes	algorithm/graph/SPFSearch.h	/^                void PrintNodes()$/;"	f	struct:BGIQD::GRAPH::SPFSearch
PrintRead2	tools/stLFR_2_10X.cpp	/^    void PrintRead2(std::ostream & out ,const std::string & indice )$/;"	f	struct:AppConf
PrintSuperAndLeft	main/MergeContig.cpp	/^    void PrintSuperAndLeft()$/;"	f	struct:AppConfig
PrintSuperOnly	main/MergeContig.cpp	/^    void PrintSuperOnly()$/;"	f	struct:AppConfig
PrintSuperUsedOnly	main/MergeContig.cpp	/^    void PrintSuperUsedOnly()$/;"	f	struct:AppConfig
PrintUniqueInfo	main/StaticsticUnique.cpp	/^    void PrintUniqueInfo()$/;"	f	struct:AppConfig
Process	unused/fastqa/fasta.h	/^    enum Process$/;"	g	struct:BGIQD::FASTQA::SeqItemFactory
Program	biocommon/sam_bam/sam_parser.h	/^        Program = 3,$/;"	e	enum:BGIQD::SAM::Head::HeadType
RC_Key_Neibs	soap2/contigGraphSearch.h	/^            RC_Key_Neibs = 5 ,$/;"	e	enum:BGIQD::SOAP2::NodeType
RC_Key_Unknow	soap2/contigGraphSearch.h	/^            RC_Key_Unknow = 3,$/;"	e	enum:BGIQD::SOAP2::NodeType
RELEASE_CXX	dev_tools/Makefile	/^RELEASE_CXX=	${CXXFLAGS}$/;"	m
RELEASE_CXX	main/Makefile	/^RELEASE_CXX=	${CXXFLAGS}$/;"	m
RELEASE_CXX	test/Makefile	/^RELEASE_CXX=	${CXXFLAGS}$/;"	m
RELEASE_CXX	tools/Makefile	/^RELEASE_CXX=	${CXXFLAGS}$/;"	m
ReGenerate	main/MergeContig.cpp	/^    void ReGenerate()$/;"	f	struct:AppConfig
ReGenerate_Arc	main/MergeContig.cpp	/^    void ReGenerate_Arc()$/;"	f	struct:AppConfig	file:
ReGenerate_contig	main/MergeContig.cpp	/^    void ReGenerate_contig( )$/;"	f	struct:AppConfig	file:
ReGenerate_updatedEdge	main/MergeContig.cpp	/^    void ReGenerate_updatedEdge()$/;"	f	struct:AppConfig	file:
ReSetParent	algorithm/graph/DepthSearch.h	/^                void ReSetParent(const Node & me,const DepthSearchNode & parenet,int step_start )$/;"	f	struct:BGIQD::GRAPH::DepthSearchNode
ReSetParent	soap2/contigGraphDepth.h	/^            void ReSetParent(const Node & me,const DNode_EA & parenet,int step_start )$/;"	f	struct:BGIQD::SOAP2::DNode_EA
ReadGroup	biocommon/sam_bam/sam_parser.h	/^        ReadGroup = 2 ,$/;"	e	enum:BGIQD::SAM::Head::HeadType
ReduceElement	algorithm/collection/collection.h	/^                void ReduceElement(const Element & e, int num = 1)$/;"	f	struct:BGIQD::Collection::Collection
Reducer	common/multithread/MapReduce.h	/^class Reducer$/;"	c	namespace:BGIQD::MultiThread
Relationship	soap2/contigGraph.cpp	/^        std::tuple<bool,bool,bool> KeyEdge::Relationship(unsigned int id) const $/;"	f	class:BGIQD::SOAP2::KeyEdge
Relationship_nojump	soap2/contigGraph.cpp	/^        std::tuple<bool,bool,bool> KeyEdge::Relationship_nojump(unsigned int id,bool to_order) const $/;"	f	class:BGIQD::SOAP2::KeyEdge
RemoveChild	algorithm/fibheap/fib_heap.h	/^                void RemoveChild( Node & child)$/;"	f	struct:BGIQD::FIBHEAP::Node
RemovePalindromeLink	stLFR/barcodeOnContig.cpp	/^        void P2PGraph::RemovePalindromeLink()$/;"	f	class:BGIQD::stLFR::P2PGraph
Repeat	soap2/contigType.h	/^                    Repeat = 4$/;"	e	enum:BGIQD::SOAP2::ContigTypeDetecter::Type
ResetId	main/MergeContig.cpp	/^    void ResetId()$/;"	f	struct:AppConfig
ResetParent	algorithm/graph/SPFSearch.h	/^                void ResetParent(const BaseNode & ,const SPFNode & father , int )$/;"	f	struct:BGIQD::GRAPH::SPFNode
ResizeBuff	common/files/file_reader.cpp	/^    void FileReaderFactory::ResizeBuff( std::istream & ist, size_t size )$/;"	f	class:BGIQD::FILES::FileReaderFactory
ResizeBuff	common/files/file_writer.cpp	/^    void FileWriterFactory::ResizeBuff( std::ostream & ist, size_t size )$/;"	f	class:BGIQD::FILES::FileWriterFactory
ReverseCompelete	dev_tools/ContigRoadFill2Fasta.cpp	/^        ContigFastA ReverseCompelete() const $/;"	f	struct:GlobalContig::ContigFastA
ReverseCompelete	soap2/contigFasta.cpp	/^        ContigFastA ContigFastA::ReverseCompelete() const $/;"	f	class:BGIQD::SOAP2::ContigFastA
RunAllJob	main/BinCluster.cpp	/^    void RunAllJob( int thread)$/;"	f	struct:AppConfig
RunAllTest	common/test/Test.h	/^    static void RunAllTest()$/;"	f	struct:Test
RunTest	common/test/Test.h	/^    static void RunTest(std::string module_name)$/;"	f	struct:Test
RunVec	common/test/Test.h	/^        static void RunVec(std::string name ,const TestVec & v)$/;"	f	struct:Test
S	biocommon/sam_bam/sam_parser.h	/^    S = 4 ,$/;"	e	enum:BGIQD::SAM::CIGAR
SAM	biocommon/pair/pair_sam_parser.cpp	/^namespace SAM{$/;"	n	namespace:BGIQD	file:
SAM	biocommon/pair/pair_sam_parser.h	/^namespace SAM{$/;"	n	namespace:BGIQD
SAM	biocommon/sam_bam/sam_parser.cpp	/^namespace SAM{$/;"	n	namespace:BGIQD	file:
SAM	biocommon/sam_bam/sam_parser.h	/^namespace SAM{$/;"	n	namespace:BGIQD
SEQ	biocommon/seq/tool_func.h	/^    namespace SEQ{$/;"	n	namespace:BGIQD
SFPEnder	soap2/contigGraphSPF.h	/^        struct SFPEnder:$/;"	s	namespace:BGIQD::SOAP2
SNode	algorithm/graph/Graph.h	/^                typedef SearchNode                        SNode;$/;"	t	struct:BGIQD::GRAPH::PathEndHelperBase
SNode	main/FillContigRoad.cpp	/^typedef Searcher::SPFNode SNode;$/;"	t	file:
SOAP2	soap2/contigFasta.cpp	/^    namespace SOAP2 {$/;"	n	namespace:BGIQD	file:
SOAP2	soap2/contigFasta.h	/^    namespace SOAP2 {$/;"	n	namespace:BGIQD
SOAP2	soap2/contigGraph.cpp	/^    namespace SOAP2{$/;"	n	namespace:BGIQD	file:
SOAP2	soap2/contigGraph.h	/^    namespace SOAP2 {$/;"	n	namespace:BGIQD
SOAP2	soap2/contigGraphDepth.h	/^    namespace SOAP2{$/;"	n	namespace:BGIQD
SOAP2	soap2/contigGraphSPF.h	/^    namespace SOAP2{$/;"	n	namespace:BGIQD
SOAP2	soap2/contigGraphSearch.h	/^    namespace SOAP2{$/;"	n	namespace:BGIQD
SOAP2	soap2/contigType.cpp	/^    namespace SOAP2 {$/;"	n	namespace:BGIQD	file:
SOAP2	soap2/contigType.h	/^    namespace SOAP2 {$/;"	n	namespace:BGIQD
SOAP2	soap2/fileName.h	/^    namespace SOAP2 {$/;"	n	namespace:BGIQD
SOAP2	soap2/graphEA.h	/^    namespace SOAP2 {$/;"	n	namespace:BGIQD
SOAP2	soap2/kmer.h	/^    namespace SOAP2 {$/;"	n	namespace:BGIQD
SOAP2	soap2/soap2.h	/^    namespace SOAP2{$/;"	n	namespace:BGIQD
SOURCE_EXTENSIONS	.ycm_extra_conf.py	/^SOURCE_EXTENSIONS = [ '.cpp', '.cxx', '.cc', '.c', '.m', '.mm' ]$/;"	v
SPFNode	algorithm/graph/SPFSearch.h	/^                typedef SPFNode1                            SPFNode;$/;"	t	struct:BGIQD::GRAPH::SPFSearch
SPFNode	algorithm/graph/SPFSearch.h	/^            struct SPFNode$/;"	s	namespace:BGIQD::GRAPH
SPFSearch	algorithm/graph/SPFSearch.h	/^            struct SPFSearch $/;"	s	namespace:BGIQD::GRAPH
START_PARSE_ARGS	common/args/argsparser.h	322;"	d
STL	common/stl/mapHelper.h	/^    namespace STL{$/;"	n	namespace:BGIQD
STL	unused/stl/stack.h	/^namespace STL {$/;"	n	namespace:BGIQD
STRING	common/string/stringtools.cpp	/^namespace STRING{$/;"	n	namespace:BGIQD	file:
STRING	common/string/stringtools.h	/^namespace STRING{$/;"	n	namespace:BGIQD
SUPER	main/MergeContig.cpp	/^        SUPER = 2 ,$/;"	e	enum:AppConfig::ContigStatus	file:
Sam2ReadOnContig_cpp	main/Makefile	/^Sam2ReadOnContig_cpp 	= Sam2ReadOnContig.cpp$/;"	m
Sam2ReadOnContig_o	main/Makefile	/^Sam2ReadOnContig_o 	 	= ${Sam2ReadOnContig_cpp:%.cpp=%.o} ${source_cpp:%.cpp=%.o}$/;"	m
ScoreAllPath	stLFR/barcodeOnContig.cpp	/^        void P2PGraph::ScoreAllPath()$/;"	f	class:BGIQD::stLFR::P2PGraph
SearchAllPath	main/FillContigRoad.cpp	/^void SearchAllPath(unsigned int from  , unsigned int to , SearchResult & ret){$/;"	f
SearchResult	main/FillContigRoad.cpp	/^struct SearchResult$/;"	s	file:
Searcher	main/FillContigRoad.cpp	/^    > Searcher;$/;"	t	file:
Searcher1	algorithm/graph/GraphTest.cpp	/^typedef BGIQD::GRAPH::DepthSearch<ACCESS,EdgeItr,Ender1> Searcher1;$/;"	t	file:
Searcher1	algorithm/graph/SPFSearch_test.cpp	/^typedef BGIQD::GRAPH::SPFSearch<ACCESS,EdgeItr,Ender1> Searcher1;$/;"	t	file:
Searcher2	algorithm/graph/GraphTest.cpp	/^typedef BGIQD::GRAPH::DepthSearch<ACCESS,EdgeItr,Ender2> Searcher2;$/;"	t	file:
SelectBySort	stLFR/Line.h	/^        void SelectBySort( LineFactor & factor )$/;"	f	class:BGIQD::stLFR::MultiLine
SeqDatabase	unused/fastqa/fasta.h	/^struct SeqDatabase$/;"	s	namespace:BGIQD::FASTQA
SeqItem	unused/fastqa/fasta.h	/^struct SeqItem$/;"	s	namespace:BGIQD::FASTQA
SeqItemFactory	unused/fastqa/fasta.h	/^struct SeqItemFactory$/;"	s	namespace:BGIQD::FASTQA
Sequence	biocommon/sam_bam/sam_parser.h	/^        Sequence = 1 ,$/;"	e	enum:BGIQD::SAM::Head::HeadType
SequenceData	biocommon/sam_bam/sam_parser.h	/^    struct SequenceData$/;"	s	struct:BGIQD::SAM::Head
Set	common/multithread/JobQueue.h	/^            void Set( const Job & j)$/;"	f	struct:BGIQD::MultiThread::JobQueue
SetBase	soap2/contigGraph.h	/^            void SetBase()          { flag |= 0x200 ; }$/;"	f	struct:BGIQD::SOAP2::Edge
SetBiNotSuppert	soap2/contigGraph.h	/^            void SetBiNotSuppert() { flag |= 0x4 ; }$/;"	f	struct:BGIQD::SOAP2::KeyConn
SetCircle	stLFR/barcodeOnContig.h	/^                void SetCircle( const std::vector<Edge> & path , unsigned int root , float ecov)$/;"	f	struct:BGIQD::stLFR::P2PGraph::Circle
SetDelete	soap2/contigGraph.h	/^            void SetDelete()        { flag |= 0x1 ; }$/;"	f	struct:BGIQD::SOAP2::Edge
SetJump	soap2/contigGraph.h	/^            void SetJump() { flag |= 0x1 ; }$/;"	f	struct:BGIQD::SOAP2::KeyConn
SetKey	soap2/contigGraph.h	/^            void SetKey()           { flag |= 0x40 ; }$/;"	f	struct:BGIQD::SOAP2::Edge
SetLinear	soap2/contigGraph.h	/^            void SetLinear()        { flag |= 0x8 ; }$/;"	f	struct:BGIQD::SOAP2::Edge
SetMarked	soap2/contigGraph.h	/^            void SetMarked()        { flag |= 0x400 ; }$/;"	f	struct:BGIQD::SOAP2::Edge
SetPalindrome	soap2/contigGraph.h	/^            void SetPalindrome()    { flag |= 0x100 ; }$/;"	f	struct:BGIQD::SOAP2::Edge
SetPostive	soap2/contigGraph.h	/^            void SetPostive() { flag |= 0x2 ;}$/;"	f	struct:BGIQD::SOAP2::KeyConn
SetType	soap2/contigGraph.cpp	/^        void KeyEdge::SetType() $/;"	f	class:BGIQD::SOAP2::KeyEdge
SetUnique	soap2/contigGraph.h	/^            void SetUnique()        { flag |= 0x4 ; }$/;"	f	struct:BGIQD::SOAP2::Edge
SetUsedInSuper	soap2/contigGraph.h	/^            void SetUsedInSuper()   { flag |= 0x800 ; }$/;"	f	struct:BGIQD::SOAP2::Edge
ShortestPath	main/FillContigRoad.cpp	/^        ShortestPath = 1,$/;"	e	enum:GlobalConfig::FillStrategy	file:
ShortestPath	stLFR/barcodeOnContig.cpp	/^        int P2PGraph::ShortestPath()$/;"	f	class:BGIQD::stLFR::P2PGraph
Shuffler	common/multithread/MapReduce.h	/^class Shuffler$/;"	c	namespace:BGIQD::MultiThread
ShufflerResult	common/multithread/MapReduce.h	/^        typedef std::map<V2 ,std::vector<K2> > ShufflerResult;$/;"	t	class:BGIQD::MultiThread::Shuffler
Single	algorithm/bi_list/bi_list.h	/^                bool Single() const $/;"	f	struct:BGIQD::BILIST::BiList
Single	stLFR/contigSimGraph.h	/^                Single = 2 ,$/;"	e	enum:BGIQD::stLFR::Node::Type
Singleton	stLFR/barcodeId.h	/^        static BarcodeId & Singleton() { return the_one ; }$/;"	f	class:BGIQD::stLFR::BarcodeId
SolveMulti_cpp	dev_tools/Makefile	/^SolveMulti_cpp			= SolveMulti.cpp$/;"	m
SolveMulti_o	dev_tools/Makefile	/^SolveMulti_o			= ${SolveMulti_cpp:%.cpp=%.o} ${source_cpp:%.cpp=%.o}$/;"	m
SplitGraph	main/MinTree.cpp	/^    void SplitGraph()$/;"	f	struct:AppConf
Start	algorithm/graph/Graph.h	/^                void Start() {assert(0);}$/;"	f	struct:BGIQD::GRAPH::PathEndHelperBase
Start	algorithm/graph/GraphTest.cpp	/^    void Start() $/;"	f	struct:Ender1
Start	algorithm/graph/GraphTest.cpp	/^    void Start() $/;"	f	struct:Ender2
Start	algorithm/graph/SPFSearch_test.cpp	/^    void Start() $/;"	f	struct:Ender1
Start	common/multithread/MultiThread.h	/^        void Start(int thread_num)$/;"	f	struct:BGIQD::MultiThread::MultiThread
Start	soap2/contigGraphDepth.h	/^                void Start() $/;"	f	struct:BGIQD::SOAP2::DepthSearchEAEnder
Start	soap2/contigGraphSPF.h	/^            void Start()$/;"	f	struct:BGIQD::SOAP2::SFPEnder
StaticsticUnique_cpp	main/Makefile	/^StaticsticUnique_cpp =	StaticsticUnique.cpp$/;"	m
StaticsticUnique_o	main/Makefile	/^StaticsticUnique_o   =	${StaticsticUnique_cpp:%.cpp=%.o} ${source_cpp:%.cpp=%.o}$/;"	m
SuperContigAndLeft	main/MergeContig.cpp	/^        SuperContigAndLeft = 3 ,$/;"	e	enum:AppConfig::WorkType	file:
SuperContigAndReLinear	main/MergeContig.cpp	/^        SuperContigAndReLinear = 4 ,$/;"	e	enum:AppConfig::WorkType	file:
SuperContigOnly	main/MergeContig.cpp	/^        SuperContigOnly = 2 ,$/;"	e	enum:AppConfig::WorkType	file:
SuperContigUsed	main/MergeContig.cpp	/^        SuperContigUsed = 1 ,$/;"	e	enum:AppConfig::WorkType	file:
TEST	algorithm/bi_list/bi_list_test.cpp	/^TEST(BiListDel)$/;"	f
TEST	algorithm/bi_list/bi_list_test.cpp	/^TEST(BiListInsert)$/;"	f
TEST	algorithm/collection/collection_test.cpp	/^TEST(CollectIterator)$/;"	f
TEST	algorithm/collection/collection_test.cpp	/^TEST(CollectSize)$/;"	f
TEST	algorithm/collection/collection_test.cpp	/^TEST(Intersection)$/;"	f
TEST	algorithm/collection/collection_test.cpp	/^TEST(Jaccard)$/;"	f
TEST	algorithm/collection/collection_test.cpp	/^TEST(Union)$/;"	f
TEST	algorithm/fibheap/fib_heap_test.cpp	/^TEST(FibCommon)$/;"	f
TEST	algorithm/fibheap/fib_heap_test.cpp	/^TEST(FibDecrese)$/;"	f
TEST	algorithm/fibheap/fib_heap_test.cpp	/^TEST(FibUnoin)$/;"	f
TEST	algorithm/graph/GraphBasic_test.cpp	/^TEST(ListDigraph)$/;"	f
TEST	algorithm/graph/GraphBasic_test.cpp	/^TEST(ListGraph)$/;"	f
TEST	algorithm/graph/GraphTest.cpp	/^TEST(EdgeItr_test)$/;"	f
TEST	algorithm/graph/GraphTest.cpp	/^TEST(GraphAccessEdge)$/;"	f
TEST	algorithm/graph/GraphTest.cpp	/^TEST(GraphAccessNode)$/;"	f
TEST	algorithm/graph/GraphTest.cpp	/^TEST(GraphDepthSearch_test)$/;"	f
TEST	algorithm/graph/GraphTest.cpp	/^TEST(GraphDepthSearch_test_1)$/;"	f
TEST	algorithm/graph/GraphTrunk_test.cpp	/^TEST(MinTree_test1)$/;"	f
TEST	algorithm/graph/GraphTrunk_test.cpp	/^TEST(MinTree_test2)$/;"	f
TEST	algorithm/graph/MinTree_test.cpp	/^TEST(MinTree)$/;"	f
TEST	algorithm/graph/SPFSearch_test.cpp	/^TEST( SPFSearch )$/;"	f
TEST	algorithm/incr_array/incr_array_test.cpp	/^TEST(IncrArrayAcess)$/;"	f
TEST	biocommon/sam_bam/sam_parser_test.cpp	/^TEST(FLAGS_test)$/;"	f
TEST	biocommon/sam_bam/sam_parser_test.cpp	/^TEST(LineParser_test)$/;"	f
TEST	common/args/argsparser_test.cpp	/^TEST(simulator_args)$/;"	f
TEST	common/files/file_test.cpp	/^TEST(ReaderUnExisitFile)$/;"	f
TEST	common/string/stringtools_test.cpp	/^TEST(stringsplit)$/;"	f
TEST	common/string/stringtools_test.cpp	/^TEST(stringtrim)$/;"	f
TEST	common/test/Test.h	79;"	d
TEST	common/time/timetools_test.cpp	/^TEST( multi_thread_run)$/;"	f
TEST	common/time/timetools_test.cpp	/^TEST(timepoint_test)$/;"	f
TEST_MODULE_INIT	common/test/Test.h	65;"	d
TIME	common/time/timetools.cpp	/^namespace TIME{$/;"	n	namespace:BGIQD	file:
TIME	common/time/timetools.h	/^namespace TIME{$/;"	n	namespace:BGIQD
TKEdge	algorithm/graph/GraphTrunk_test.cpp	/^struct TKEdge : public TKTestEdge$/;"	s	file:
TKHelper	algorithm/graph/GraphTrunk_test.cpp	/^typedef BGIQD::GRAPH::TrunkHelper<TKTestGraphBasic> TKHelper;$/;"	t	file:
TKHelper	stLFR/contigSimGraph.h	/^            typedef BGIQD::GRAPH::TrunkHelper< ContigSimGraph> TKHelper;$/;"	t	struct:BGIQD::stLFR::ContigSimGraph
TKTestEdge	algorithm/graph/GraphTrunk_test.cpp	/^typedef BGIQD::GRAPH::IGraphEdgeBasic<std::string , int > TKTestEdge;$/;"	t	file:
TKTestGraphBasic	algorithm/graph/GraphTrunk_test.cpp	/^struct TKTestGraphBasic : public BGIQD::GRAPH::ListGraph<TKTestNode , TKEdge>$/;"	s	file:
TKTestNode	algorithm/graph/GraphTrunk_test.cpp	/^typedef BGIQD::GRAPH::IGraphNodeBasic<std::string , int > TKTestNode ;$/;"	t	file:
TRun	common/test/Test.h	/^    static void TRun(const std::string &name ,TestVec * v)$/;"	f	struct:Test
Test	common/test/Test.h	/^struct Test$/;"	s
Test	dev_tools/bin_sim_len.cpp	/^void Test()$/;"	f
Test	dev_tools/bin_simularity.cpp	/^void Test()$/;"	f
TestBiList	algorithm/bi_list/bi_list_test.cpp	/^typedef BGIQD::BILIST::BiList<int> TestBiList;$/;"	t	file:
TestData	algorithm/graph/GraphBasic_test.cpp	/^    static TestDigraphBasic TestData() {$/;"	f	struct:TestDigraphBasic
TestData	algorithm/graph/GraphBasic_test.cpp	/^    static TestGraphBasic TestData() {$/;"	f	struct:TestGraphBasic
TestData	algorithm/graph/MinTree_test.cpp	/^    static MTestGraphBasic TestData() {$/;"	f	struct:MTestGraphBasic
TestData1	algorithm/graph/GraphTrunk_test.cpp	/^    static TKTestGraphBasic TestData1() {$/;"	f	struct:TKTestGraphBasic
TestData2	algorithm/graph/GraphTrunk_test.cpp	/^    static TKTestGraphBasic TestData2() {$/;"	f	struct:TKTestGraphBasic
TestDiEdge	algorithm/graph/GraphBasic_test.cpp	/^typedef BGIQD::GRAPH::IDigraphEdgeBase<std::string , int > TestDiEdge;$/;"	t	file:
TestDigraphBasic	algorithm/graph/GraphBasic_test.cpp	/^struct TestDigraphBasic : public BGIQD::GRAPH::ListDigraph<TestNode , TestDiEdge>$/;"	s	file:
TestEdge	algorithm/graph/GraphBasic_test.cpp	/^typedef BGIQD::GRAPH::IGraphEdgeBasic<std::string , int > TestEdge;$/;"	t	file:
TestGraph	algorithm/graph/SPFSearch_test.cpp	/^struct TestGraph$/;"	s	file:
TestGraph1	algorithm/graph/GraphTest.cpp	/^struct TestGraph1$/;"	s	file:
TestGraphBasic	algorithm/graph/GraphBasic_test.cpp	/^struct TestGraphBasic : public BGIQD::GRAPH::ListGraph<TestNode , TestEdge>$/;"	s	file:
TestMap	common/test/Test.h	/^    typedef std::map<std::string , TestVec *> TestMap;$/;"	t	struct:Test
TestNode	algorithm/graph/GraphBasic_test.cpp	/^typedef BGIQD::GRAPH::IGraphNodeBasic<std::string , int > TestNode ;$/;"	t	file:
TestVec	common/test/Test.h	/^    typedef std::vector<testFunc> TestVec;$/;"	t	struct:Test
TheAttr	algorithm/graph/MinTree.h	/^                typedef TNodeAttr   TheAttr;$/;"	t	struct:BGIQD::GRAPH::MinTreeHelper
TheGraph	algorithm/graph/MinTree.h	/^                typedef TListGraph  TheGraph;$/;"	t	struct:BGIQD::GRAPH::MinTreeHelper
Thread	common/multithread/MultiThread.h	/^struct Thread $/;"	s	namespace:BGIQD::MultiThread
Tip	stLFR/contigSimGraph.h	/^                Tip = 1 ,$/;"	e	enum:BGIQD::stLFR::Node::Type
To	unused/graph/Graph.h	/^                VertexIndex To( EdgeIndex e)$/;"	f	class:BGIQD::Graph::DiGraph_VE
ToString	algorithm/graph/DepthSearch.h	/^                std::string ToString() const {$/;"	f	struct:BGIQD::GRAPH::DepthSearchNode
ToString	algorithm/graph/GraphBasic.h	/^                std::string ToString() const$/;"	f	struct:BGIQD::GRAPH::IDigraphEdgeBase
ToString	algorithm/graph/GraphBasic.h	/^                std::string ToString() const$/;"	f	struct:BGIQD::GRAPH::IGraphEdgeBasic
ToString	algorithm/graph/GraphTrunk_test.cpp	/^    std::string ToString() const$/;"	f	struct:TKEdge
ToString	algorithm/graph/MinTree_test.cpp	/^    std::string ToString() const$/;"	f	struct:MTEdge
ToString	algorithm/graph/SPFSearch.h	/^                std::string ToString() const {$/;"	f	struct:BGIQD::GRAPH::SPFNode
ToString	common/freq/freq.h	/^                std::string ToString()$/;"	f	class:BGIQD::FREQ::Freq
ToString	dev_tools/ContigRoadFill2Fasta.cpp	/^        std::string ToString() const $/;"	f	struct:GlobalContig::ContigFastA
ToString	soap2/contigFasta.cpp	/^        std::string ContigFastA::ToString() const $/;"	f	class:BGIQD::SOAP2::ContigFastA
ToString	soap2/contigFasta.cpp	/^        std::string ContigFastA::ToString(int new_id ,const std::string & marker ) const$/;"	f	class:BGIQD::SOAP2::ContigFastA
ToString	stLFR/CBB.cpp	/^        std::string BarcodeOnBin::ToString() const $/;"	f	class:BGIQD::stLFR::BarcodeOnBin
ToString	stLFR/CBB.cpp	/^        std::string BinRelation::ToString() const$/;"	f	class:BGIQD::stLFR::BinRelation
ToString	stLFR/CBB.cpp	/^        std::string ContigRelation::ToString() const $/;"	f	class:BGIQD::stLFR::ContigRelation
ToString	stLFR/contigSimGraph.h	/^            std::string ToString() const$/;"	f	struct:BGIQD::stLFR::Edge
Tos	soap2/contigGraphDepth.h	/^                    Tos() : base(false) , bal( false) {}$/;"	f	struct:BGIQD::SOAP2::DepthSearchEAEnder::Tos
Tos	soap2/contigGraphDepth.h	/^                struct Tos$/;"	s	struct:BGIQD::SOAP2::DepthSearchEAEnder
Tos	soap2/contigGraphSearch.h	/^            Tos() : base(false) , bal( false) {}$/;"	f	struct:BGIQD::SOAP2::Tos
Tos	soap2/contigGraphSearch.h	/^        struct Tos$/;"	s	namespace:BGIQD::SOAP2
Touch	common/freq/freq.h	/^                void Touch( const Key k)$/;"	f	class:BGIQD::FREQ::Freq
TouchParent	algorithm/graph/SPFSearch.h	/^                void TouchParent( const BaseNode & ,const SPFNode & father , int )$/;"	f	struct:BGIQD::GRAPH::SPFNode
Trunk	algorithm/graph/GraphTrunk.h	/^                    static ListGraph  Trunk(const ListGraph &  base )$/;"	f	struct:BGIQD::GRAPH::TrunkHelper
TrunkFromMinTree	stLFR/contigSimGraph.h	/^            ContigSimGraph TrunkFromMinTree(const ContigSimGraph & mintree)$/;"	f	struct:BGIQD::stLFR::ContigSimGraph
TrunkHelper	algorithm/graph/GraphTrunk.h	/^                struct TrunkHelper$/;"	s	namespace:BGIQD::GRAPH
TrunkLinear	stLFR/contigSimGraph.h	/^            std::vector<Basic::NodeId> TrunkLinear(const ContigSimGraph & mintree)$/;"	f	struct:BGIQD::stLFR::ContigSimGraph
TrunkNode	algorithm/graph/GraphTrunk.h	/^                    typedef TNode TrunkNode ;$/;"	t	struct:BGIQD::GRAPH::TrunkHelper
TrunkNode	algorithm/graph/GraphTrunk.h	/^            struct TrunkNode$/;"	s	namespace:BGIQD::GRAPH
TryLoadBarcode2Num	main/Sam2ReadOnContig.cpp	/^    void TryLoadBarcode2Num()$/;"	f	struct:AppConfig
Type	algorithm/graph/DepthSearch.h	/^                typedef DepthSearchEdgeType           Type;$/;"	t	struct:BGIQD::GRAPH::DepthSearchNode
Type	algorithm/graph/SPFSearch.h	/^                enum Type$/;"	g	struct:BGIQD::GRAPH::SPFNode
Type	soap2/contigType.h	/^                enum Type$/;"	g	struct:BGIQD::SOAP2::ContigTypeDetecter
Type	stLFR/contigSimGraph.h	/^            enum Type $/;"	g	struct:BGIQD::stLFR::Node
Type	unused/fastqa/fasta.h	/^enum Type$/;"	g	namespace:BGIQD::FASTQA
UNKNOW	main/MergeContig.cpp	/^        UNKNOW = 0 ,$/;"	e	enum:AppConfig::ContigStatus	file:
UNKNOW	unused/fastqa/fasta.h	/^        UNKNOW = 0 ,$/;"	e	enum:BGIQD::FASTQA::SeqItemFactory::Process
UNKNOW	unused/fastqa/fasta.h	/^    UNKNOW = 0,$/;"	e	enum:BGIQD::FASTQA::Type
UnMap	biocommon/sam_bam/sam_parser.cpp	/^bool MatchData::UnMap() const $/;"	f	class:BGIQD::SAM::MatchData
UnSetJump	soap2/contigGraph.h	/^            void UnSetJump() { flag &= 0xfffffffe ; }$/;"	f	struct:BGIQD::SOAP2::KeyConn
UnicomGraph	stLFR/contigSimGraph.h	/^            static std::map<NodeId , ContigSimGraph>  UnicomGraph(const ContigSimGraph & mintree)$/;"	f	struct:BGIQD::stLFR::ContigSimGraph
UnicomGraph_cpp	dev_tools/Makefile	/^UnicomGraph_cpp =	UnicomGraph.cpp$/;"	m
UnicomGraph_o	dev_tools/Makefile	/^UnicomGraph_o   =	${UnicomGraph_cpp:%.cpp=%.o} ${source_cpp:%.cpp=%.o}$/;"	m
Union	algorithm/collection/collection.h	/^                static Collection Union(const Collection & c1 , const Collection & c2 )$/;"	f	struct:BGIQD::Collection::Collection
Union	algorithm/fibheap/fib_heap.h	/^                static FibHeap Union(const FibHeap & h1, const FibHeap &h2 )$/;"	f	struct:BGIQD::FIBHEAP::FibHeap
Union	stLFR/barcodeOnContig.cpp	/^        int GraphEA_withBarcode::Union(const std::map<int,int> & m1 $/;"	f	class:BGIQD::stLFR::GraphEA_withBarcode
Unique	soap2/contigType.h	/^                    Unique = 3,$/;"	e	enum:BGIQD::SOAP2::ContigTypeDetecter::Type
UniqueCovHigh	soap2/contigType.h	/^                float UniqueCovHigh;$/;"	m	struct:BGIQD::SOAP2::ContigTypeDetecter
UniqueHigh	main/StaticsticUnique.cpp	/^    float UniqueHigh  ;$/;"	m	struct:AppConfig	file:
UniqueLow	main/StaticsticUnique.cpp	/^    float UniqueLow ;$/;"	m	struct:AppConfig	file:
Unknow	algorithm/graph/SPFSearch.h	/^                    Unknow = 0 ,$/;"	e	enum:BGIQD::GRAPH::SPFNode::Type
Unknow	biocommon/sam_bam/sam_parser.h	/^        Unknow = -1,$/;"	e	enum:BGIQD::SAM::Head::HeadType
Unknow	main/FillContigRoad.cpp	/^        Unknow = 0 ,$/;"	e	enum:GlobalConfig::FillStrategy	file:
Unknow	main/MergeContig.cpp	/^        Unknow = 0 ,$/;"	e	enum:AppConfig::WorkType	file:
Unknow	soap2/contigGraphSearch.h	/^                Unknow = 0 ,$/;"	e	enum:BGIQD::SOAP2::Node_EA::EndType
Unknow	soap2/contigGraphSearch.h	/^            Unknow = 0 ,$/;"	e	enum:BGIQD::SOAP2::NodeType
Unknow	soap2/contigType.h	/^                    Unknow = 0,$/;"	e	enum:BGIQD::SOAP2::ContigTypeDetecter::Type
Unknow	stLFR/barcodeOnContig.h	/^                Unknow = 0 ,$/;"	e	enum:BGIQD::stLFR::P2PGraph::CircleStrategy
Unknow	stLFR/contigSimGraph.h	/^                Unknow = 0 ,$/;"	e	enum:BGIQD::stLFR::Node::Type
UpdateAsBiggest	common/stl/mapHelper.h	/^                static void UpdateAsBiggest(Map & map , const Key & k , const Value & value)$/;"	f	struct:BGIQD::STL::MapHelper
UpdateAsSmallest	common/stl/mapHelper.h	/^                static void UpdateAsSmallest(Map & map , const Key & k , const Value & value)$/;"	f	struct:BGIQD::STL::MapHelper
Valid	biocommon/sam_bam/sam_parser.h	/^    bool Valid() const { return ! detail.infos.empty() ; }$/;"	f	struct:BGIQD::SAM::MatchData
Value	algorithm/fibheap/fib_heap.h	/^                typedef TValue Value ;$/;"	t	struct:BGIQD::FIBHEAP::Node
Value	algorithm/fibheap/fib_heap.h	/^                typedef typename TNode::Value Value ;$/;"	t	struct:BGIQD::FIBHEAP::FibHeap
Value	algorithm/graph/MinTree.h	/^                typedef TValue      Value;$/;"	t	struct:BGIQD::GRAPH::MinTreeHelper
Value	common/stl/mapHelper.h	/^                typedef typename Map::mapped_type Value;$/;"	t	struct:BGIQD::STL::MapHelper
VersionData	biocommon/sam_bam/sam_parser.h	/^    struct VersionData$/;"	s	struct:BGIQD::SAM::Head
VertexIndex	unused/graph/Edge.h	/^                typedef V VertexIndex;$/;"	t	class:BGIQD::Graph::Edge
VertexIndex	unused/graph/Graph.h	/^                typedef I VertexIndex;$/;"	t	class:BGIQD::Graph::DiGraph_VE
VertexWithEdge	unused/graph/Vertex.h	/^        struct VertexWithEdge$/;"	s	namespace:BGIQD::Graph
WARN	common/error/Error.h	15;"	d
WARNING	common/log/logfilter.h	/^    WARNING =2 ,$/;"	e	enum:BGIQD::LOG::loglevel
WaitingStop	common/multithread/MultiThread.h	/^        void WaitingStop()$/;"	f	struct:BGIQD::MultiThread::MultiThread
White	algorithm/graph/DepthSearch.h	/^            White = 0 ,$/;"	e	enum:BGIQD::GRAPH::DepthSearchEdgeType
WorkType	main/MergeContig.cpp	/^    enum WorkType$/;"	g	struct:AppConfig	file:
X	biocommon/sam_bam/sam_parser.h	/^    X = 8 ,$/;"	e	enum:BGIQD::SAM::CIGAR
_CHECK	dev_tools/bin_sim_len.cpp	64;"	d	file:
_CHECK	dev_tools/bin_simularity.cpp	64;"	d	file:
__ALGORITHM_BILIST_BILIST_H__	algorithm/bi_list/bi_list.h	2;"	d
__ALGORITHM_COLLECTION_COLLECTION_H__	algorithm/collection/collection.h	2;"	d
__ALGORITHM_DISJOIN_SET_DISJOIN_SET_H__	algorithm/disjoin_set/disjoin_set.h	2;"	d
__ALGORITHM_FIBHEAP_H__	algorithm/fibheap/fib_heap.h	2;"	d
__ALGORITHM_GRAPHTRUNK_H__	algorithm/graph/GraphTrunk.h	2;"	d
__ALGORITHM_GRAPH_DEPTHSEARCH_H__	algorithm/graph/DepthSearch.h	2;"	d
__ALGORITHM_GRAPH_GRAPH_H__	algorithm/graph/Graph.h	2;"	d
__ALGORITHM_GRAPH_H__	algorithm/graph/GraphBasic.h	2;"	d
__ALGORITHM_GRAPH_MINTREE_H__	algorithm/graph/MinTree.h	2;"	d
__ALGORITHM_GRAPH_SPFSEARCH_H__	algorithm/graph/SPFSearch.h	2;"	d
__ALGORITHM_INCR_ARRAY_INCR_ARRAY_H__	algorithm/incr_array/incr_array.h	2;"	d
__BIOCOMMON_FASTQA_FASTA_H__	unused/fastqa/fasta.h	2;"	d
__BIOCOMMON_PAIR_PAIR_SAM_PARSER_H__	biocommon/pair/pair_sam_parser.h	2;"	d
__BIOCOMMON_SAM_BAM_SAM_PARSER_H__	biocommon/sam_bam/sam_parser.h	2;"	d
__BIOCOMMON_SEQ_TOOL_FUNC_H__	biocommon/seq/tool_func.h	2;"	d
__CHECK_ARGS	common/args/argsparser.h	298;"	d
__CHECK_HELP	common/args/argsparser.h	333;"	d
__COMMON_ARGS_ARGS_PARSER_H__	common/args/argsparser.h	2;"	d
__COMMON_ERROR_H__	common/error/Error.h	2;"	d
__COMMON_FILES_FILE_READER_H__	common/files/file_reader.h	2;"	d
__COMMON_FILES_FILE_WRITER_H__	common/files/file_writer.h	2;"	d
__COMMON_FLAGS_FLAGS_H__	common/flags/flags.h	2;"	d
__COMMON_FREQ_FREQ_H__	common/freq/freq.h	2;"	d
__COMMON_LOG_LOGFILTER_H__	common/log/logfilter.h	2;"	d
__COMMON_LOG_LOG_H__	common/log/log.h	2;"	d
__COMMON_MULTITHREAD_JOBQUEUE_H__	common/multithread/JobQueue.h	2;"	d
__COMMON_MULTITHREAD_JOB_H__	common/multithread/Job.h	2;"	d
__COMMON_MULTITHREAD_MAPREDUCE_H__	common/multithread/MapReduce.h	2;"	d
__COMMON_MULTITHREAD_MULTITHREAD_H__	common/multithread/MultiThread.h	2;"	d
__COMMON_STL_MAPHELPER_H__	common/stl/mapHelper.h	2;"	d
__COMMON_STL_STACK_H__	unused/stl/stack.h	2;"	d
__COMMON_STRING_STRINGTOOLS_H__	common/string/stringtools.h	2;"	d
__COMMON_TIME_TIMETOOL_H__	common/time/timetools.h	2;"	d
__CONSTRUCT_LONG_OPTIONS	common/args/argsparser.h	253;"	d
__CONTIG_BARCODE_H__	dev_tools/contig_barcode.h	2;"	d
__DEFINE_ARG_DETAIL	common/args/argsparser.h	317;"	d
__GRAPH_EDGE_H__	unused/graph/Edge.h	2;"	d
__GRAPH_GRAPH_H__	unused/graph/Graph.h	2;"	d
__GRAPH_VERTEX_H__	unused/graph/Vertex.h	2;"	d
__LFR_TEST_TEST_H__	common/test/Test.h	2;"	d
__LFR_UTILS_CHECK_H__	common/test/Check.h	2;"	d
__PARSE_ARGS	common/args/argsparser.h	278;"	d
__PRINT_ARGS	common/args/argsparser.h	289;"	d
__PRINT_USAGE	common/args/argsparser.h	237;"	d
__SOAP2_CONTIGFASTA_H__	soap2/contigFasta.h	2;"	d
__SOAP2_CONTIGGRAPHDEPTH_H__	soap2/contigGraphDepth.h	2;"	d
__SOAP2_CONTIGGRAPHSEARCH_H__	soap2/contigGraphSearch.h	2;"	d
__SOAP2_CONTIGGRAPHSPF_H__	soap2/contigGraphSPF.h	2;"	d
__SOAP2_CONTIGGRAPH_H__	soap2/contigGraph.h	2;"	d
__SOAP2_CONTIGTYPE_H__	soap2/contigType.h	2;"	d
__SOAP2_FILENAME_H__	soap2/fileName.h	2;"	d
__SOAP2_GRAPHEA_H__	soap2/graphEA.h	2;"	d
__SOAP2_KMER_H__	soap2/kmer.h	2;"	d
__SOAP2_SOAP2_H__	soap2/soap2.h	2;"	d
__STLFR_BARCODEID_H__	stLFR/barcodeId.h	2;"	d
__STLFR_BARCODEONCONTIG_H__	stLFR/barcodeOnContig.h	2;"	d
__STLFR_CBB_H__	stLFR/CBB.h	2;"	d
__STLFR_CONTIGCLUSTER_H__	stLFR/ContigCluster.h	2;"	d
__STLFR_CONTIGSIMGRAPH_H__	stLFR/contigSimGraph.h	2;"	d
__STLFR_LINEGROUP_H__	stLFR/LineGroup.h	2;"	d
__STLFR_LINE_H__	stLFR/Line.h	2;"	d
__STLFR_READNAME2BARCODE_H__	stLFR/readName2Barcode.h	2;"	d
accesser	algorithm/graph/DepthSearch.h	/^                GraphAccess                                 accesser;$/;"	m	struct:BGIQD::GRAPH::DepthSearch
accesser	algorithm/graph/SPFSearch.h	/^                GraphAccess accesser;$/;"	m	struct:BGIQD::GRAPH::SPFSearch
accessor	algorithm/graph/Graph.h	/^                GraphAccess * accessor ;$/;"	m	struct:BGIQD::GRAPH::EdgeIterator
add_edge	algorithm/graph/GraphTest.cpp	/^    void add_edge( int id , char from , char to , int next )$/;"	f	struct:TestGraph1	file:
add_edge	algorithm/graph/SPFSearch_test.cpp	/^    void add_edge( int id , char from , char to , int next )$/;"	f	struct:TestGraph	file:
add_node	algorithm/graph/GraphTest.cpp	/^    void add_node( char id , int edge_id )$/;"	f	struct:TestGraph1	file:
add_node	algorithm/graph/SPFSearch_test.cpp	/^    void add_node( char id , int edge_id , int l)$/;"	f	struct:TestGraph	file:
allPaths	stLFR/barcodeOnContig.h	/^            std::vector<Path> allPaths;$/;"	m	struct:BGIQD::stLFR::P2PGraph
arc	soap2/contigGraph.h	/^            Arc * arc;$/;"	m	struct:BGIQD::SOAP2::Edge
arc	soap2/graphEA.h	/^            Arc * arc;$/;"	m	struct:BGIQD::SOAP2::Edge
arcNum	soap2/contigGraph.h	/^            long long arcNum;$/;"	m	struct:BGIQD::SOAP2::GraphEA
arc_array	soap2/contigGraph.h	/^            Arc * arc_array;$/;"	m	struct:BGIQD::SOAP2::GraphEA
arc_array	soap2/graphEA.h	/^            ArcArray arc_array;$/;"	m	struct:BGIQD::SOAP2::GraphEA
arg_index	common/args/argsparser.h	/^        static int arg_index = 0 ;$/;"	m	namespace:BGIQD::ARGS
arg_max	common/args/argsparser.h	/^        const int arg_max = 10 ;$/;"	m	namespace:BGIQD::ARGS
args_to_string	common/args/argsparser.h	/^            std::string args_to_string() $/;"	f	struct:BGIQD::ARGS::args_union
args_traits	common/args/argsparser.h	/^            struct args_traits$/;"	s	namespace:BGIQD::ARGS
args_traits	common/args/argsparser.h	/^            struct args_traits< bool >$/;"	s	namespace:BGIQD::ARGS
args_traits	common/args/argsparser.h	/^            struct args_traits<float>$/;"	s	namespace:BGIQD::ARGS
args_traits	common/args/argsparser.h	/^            struct args_traits<int>$/;"	s	namespace:BGIQD::ARGS
args_traits	common/args/argsparser.h	/^            struct args_traits<long>$/;"	s	namespace:BGIQD::ARGS
args_traits	common/args/argsparser.h	/^            struct args_traits<std::string>$/;"	s	namespace:BGIQD::ARGS
args_traits	common/args/argsparser.h	/^            struct args_traits<std::vector<std::string> >$/;"	s	namespace:BGIQD::ARGS
args_union	common/args/argsparser.h	/^            args_union(type ty$/;"	f	struct:BGIQD::ARGS::args_union
args_union	common/args/argsparser.h	/^        struct args_union$/;"	s	namespace:BGIQD::ARGS
at	algorithm/incr_array/incr_array.h	/^                Element & at(size_t i ) $/;"	f	struct:BGIQD::INCRARRAY::IncrArray
at	algorithm/incr_array/incr_array.h	/^                const Element & at(size_t i ) const $/;"	f	struct:BGIQD::INCRARRAY::IncrArray
b	common/args/argsparser.h	/^                bool b;$/;"	m	union:BGIQD::ARGS::args_union::data
b2b_array	main/ChopBin.cpp	/^    BGIQD::stLFR::BarcodeOnBinArray b2b_array;$/;"	m	struct:AppConfig	file:
backword_from	algorithm/graph/DepthSearch.h	/^                std::set<NodeId>                    backword_from ;$/;"	m	struct:BGIQD::GRAPH::DepthSearchNode
bal	soap2/contigGraphDepth.h	/^                    bool bal ;$/;"	m	struct:BGIQD::SOAP2::DepthSearchEAEnder::Tos
bal	soap2/contigGraphSearch.h	/^            bool bal ;$/;"	m	struct:BGIQD::SOAP2::Tos
bal_id	soap2/contigGraph.h	/^            unsigned int bal_id ;$/;"	m	struct:BGIQD::SOAP2::Edge
bal_id	soap2/contigGraph.h	/^            unsigned int bal_id;$/;"	m	struct:BGIQD::SOAP2::KeyEdge
bal_id	soap2/graphEA.h	/^            unsigned int bal_id ;$/;"	m	struct:BGIQD::SOAP2::Edge
barcode2num	dev_tools/contig_barcode.cpp	/^    int BarcodeNum::barcode2num( const std::string & str )$/;"	f	class:BGIQD::JOB01::BarcodeNum
barcodeList	dev_tools/contig_barcode.h	/^typedef std::vector<int> barcodeList;$/;"	t	namespace:BGIQD::JOB01
barcodeMap	tools/stLFR_2_10X.cpp	/^    std::map<int , std::string > barcodeMap ;$/;"	m	struct:AppConf	file:
barcodeNum	dev_tools/contig_barcode.h	/^    typedef std::map<std::string , int> barcodeNum;$/;"	t	struct:BGIQD::JOB01::BarcodeNum
barcodeOnBin	main/BinCluster.cpp	/^    BGIQD::stLFR::BarcodeOnBinArray barcodeOnBin ;$/;"	m	struct:AppConfig	file:
barcodePosInfo	dev_tools/contig_barcode.h	/^typedef std::tuple< int , barcodeList> barcodePosInfo;$/;"	t	namespace:BGIQD::JOB01
barcodePosList	dev_tools/contig_barcode.h	/^typedef std::vector<barcodePosInfo> barcodePosList;$/;"	t	namespace:BGIQD::JOB01
barcodeSet	dev_tools/contig_barcode.h	/^typedef std::set<std::string> barcodeSet;$/;"	t	namespace:BGIQD::JOB01
barcode_2_num_file	main/Sam2ReadOnContig.cpp	/^    std::string barcode_2_num_file;$/;"	m	struct:AppConfig	file:
barcode_cov	stLFR/barcodeOnContig.h	/^                float barcode_cov ;$/;"	m	struct:BGIQD::stLFR::P2PGraph::Path
barcode_cov	stLFR/barcodeOnContig.h	/^                unsigned int barcode_cov;$/;"	m	struct:BGIQD::stLFR::P2PGraph::Edge
barcode_on_contig	stLFR/barcodeOnContig.h	/^            std::map<ContigId,BarcodeOnContig > barcode_on_contig;$/;"	m	struct:BGIQD::stLFR::GraphEA_withBarcode
barcodesOnPos	main/ChopBin.cpp	/^        std::map<unsigned int , std::vector<unsigned int > > barcodesOnPos;$/;"	m	struct:AppConfig::ConfigBarcodeInfo	file:
base	algorithm/graph/Graph.h	/^                BaseGraph * base ;$/;"	m	struct:BGIQD::GRAPH::GraphAccessBase
base	algorithm/incr_array/incr_array.h	/^            BasePointer base;$/;"	m	struct:BGIQD::INCRARRAY::iterator_base
base	soap2/contigGraphDepth.h	/^                    bool base ;$/;"	m	struct:BGIQD::SOAP2::DepthSearchEAEnder::Tos
base	soap2/contigGraphSearch.h	/^            bool base ;$/;"	m	struct:BGIQD::SOAP2::Tos
base_graph	stLFR/barcodeOnContig.h	/^            GraphEA_withBarcode * base_graph;$/;"	m	struct:BGIQD::stLFR::P2PGraph
base_line	stLFR/Line.h	/^typedef std::vector<unsigned int>  base_line;$/;"	t	namespace:BGIQD::stLFR
begin	algorithm/collection/collection.h	/^                iterator begin() const$/;"	f	struct:BGIQD::Collection::Collection
begin	algorithm/incr_array/incr_array.h	/^                const_iterator begin()  const $/;"	f	struct:BGIQD::INCRARRAY::IncrArray
begin	algorithm/incr_array/incr_array.h	/^                iterator begin() $/;"	f	struct:BGIQD::INCRARRAY::IncrArray
binBarcodeInfo	dev_tools/contig_barcode.h	/^typedef std::map<size_t, std::map<size_t, std::map< size_t, size_t> > > binBarcodeInfo;$/;"	t	namespace:BGIQD::JOB01
binId	stLFR/CBB.h	/^            int binId ;$/;"	m	struct:BGIQD::stLFR::BarcodeOnBin
binId	stLFR/CBB.h	/^            int binId ;$/;"	m	struct:BGIQD::stLFR::BinRelation
binId	stLFR/CBB.h	/^            int binId ;$/;"	m	struct:BGIQD::stLFR::BinSimularity
binIndex	stLFR/CBB.h	/^            int binIndex ;$/;"	m	struct:BGIQD::stLFR::BinRelation
binIndex	stLFR/CBB.h	/^            int binIndex ;$/;"	m	struct:BGIQD::stLFR::BinSimularity
binOnBarcode	main/BinCluster.cpp	/^    BinIndexOnBarcode binOnBarcode ;$/;"	m	struct:AppConfig	file:
bin_size	main/ChopBin.cpp	/^    int bin_size ;$/;"	m	struct:AppConfig	file:
bn	dev_tools/contig_barcode.cpp	/^    static BarcodeNum bn;$/;"	m	namespace:BGIQD::JOB01	file:
boc	main/ChopBin.cpp	/^    BarcodeOnContig boc;$/;"	m	struct:AppConfig	file:
buf	common/files/gzstream.h	/^    gzstreambuf buf;$/;"	m	class:GZSTREAM_NAMESPACE::gzstreambase
buffer	common/files/gzstream.h	/^    char             buffer[bufferSize]; \/\/ data buffer$/;"	m	class:GZSTREAM_NAMESPACE::gzstreambuf
buffer	common/log/log.h	/^        std::ostringstream buffer;$/;"	m	class:BGIQD::LOG::logger
bufferSize	common/files/gzstream.h	/^    static const int bufferSize = 47+256;    \/\/ size of data buff$/;"	m	class:GZSTREAM_NAMESPACE::gzstreambuf
buildCompeleReverse	dev_tools/ContigRoadFill2Fasta.cpp	/^    void buildCompeleReverse()$/;"	f	struct:GlobalContig
buildCompeleReverse	soap2/contigFasta.cpp	/^        void ContigFastAMap::buildCompeleReverse()$/;"	f	class:BGIQD::SOAP2::ContigFastAMap
capacity	algorithm/incr_array/incr_array.h	/^                size_t capacity() const { return m_capacity; }$/;"	f	struct:BGIQD::INCRARRAY::IncrArray
circle	stLFR/barcodeOnContig.h	/^                Circle circle ;$/;"	m	struct:BGIQD::stLFR::P2PGraph::Path
circle_run	main/FillContigRoad.cpp	/^    BGIQD::FREQ::Freq<int> circle_run;$/;"	m	struct:GlobalConfig	file:
circle_run	stLFR/barcodeOnContig.h	/^                int  circle_run ;$/;"	m	struct:BGIQD::stLFR::P2PGraph::Circle
circle_runs	stLFR/LineGroup.h	/^            std::vector<int> circle_runs;$/;"	m	struct:BGIQD::stLFR::ContigRoad
clean	algorithm/graph/GraphTest.cpp	/^    void clean()$/;"	f	struct:Ender1	file:
clean	algorithm/graph/GraphTest.cpp	/^    void clean()$/;"	f	struct:Ender2	file:
clean	algorithm/graph/SPFSearch_test.cpp	/^    void clean()$/;"	f	struct:Ender1	file:
clear	algorithm/incr_array/incr_array.h	/^                void clear() { m_curr = 0 ; }$/;"	f	struct:BGIQD::INCRARRAY::IncrArray
close	common/files/gzstream.cpp	/^gzstreambuf * gzstreambuf::close() {$/;"	f	class:GZSTREAM_NAMESPACE::gzstreambuf
close	common/files/gzstream.cpp	/^void gzstreambase::close() {$/;"	f	class:GZSTREAM_NAMESPACE::gzstreambase
clusterNum	main/ContigDlink.cpp	/^    unsigned int clusterNum;$/;"	m	struct:AppConfig	file:
clusterNum	stLFR/ContigCluster.h	/^            int clusterNum;$/;"	m	struct:BGIQD::stLFR::ContigCluster
clusters	main/FillContigRoad.cpp	/^    BGIQD::stLFR::ContigCluster clusters;$/;"	m	struct:GlobalConfig	file:
cluter_show	dev_tools/ClusterGap.cpp	/^typedef std::vector< std::tuple< int , int , float , int > > cluter_show;$/;"	t	file:
cluter_show	dev_tools/LinearClusterResult.cpp	/^typedef std::vector< std::tuple< int , int , float , int > > cluter_show;$/;"	t	file:
cluters	dev_tools/ClusterGap.cpp	/^typedef std::map< int , std::map< int , float > >  cluters;$/;"	t	file:
cluters	dev_tools/LinearClusterResult.cpp	/^typedef std::map< int , std::map< int , float > >  cluters;$/;"	t	file:
cluters	dev_tools/MergeClusterResult.cpp	/^typedef std::map< int , std::map< int , float > >  cluters;$/;"	t	file:
cluters	stLFR/ContigCluster.h	/^            typedef std::map< int , std::map< int , float > >  cluters;$/;"	t	struct:BGIQD::stLFR::ContigCluster
collections	stLFR/CBB.h	/^            BarcodeCollection collections ;$/;"	m	struct:BGIQD::stLFR::BarcodeOnBin
combiner	common/multithread/MapReduce.h	/^        typedef std::function< std::pair<K2, std::vector<V2>> (const K2 & ,const std::vector<V2>) > combiner;$/;"	t	class:BGIQD::MultiThread::Combiner
compilation_database_folder	.ycm_extra_conf.py	/^compilation_database_folder = ''$/;"	v
config	dev_tools/ContigRoadFill2Fasta.cpp	/^} config;$/;"	v	typeref:struct:GlobalContig
config	main/BinCluster.cpp	/^} config;$/;"	v	typeref:struct:AppConfig
config	main/ChopBin.cpp	/^}config;$/;"	v	typeref:struct:AppConfig
config	main/ContigDlink.cpp	/^} config;$/;"	v	typeref:struct:AppConfig
config	main/FillContigRoad.cpp	/^} config;$/;"	v	typeref:struct:GlobalConfig
config	main/LinearCDG.cpp	/^}config;$/;"	v	typeref:struct:AppConfig
config	main/MergeContig.cpp	/^} config;$/;"	v	typeref:struct:AppConfig
config	main/MinTree.cpp	/^}config;$/;"	v	typeref:struct:AppConf
config	main/Sam2ReadOnContig.cpp	/^}config;$/;"	v	typeref:struct:AppConfig
config	main/StaticsticUnique.cpp	/^} config;$/;"	v	typeref:struct:AppConfig
config	tools/stLFR_2_10X.cpp	/^} config;$/;"	v	typeref:struct:AppConf
connectionNum	main/ContigDlink.cpp	/^    long long connectionNum;$/;"	m	struct:AppConfig	file:
connections	main/ContigDlink.cpp	/^    std::map<unsigned int , std::map<unsigned int,float > > connections;$/;"	m	struct:AppConfig	file:
connections	stLFR/ContigCluster.h	/^            cluters connections;$/;"	m	struct:BGIQD::stLFR::ContigCluster
connections	unused/graph/Graph.h	/^                std::map<std::pair<I,I> ,E> connections; $/;"	m	class:BGIQD::Graph::DiGraph_VE
const_iterator	algorithm/incr_array/incr_array.h	/^                typedef struct const_iterator<IncrArray> const_iterator;$/;"	t	struct:BGIQD::INCRARRAY::IncrArray	typeref:struct:BGIQD::INCRARRAY::IncrArray::const_iterator
const_iterator	algorithm/incr_array/incr_array.h	/^            const_iterator( const const_iterator& o ) : F(o) {}$/;"	f	struct:BGIQD::INCRARRAY::const_iterator
const_iterator	algorithm/incr_array/incr_array.h	/^            const_iterator(const T & b , size_t i ) : F(b,i) {}$/;"	f	struct:BGIQD::INCRARRAY::const_iterator
const_iterator	algorithm/incr_array/incr_array.h	/^        struct const_iterator: public iterator_base<const_traits<T> >{$/;"	s	namespace:BGIQD::INCRARRAY
const_traits	algorithm/incr_array/incr_array.h	/^            struct const_traits$/;"	s	namespace:BGIQD::INCRARRAY
contig	dev_tools/LinkCheck.cpp	/^    unsigned int  contig;$/;"	m	struct:A	file:
contig	dev_tools/LinkCheck_1.cpp	/^    unsigned int  contig;$/;"	m	struct:A	file:
contig	soap2/contigGraph.h	/^            std::vector<unsigned int> contig;$/;"	m	struct:BGIQD::SOAP2::ContigRoad
contigBarcodeInfo	dev_tools/contig_barcode.h	/^typedef std::map<int,barcodePosList> contigBarcodeInfo;$/;"	t	namespace:BGIQD::JOB01
contigId	stLFR/CBB.h	/^            BGIQD::SOAP2::ContigId contigId ;$/;"	m	struct:BGIQD::stLFR::BarcodeOnBin
contigId	stLFR/CBB.h	/^            unsigned int contigId ;$/;"	m	struct:BGIQD::stLFR::BinRelation
contigId	stLFR/CBB.h	/^            unsigned int contigId ;$/;"	m	struct:BGIQD::stLFR::BinSimularity
contigId	stLFR/CBB.h	/^            unsigned int contigId ;$/;"	m	struct:BGIQD::stLFR::ContigRelation
contigId	stLFR/CBB.h	/^            unsigned int contigId ;$/;"	m	struct:BGIQD::stLFR::ContigSimularity
contigInfo	main/StaticsticUnique.cpp	/^    std::map<BGIQD::SOAP2::ContigId , ContigInfo> contigInfo;$/;"	m	struct:AppConfig	file:
contigLens	dev_tools/contig_barcode.h	/^typedef std::map<int , int > contigLens;$/;"	t	namespace:BGIQD::JOB01
contigList	dev_tools/contig_barcode.h	/^typedef std::vector<contigPosInfo> contigList;$/;"	t	namespace:BGIQD::JOB01
contigMatchData	dev_tools/ContigTypeByRef.cpp	/^typedef std::vector<SAM::MatchData> contigMatchData;$/;"	t	file:
contigPos	dev_tools/job12.cpp	/^typedef std::map< int , std::map< int , int> >  contigPos;$/;"	t	file:
contigPosInfo	dev_tools/contig_barcode.h	/^typedef std::tuple<int,int> contigPosInfo;$/;"	t	namespace:BGIQD::JOB01
contigRef	dev_tools/LinearClusterResult.cpp	/^typedef std::map<int , std::vector< std::tuple<int ,int,bool> > > contigRef;$/;"	t	file:
contigSims	main/BinCluster.cpp	/^    ContigSims contigSims;$/;"	m	struct:AppConfig	file:
contigTotalNum	soap2/contigGraph.h	/^            unsigned int contigTotalNum;$/;"	m	struct:BGIQD::SOAP2::GraphEA
contigTypes	dev_tools/ContigTypeByRef.cpp	/^typedef std::map<int , int > contigTypes;$/;"	t	file:
contig_fasta_map	main/MergeContig.cpp	/^    BGIQD::SOAP2::ContigFastAMap contig_fasta_map;$/;"	m	struct:AppConfig	file:
contig_file	dev_tools/ContigRoadFill2Fasta.cpp	/^    std::string contig_file;$/;"	m	struct:GlobalContig	file:
contig_mutex	main/ContigDlink.cpp	/^    std::mutex contig_mutex;$/;"	m	struct:AppConfig	file:
contig_path	stLFR/LineGroup.h	/^            std::vector<unsigned int > contig_path;$/;"	m	struct:BGIQD::stLFR::ContigRoad
contig_relations	main/BinCluster.cpp	/^    BGIQD::stLFR::ContigRelationArray contig_relations;$/;"	m	struct:AppConfig	file:
contigroadfill	dev_tools/ContigRoadFill2Fasta.cpp	/^    std::string contigroadfill;$/;"	m	struct:GlobalContig	file:
contigs	dev_tools/ContigRoadFill2Fasta.cpp	/^    std::map<unsigned int , ContigFastA> contigs;$/;"	m	struct:GlobalContig	file:
contigs	main/ContigDlink.cpp	/^    std::vector<BGIQD::SOAP2::ContigRoad> contigs ;\/\/std::vector<unsigned int> > contigs;$/;"	m	struct:AppConfig	file:
contigs	main/LinearCDG.cpp	/^    std::vector<BGIQD::SOAP2::ContigRoad> contigs ; $/;"	m	struct:AppConfig	file:
contigs	soap2/contigFasta.h	/^                std::map<unsigned int , ContigFastA> contigs;$/;"	m	class:BGIQD::SOAP2::ContigFastAMap
cov	dev_tools/ContigRoadFill2Fasta.cpp	/^        float           cov ;$/;"	m	struct:GlobalContig::ContigFastA	file:
cov	main/StaticsticUnique.cpp	/^        float cov ;$/;"	m	struct:AppConfig::ContigInfo	file:
cov	soap2/contigFasta.h	/^            float           cov ;$/;"	m	struct:BGIQD::SOAP2::ContigFastA
cov	soap2/contigGraph.h	/^            int cov;$/;"	m	struct:BGIQD::SOAP2::Arc
cov	soap2/contigGraph.h	/^            int cov;$/;"	m	struct:BGIQD::SOAP2::Edge
cov	soap2/graphEA.h	/^            int cov;$/;"	m	struct:BGIQD::SOAP2::Arc
cov	soap2/graphEA.h	/^            int cov;$/;"	m	struct:BGIQD::SOAP2::Edge
cov	stLFR/barcodeOnContig.h	/^                float cov;$/;"	m	struct:BGIQD::stLFR::P2PGraph::Edge
cov	stLFR/barcodeOnContig.h	/^                float cov;$/;"	m	struct:BGIQD::stLFR::P2PGraph::Path
cov_all	main/StaticsticUnique.cpp	/^    float cov_all ;$/;"	m	struct:AppConfig	file:
cov_all	soap2/contigType.h	/^                float cov_all;$/;"	m	struct:BGIQD::SOAP2::ContigTypeDetecter
cpSpeed_cpp	tools/Makefile	/^cpSpeed_cpp 	=	cpSpeed.cpp$/;"	m
cpSpeed_o	tools/Makefile	/^cpSpeed_o   =	${cpSpeed_cpp:%.cpp=%.o} ${source_cpp:%.cpp=%.o}$/;"	m
cpath	stLFR/barcodeOnContig.h	/^                std::vector<Edge> cpath;$/;"	m	struct:BGIQD::stLFR::P2PGraph::Circle
cpu	common/time/timetools.h	/^        clock_t cpu;$/;"	m	struct:BGIQD::TIME::timeperoid
cpu	common/time/timetools.h	/^        clock_t cpu;$/;"	m	struct:BGIQD::TIME::timepoint
cross_from	algorithm/graph/DepthSearch.h	/^                std::set<NodeId>                    cross_from ;$/;"	m	struct:BGIQD::GRAPH::DepthSearchNode
csets	stLFR/barcodeOnContig.h	/^                std::set<unsigned int>  csets;$/;"	m	struct:BGIQD::stLFR::P2PGraph::Circle
curr	algorithm/graph/Graph.h	/^                const Edge * curr ;$/;"	m	struct:BGIQD::GRAPH::EdgeIterator
curr	algorithm/incr_array/incr_array.h	/^            size_t curr ;$/;"	m	struct:BGIQD::INCRARRAY::iterator_base
curr	stLFR/barcodeId.h	/^        int curr ;$/;"	m	class:BGIQD::stLFR::BarcodeId
curr	unused/fastqa/fasta.h	/^    Process curr;$/;"	m	struct:BGIQD::FASTQA::SeqItemFactory
curr_depth	soap2/contigGraphDepth.h	/^                int curr_depth ;$/;"	m	struct:BGIQD::SOAP2::DepthSearchEAEnder
curr_length	soap2/contigGraphDepth.h	/^                int curr_length ;$/;"	m	struct:BGIQD::SOAP2::DepthSearchEAEnder
d	biocommon/sam_bam/sam_parser.h	/^    Data d ;$/;"	m	struct:BGIQD::SAM::Head
d	common/args/argsparser.h	/^            data d;$/;"	m	struct:BGIQD::ARGS::args_union
data	common/args/argsparser.h	/^            union data {$/;"	u	struct:BGIQD::ARGS::args_union
data	common/freq/freq.h	/^                std::map<Key, long> data;$/;"	m	class:BGIQD::FREQ::Freq
data	dev_tools/contig_barcode.h	/^    barcodeNum data;$/;"	m	struct:BGIQD::JOB01::BarcodeNum
database	.ycm_extra_conf.py	/^  database = None$/;"	v
database	.ycm_extra_conf.py	/^  database = ycm_core.CompilationDatabase( compilation_database_folder )$/;"	v
datas	unused/fastqa/fasta.h	/^    std::vector<SeqItem> datas;$/;"	m	struct:BGIQD::FASTQA::SeqDatabase
deal_circle	stLFR/barcodeOnContig.h	/^            CircleStrategy deal_circle;$/;"	m	struct:BGIQD::stLFR::P2PGraph
deep_clean	algorithm/incr_array/incr_array.h	/^                void deep_clean()$/;"	f	struct:BGIQD::INCRARRAY::IncrArray
default_value	common/args/argsparser.h	/^            std::string default_value ;$/;"	m	struct:BGIQD::ARGS::args_union
degree	algorithm/fibheap/fib_heap.h	/^                int    degree ;$/;"	m	struct:BGIQD::FIBHEAP::Node
depth	algorithm/disjoin_set/disjoin_set.h	/^                    unsigned depth;$/;"	m	struct:BGIQD::Algorithm::DisJoin_Set::Node
detail	biocommon/sam_bam/sam_parser.h	/^    MatchDetail detail;$/;"	m	struct:BGIQD::SAM::MatchData
detaillog	common/log/log.h	/^        detaillog( const std::string m, const std::string l)$/;"	f	class:BGIQD::LOG::detaillog
detaillog	common/log/log.h	/^class detaillog$/;"	c	namespace:BGIQD::LOG
detector	main/MergeContig.cpp	/^    BGIQD::SOAP2::ContigTypeDetecter detector;$/;"	m	struct:AppConfig	file:
dirty	dev_tools/Makefile	/^dirty	   =${jobs_o} ${jobs}$/;"	m
dirty	main/Makefile	/^dirty	   =${jobs_o} ${jobs}  $/;"	m
dirty	test/Makefile	/^dirty	   =	${test_o}  test$/;"	m
dirty	tools/Makefile	/^dirty	   =${jobs_o} ${jobs} $/;"	m
downstream	soap2/contigGraph.h	/^            bool downstream;$/;"	m	struct:BGIQD::SOAP2::ContigRoad
drawGraph	dev_tools/job12.cpp	/^void drawGraph( lines & l , contigPos & c , DisJoin_Set<int> & d)$/;"	f
ecov	stLFR/barcodeOnContig.h	/^            float ecov ;$/;"	m	struct:BGIQD::stLFR::P2PGraph
edge_array	main/ContigDlink.cpp	/^    BGIQD::SOAP2::Edge * edge_array;$/;"	m	class:AppConfig::BGIQD::SOAP2	file:
edge_array	soap2/contigGraph.h	/^            Edge * edge_array;$/;"	m	struct:BGIQD::SOAP2::GraphEA
edge_array	soap2/graphEA.h	/^            EdgeArray edge_array;$/;"	m	struct:BGIQD::SOAP2::GraphEA
edge_count	main/MergeContig.cpp	/^    int edge_count ;$/;"	m	struct:AppConfig	file:
edge_id	algorithm/graph/Graph.h	/^                EdgeId                          edge_id;$/;"	m	struct:BGIQD::GRAPH::GraphNodeBase
edge_id	algorithm/graph/GraphTest.cpp	/^        int edge_id ;$/;"	m	struct:TestGraph1::Node	file:
edge_id	algorithm/graph/SPFSearch_test.cpp	/^        int edge_id ;$/;"	m	struct:TestGraph::Node	file:
edge_id	soap2/contigGraph.h	/^            unsigned int edge_id ;$/;"	m	struct:BGIQD::SOAP2::KeyEdge
edge_ids	algorithm/graph/GraphBasic.h	/^                std::set<EdgeId>               edge_ids;$/;"	m	struct:BGIQD::GRAPH::IGraphNodeBasic
edges	algorithm/graph/Graph.h	/^                std::map<GraphEdgeId , Edge > edges ;$/;"	m	struct:BGIQD::GRAPH::GraphAccessBase
edges	algorithm/graph/GraphBasic.h	/^                Edges edges ;$/;"	m	struct:BGIQD::GRAPH::ListGraphBasic
edges	algorithm/graph/GraphTest.cpp	/^    std::map< int , Edge> edges ;$/;"	m	struct:TestGraph1	file:
edges	algorithm/graph/GraphTrunk.h	/^                std::set<EdgeId> edges;$/;"	m	struct:BGIQD::GRAPH::TrunkNode
edges	algorithm/graph/SPFSearch_test.cpp	/^    std::map< int , Edge> edges ;$/;"	m	struct:TestGraph	file:
edges	main/LinearCDG.cpp	/^    std::map<unsigned int , BGIQD::SOAP2::KeyEdge> edges;$/;"	m	struct:AppConfig	file:
edges	unused/graph/Graph.h	/^                std::vector<G_Edge> edges;$/;"	m	class:BGIQD::Graph::DiGraph_VE
edges_ends	algorithm/graph/Graph.h	/^                std::map<GraphNodeId , Edge > edges_ends;$/;"	m	struct:BGIQD::GRAPH::GraphAccessBase
elements	algorithm/collection/collection.h	/^                std::map<Element , int > elements;$/;"	m	struct:BGIQD::Collection::Collection
empty	algorithm/incr_array/incr_array.h	/^                bool empty() const { return m_curr == 0 ;}$/;"	f	struct:BGIQD::INCRARRAY::IncrArray
empty	stLFR/CBB.cpp	/^        bool BarcodeOnBin::empty() const $/;"	f	class:BGIQD::stLFR::BarcodeOnBin
empty	stLFR/CBB.h	/^            bool empty() const  { return sims.empty() ; }$/;"	f	struct:BGIQD::stLFR::ContigRelation
end	algorithm/collection/collection.h	/^                iterator end()  const $/;"	f	struct:BGIQD::Collection::Collection
end	algorithm/graph/Graph.h	/^                static EdgeIterator & end() $/;"	f	struct:BGIQD::GRAPH::EdgeIterator
end	algorithm/incr_array/incr_array.h	/^                const_iterator end() const$/;"	f	struct:BGIQD::INCRARRAY::IncrArray
end	algorithm/incr_array/incr_array.h	/^                iterator end() $/;"	f	struct:BGIQD::INCRARRAY::IncrArray
end	common/multithread/JobQueue.h	/^            bool end;$/;"	m	struct:BGIQD::MultiThread::JobQueue
end	dev_tools/LinkCheck.cpp	/^    int end;$/;"	m	struct:A	file:
end	dev_tools/LinkCheck_1.cpp	/^    int end;$/;"	m	struct:A	file:
end_flag	algorithm/graph/SPFSearch_test.cpp	/^    bool end_flag;$/;"	m	struct:Ender1	file:
end_position_on_read	biocommon/sam_bam/sam_parser.h	/^    int end_position_on_read;$/;"	m	struct:BGIQD::SAM::MatchInfo
end_position_on_ref	biocommon/sam_bam/sam_parser.h	/^    int end_position_on_ref;$/;"	m	struct:BGIQD::SAM::MatchInfo
ender	algorithm/graph/DepthSearch.h	/^                PathEnder                                   ender;$/;"	m	struct:BGIQD::GRAPH::DepthSearch
ender	algorithm/graph/SPFSearch.h	/^                PathEnder ender;$/;"	m	struct:BGIQD::GRAPH::SPFSearch
ender_flag	soap2/contigGraphDepth.h	/^                bool ender_flag ;$/;"	m	struct:BGIQD::SOAP2::DepthSearchEAEnder
ender_flag	soap2/contigGraphSPF.h	/^            bool ender_flag ;$/;"	m	struct:BGIQD::SOAP2::SFPEnder
eof	biocommon/pair/pair_sam_parser.h	/^        bool eof() const { return m_ist.eof() ; }$/;"	f	class:BGIQD::SAM::PairedSAMParser
explain	common/args/argsparser.h	/^            std::string explain;$/;"	m	struct:BGIQD::ARGS::args_union
extra_flags	unused/fastqa/fasta.h	/^    std::string extra_flags;$/;"	m	struct:BGIQD::FASTQA::SeqItem
f	common/args/argsparser.h	/^                float f;$/;"	m	union:BGIQD::ARGS::args_union::data
fName	main/BinCluster.cpp	/^    BGIQD::SOAP2::FileNames fName;$/;"	m	struct:AppConfig	file:
fName	main/ChopBin.cpp	/^    BGIQD::SOAP2::FileNames fName;$/;"	m	struct:AppConfig	file:
fName	main/ContigDlink.cpp	/^    BGIQD::SOAP2::FileNames fName;$/;"	m	struct:AppConfig	file:
fName	main/LinearCDG.cpp	/^    BGIQD::SOAP2::FileNames fName;$/;"	m	struct:AppConfig	file:
fName	main/Sam2ReadOnContig.cpp	/^    BGIQD::SOAP2::FileNames fName;$/;"	m	struct:AppConfig	file:
fName	main/StaticsticUnique.cpp	/^    BGIQD::SOAP2::FileNames fName ;$/;"	m	struct:AppConfig	file:
fNames	main/FillContigRoad.cpp	/^    BGIQD::SOAP2::FileNames fNames;$/;"	m	struct:GlobalConfig	file:
fNames	main/MinTree.cpp	/^    BGIQD::SOAP2::FileNames fNames ;$/;"	m	struct:AppConf	file:
fake_q	tools/stLFR_2_10X.cpp	/^    const std::string fake_q;$/;"	m	struct:AppConf	file:
fake_read_name	tools/stLFR_2_10X.cpp	/^    const std::string fake_read_name ;$/;"	m	struct:AppConf	file:
father	algorithm/fibheap/fib_heap.h	/^                Node * father;$/;"	m	struct:BGIQD::FIBHEAP::Node
fibHeap	algorithm/graph/MinTree.h	/^                typedef typename BGIQD::FIBHEAP::FibHeap<fibNode> fibHeap ;$/;"	t	struct:BGIQD::GRAPH::MinTreeHelper
fibNode	algorithm/graph/MinTree.h	/^                typedef typename BGIQD::FIBHEAP::Node<TValue, NodeId> fibNode;$/;"	t	struct:BGIQD::GRAPH::MinTreeHelper
fib_node	algorithm/graph/MinTree.h	/^                    fibNode  fib_node ;$/;"	m	struct:BGIQD::GRAPH::MinTreeHelper::MTSearchNode
fib_nodes	algorithm/graph/SPFSearch.h	/^                    std::map<NodeId ,SPFNode> fib_nodes;$/;"	m	struct:BGIQD::GRAPH::SPFSearch
file	common/files/gzstream.h	/^    gzFile           file;               \/\/ file handle for compressed file$/;"	m	class:GZSTREAM_NAMESPACE::gzstreambuf
filename	common/log/logfilter.h	/^            std::string filename;$/;"	m	struct:BGIQD::LOG::logfilter::modulelogrole
filename	common/log/logfilter.h	/^            std::string filename;$/;"	m	struct:BGIQD::LOG::logfilter::specialrole
fill_flag	stLFR/LineGroup.h	/^        struct fill_flag$/;"	s	namespace:BGIQD::stLFR
fill_num	stLFR/LineGroup.h	/^            int fill_num;$/;"	m	struct:BGIQD::stLFR::ContigRoad
fills	main/MergeContig.cpp	/^    BGIQD::stLFR::ContigRoadFills fills;$/;"	m	struct:AppConfig	file:
fills	stLFR/LineGroup.h	/^            std::vector<ContigRoadFill>  fills;$/;"	m	struct:BGIQD::stLFR::ContigRoadFills
filter_repeat_in_region	dev_tools/LinearClusterResult.cpp	/^cluter_show filter_repeat_in_region(const cluter_show & data ,bool repeat, int from, int to)$/;"	f
final_circled	stLFR/barcodeOnContig.h	/^            int final_circled ;$/;"	m	struct:BGIQD::stLFR::P2PGraph
final_path	stLFR/barcodeOnContig.h	/^            std::vector<unsigned int> final_path;$/;"	m	struct:BGIQD::stLFR::P2PGraph
findAllPath	stLFR/barcodeOnContig.cpp	/^        void P2PGraph::findAllPath( unsigned int id  ,Path p , Circle & circle)$/;"	f	class:BGIQD::stLFR::P2PGraph
findAllPath	stLFR/barcodeOnContig.cpp	/^        void P2PGraph::findAllPath()$/;"	f	class:BGIQD::stLFR::P2PGraph
findConnection	main/ContigDlink.cpp	/^    void findConnection(unsigned int edge_id$/;"	f	struct:AppConfig
finish_search	algorithm/graph/DepthSearch.h	/^                int                                 finish_search ;$/;"	m	struct:BGIQD::GRAPH::DepthSearchNode
firstMatchInRefNoReverse	biocommon/sam_bam/sam_parser.cpp	/^int MatchData::firstMatchInRefNoReverse() const $/;"	f	class:BGIQD::SAM::MatchData
first_found	algorithm/graph/DepthSearch.h	/^                int                                 first_found ;$/;"	m	struct:BGIQD::GRAPH::DepthSearchNode
first_match_position	biocommon/sam_bam/sam_parser.h	/^    size_t first_match_position;$/;"	m	struct:BGIQD::SAM::MatchData
flag	dev_tools/ContigRoadFill2Fasta.cpp	/^        int flag ;$/;"	m	struct:GlobalContig::ContigFastA	file:
flag	soap2/contigFasta.h	/^            int flag ;$/;"	m	struct:BGIQD::SOAP2::ContigFastA
flag	soap2/contigGraph.h	/^            int flag ; \/\/ bits marker$/;"	m	struct:BGIQD::SOAP2::Edge
flag	soap2/contigGraph.h	/^            int flag ;$/;"	m	struct:BGIQD::SOAP2::KeyConn
flag	soap2/contigGraph.h	/^            int flag ;$/;"	m	struct:BGIQD::SOAP2::KeyEdge
flag	soap2/graphEA.h	/^            int flag ; \/\/ bits marker$/;"	m	struct:BGIQD::SOAP2::Edge
flags	.ycm_extra_conf.py	/^flags = [$/;"	v
flags	biocommon/sam_bam/sam_parser.h	/^    FLAGS flags;$/;"	m	union:BGIQD::SAM::FLAGS_INT
flags	biocommon/sam_bam/sam_parser.h	/^    FLAGS_INT flags;$/;"	m	struct:BGIQD::SAM::MatchData
flags	stLFR/LineGroup.h	/^            std::vector<fill_flag> flags;$/;"	m	struct:BGIQD::stLFR::ContigRoadFills
flush_buffer	common/files/gzstream.cpp	/^int gzstreambuf::flush_buffer() {$/;"	f	class:GZSTREAM_NAMESPACE::gzstreambuf
fnames	main/MergeContig.cpp	/^    BGIQD::SOAP2::FileNames fnames;$/;"	m	struct:AppConfig	file:
format	main/ChopBin.cpp	/^        std::string format(unsigned int id) const $/;"	f	struct:AppConfig::ConfigBarcodeInfo
forword_from	algorithm/graph/DepthSearch.h	/^                std::set<NodeId>                    forword_from ;$/;"	m	struct:BGIQD::GRAPH::DepthSearchNode
founder	soap2/contigGraphDepth.h	/^                std::map<NodeId,Tos> founder;$/;"	m	struct:BGIQD::SOAP2::DepthSearchEAEnder
founder	soap2/contigGraphSPF.h	/^            std::map<NodeId , Tos> founder ;$/;"	m	struct:BGIQD::SOAP2::SFPEnder
from	algorithm/graph/Graph.h	/^                NodeId      from ;$/;"	m	struct:BGIQD::GRAPH::GraphEdgeBase
from	algorithm/graph/GraphBasic.h	/^                NodeId      from ;$/;"	m	struct:BGIQD::GRAPH::IGraphEdgeBasic
from	algorithm/graph/GraphTest.cpp	/^        char from ; $/;"	m	struct:TestGraph1::Edge	file:
from	algorithm/graph/SPFSearch_test.cpp	/^        char from ; $/;"	m	struct:TestGraph::Edge	file:
from	soap2/contigGraph.h	/^            Kmer from ;$/;"	m	struct:BGIQD::SOAP2::Edge
from	soap2/contigGraph.h	/^            std::map<unsigned int , KeyConn> from ;$/;"	m	struct:BGIQD::SOAP2::KeyEdge
from	soap2/graphEA.h	/^            Kmer from ;$/;"	m	struct:BGIQD::SOAP2::Edge
from	unused/graph/Edge.h	/^                VertexIndex from;$/;"	m	class:BGIQD::Graph::Edge
from_size	soap2/contigGraph.h	/^            int from_size ;$/;"	m	struct:BGIQD::SOAP2::KeyEdge
func	common/multithread/MapReduce.h	/^        combiner func;$/;"	m	class:BGIQD::MultiThread::Combiner
func	common/multithread/MapReduce.h	/^        maper func;$/;"	m	class:BGIQD::MultiThread::Maper
func	common/multithread/MapReduce.h	/^        reducer func;$/;"	m	class:BGIQD::MultiThread::Reducer
generateBinBarcodeInfo	dev_tools/contig_barcode.cpp	/^    void generateBinBarcodeInfo(const contigBarcodeInfo & data  , int binSize, binBarcodeInfo & d)$/;"	f	namespace:BGIQD::JOB01
generateConrigBarcodeInfo	dev_tools/contig_barcode.cpp	/^    void generateConrigBarcodeInfo( const refBarcodeInfo & i_b ,$/;"	f	namespace:BGIQD::JOB01
get	common/log/logfilter.cpp	/^    void logfilter::get(const std::string module, BGIQD::LOG::loglevel level, logger & ret)$/;"	f	class:BGIQD::LOG::logfilter
getLinearStep	stLFR/LineGroup.cpp	/^        std::pair<unsigned int, unsigned int>  ContigRoad::getLinearStep(int index)$/;"	f	class:BGIQD::stLFR::ContigRoad
get_representation	algorithm/disjoin_set/disjoin_set.h	/^                Node * get_representation( Node * a )$/;"	f	class:BGIQD::Algorithm::DisJoin_Set
get_show	dev_tools/LinearClusterResult.cpp	/^cluter_show get_show( const std::map<int , float>d1 , const contigRef & data)$/;"	f
get_type	common/args/argsparser.h	/^            static std::string get_type( type t)$/;"	f	struct:BGIQD::ARGS::args_union
graph	main/MinTree.cpp	/^    BGIQD::stLFR::ContigSimGraph graph;$/;"	m	struct:AppConf	file:
graph_ea	main/ContigDlink.cpp	/^    BGIQD::SOAP2::GraphEA  graph_ea;$/;"	m	struct:AppConfig	file:
graph_ea	main/MergeContig.cpp	/^    BGIQD::SOAP2::GraphEA graph_ea; \/\/ original graph$/;"	m	struct:AppConfig	file:
graph_ea	stLFR/barcodeOnContig.h	/^            BGIQD::SOAP2::GraphEA graph_ea;$/;"	m	struct:BGIQD::stLFR::GraphEA_withBarcode
graph_eab	main/FillContigRoad.cpp	/^    BGIQD::stLFR::GraphEA_withBarcode graph_eab;$/;"	m	struct:GlobalConfig	file:
group	stLFR/LineGroup.h	/^            std::vector<unsigned int> group;$/;"	m	struct:BGIQD::stLFR::ContigRoad
gzstreambase	common/files/gzstream.cpp	/^gzstreambase::gzstreambase( const char* name, int mode) {$/;"	f	class:GZSTREAM_NAMESPACE::gzstreambase
gzstreambase	common/files/gzstream.h	/^    gzstreambase() { init(&buf); }$/;"	f	class:GZSTREAM_NAMESPACE::gzstreambase
gzstreambase	common/files/gzstream.h	/^class gzstreambase : virtual public std::ios {$/;"	c	namespace:GZSTREAM_NAMESPACE
gzstreambuf	common/files/gzstream.h	/^    gzstreambuf() : opened(0) {$/;"	f	class:GZSTREAM_NAMESPACE::gzstreambuf
gzstreambuf	common/files/gzstream.h	/^class gzstreambuf : public std::streambuf {$/;"	c	namespace:GZSTREAM_NAMESPACE
has_barcode_in_read_name	main/Sam2ReadOnContig.cpp	/^    bool has_barcode_in_read_name ;$/;"	m	struct:AppConfig	file:
headin	soap2/contigGraph.h	/^            bool headin;$/;"	m	struct:BGIQD::SOAP2::ContigRoad
headin	stLFR/LineGroup.h	/^            bool headin;$/;"	m	struct:BGIQD::stLFR::ContigRoad
heap	algorithm/graph/SPFSearch.h	/^                    FibHeap heap;$/;"	m	struct:BGIQD::GRAPH::SPFSearch
i	common/args/argsparser.h	/^                int i;$/;"	m	union:BGIQD::ARGS::args_union::data
id	algorithm/graph/DepthSearch.h	/^                NodeId                              id;$/;"	m	struct:BGIQD::GRAPH::DepthSearchNode
id	algorithm/graph/Graph.h	/^                EdgeId      id ;$/;"	m	struct:BGIQD::GRAPH::GraphEdgeBase
id	algorithm/graph/Graph.h	/^                NodeId                          id ;$/;"	m	struct:BGIQD::GRAPH::GraphNodeBase
id	algorithm/graph/GraphBasic.h	/^                EdgeId      id ;$/;"	m	struct:BGIQD::GRAPH::IGraphEdgeBasic
id	algorithm/graph/GraphBasic.h	/^                NodeId                          id ;$/;"	m	struct:BGIQD::GRAPH::IGraphNodeBasic
id	algorithm/graph/GraphTest.cpp	/^        char id ;$/;"	m	struct:TestGraph1::Node	file:
id	algorithm/graph/GraphTrunk.h	/^                NodeId id;$/;"	m	struct:BGIQD::GRAPH::TrunkNode
id	algorithm/graph/SPFSearch_test.cpp	/^        char id ;$/;"	m	struct:TestGraph::Node	file:
id	dev_tools/ContigRoadFill2Fasta.cpp	/^        unsigned int    id ;$/;"	m	struct:GlobalContig::ContigFastA	file:
id	main/StaticsticUnique.cpp	/^        BGIQD::SOAP2::ContigId id ;$/;"	m	struct:AppConfig::ContigInfo	file:
id	soap2/contigFasta.h	/^            unsigned int    id ;$/;"	m	struct:BGIQD::SOAP2::ContigFastA
id	soap2/contigGraph.h	/^            unsigned int id ;$/;"	m	struct:BGIQD::SOAP2::Edge
id	soap2/contigGraph.h	/^            unsigned int id ;$/;"	m	struct:BGIQD::SOAP2::KeyEdge
id	soap2/graphEA.h	/^            unsigned int id ;$/;"	m	struct:BGIQD::SOAP2::Edge
id	stLFR/barcodeOnContig.h	/^                unsigned int id;$/;"	m	struct:BGIQD::stLFR::P2PGraph::Edge
id_map	main/MergeContig.cpp	/^    std::map< unsigned int , unsigned int > id_map;$/;"	m	struct:AppConfig	file:
ids	algorithm/graph/GraphTest.cpp	/^    std::set<NodeId> ids;$/;"	m	struct:Ender2	file:
igzstream	common/files/gzstream.h	/^    igzstream( const char* name, int open_mode = std::ios::in)$/;"	f	class:GZSTREAM_NAMESPACE::igzstream
igzstream	common/files/gzstream.h	/^    igzstream() : std::istream( &buf) {} $/;"	f	class:GZSTREAM_NAMESPACE::igzstream
igzstream	common/files/gzstream.h	/^class igzstream : public gzstreambase, public std::istream {$/;"	c	namespace:GZSTREAM_NAMESPACE
ilogtheme	common/log/log.h	/^class ilogtheme$/;"	c	namespace:BGIQD::LOG
incr	dev_tools/bin_sim_len.cpp	/^void incr(T & map,K key, V v)$/;"	f
incr	dev_tools/bin_simularity.cpp	/^void incr(T & map,K key, V v)$/;"	f
incrMap1	dev_tools/ClusterGap.cpp	/^void incrMap1(std::map<int,int> & map , int key  )$/;"	f
incrMap1	dev_tools/job12.cpp	/^void incrMap1(std::map<int,int> & map , int key  )$/;"	f
incrMap2	dev_tools/LinearClusterResult.cpp	/^void incrMap2(std::map<int,int> & map , int key )$/;"	f
index	main/ContigDlink.cpp	/^    std::atomic<int> index ;$/;"	m	struct:AppConfig	file:
index_map	dev_tools/SolveMulti.cpp	/^std::vector<int> index_map;$/;"	v
infos	biocommon/sam_bam/sam_parser.h	/^    std::vector<MatchInfo> infos;$/;"	m	struct:BGIQD::SAM::MatchDetail
infos	common/args/argsparser.h	/^        static std::map<int,args_union*>  infos;$/;"	m	namespace:BGIQD::ARGS
init	stLFR/LineGroup.cpp	/^        void ContigRoad::init(const std::string & buff)$/;"	f	class:BGIQD::stLFR::ContigRoad
initLog	dev_tools/contig_barcode.cpp	/^    void initLog(const std::string & module)$/;"	f	namespace:BGIQD::JOB01
init_n_element	algorithm/incr_array/incr_array.h	/^                void init_n_element(size_t i )$/;"	f	struct:BGIQD::INCRARRAY::IncrArray
invalid	algorithm/graph/DepthSearch.h	/^                static const  NodeId                invalid = -1;$/;"	m	struct:BGIQD::GRAPH::DepthSearchNode
invalid	algorithm/graph/Graph.h	/^                static const EdgeId invalid = -1 ;$/;"	m	struct:BGIQD::GRAPH::GraphEdgeBase
invalid	algorithm/graph/GraphBasic.h	/^                static const EdgeId invalid = -1 ;$/;"	m	struct:BGIQD::GRAPH::IGraphEdgeBasic
isSeqPalindrome	biocommon/seq/tool_func.h	/^        static bool isSeqPalindrome(const std::string & line)$/;"	f	namespace:BGIQD::SEQ
isSeqPalindrome	dev_tools/ContigRoadFill2Fasta.cpp	/^    static bool isSeqPalindrome(const std::string & line)$/;"	f	struct:GlobalContig
isSeqPalindrome	unused/fastqa/tool_func.h	/^    static bool isSeqPalindrome(const std::string & line)$/;"	f
is_bool	common/args/argsparser.h	/^                is_bool = 0,$/;"	e	enum:BGIQD::ARGS::args_union::type
is_float	common/args/argsparser.h	/^                is_float = 4,$/;"	e	enum:BGIQD::ARGS::args_union::type
is_int	common/args/argsparser.h	/^                is_int = 2,$/;"	e	enum:BGIQD::ARGS::args_union::type
is_long	common/args/argsparser.h	/^                is_long = 3,$/;"	e	enum:BGIQD::ARGS::args_union::type
is_open	common/files/gzstream.h	/^    int is_open() { return opened; }$/;"	f	class:GZSTREAM_NAMESPACE::gzstreambuf
is_reverse_complete	dev_tools/LinkCheck_1.cpp	/^    bool is_reverse_complete;$/;"	m	struct:A	file:
is_string	common/args/argsparser.h	/^                is_string = 1,$/;"	e	enum:BGIQD::ARGS::args_union::type
is_vector_string	common/args/argsparser.h	/^                is_vector_string = 5,$/;"	e	enum:BGIQD::ARGS::args_union::type
iterator	algorithm/collection/collection.h	/^                typedef typename std::map<Element , int >::const_iterator iterator;$/;"	t	struct:BGIQD::Collection::Collection
iterator	algorithm/incr_array/incr_array.h	/^                typedef struct iterator<IncrArray> iterator;$/;"	t	struct:BGIQD::INCRARRAY::IncrArray	typeref:struct:BGIQD::INCRARRAY::IncrArray::iterator
iterator	algorithm/incr_array/incr_array.h	/^            iterator( const iterator& o ) : F(o) {}$/;"	f	struct:BGIQD::INCRARRAY::iterator
iterator	algorithm/incr_array/incr_array.h	/^            iterator(T & b , size_t i ) : F(b,i) {}$/;"	f	struct:BGIQD::INCRARRAY::iterator
iterator	algorithm/incr_array/incr_array.h	/^        struct iterator: public iterator_base<non_const_traits<T> >{$/;"	s	namespace:BGIQD::INCRARRAY
iterator_base	algorithm/incr_array/incr_array.h	/^            iterator_base( Base & b , size_t i ) : base(&b) , curr(i) {}$/;"	f	struct:BGIQD::INCRARRAY::iterator_base
iterator_base	algorithm/incr_array/incr_array.h	/^            iterator_base( const iterator_base & o ) : base(o.base) , curr(o.curr) {}$/;"	f	struct:BGIQD::INCRARRAY::iterator_base
iterator_base	algorithm/incr_array/incr_array.h	/^            struct iterator_base : public std::iterator<typename T::Element$/;"	s	namespace:BGIQD::INCRARRAY
itos	common/string/stringtools.cpp	/^    std::string itos( int i )$/;"	f	namespace:BGIQD::STRING
job_12_cpp	dev_tools/Makefile	/^job_12_cpp =	job12.cpp$/;"	m
job_12_o	dev_tools/Makefile	/^job_12_o   =	${job_12_cpp:%.cpp=%.o} ${source_cpp:%.cpp=%.o}$/;"	m
jobdec	common/log/log.h	/^        std::string jobdec;$/;"	m	class:BGIQD::LOG::timer
jobs	dev_tools/Makefile	/^jobs 	   =	BarcodeOnContig FormatBarcodeOnRef BarcodeOnBin \\$/;"	m
jobs	main/Makefile	/^jobs 	   =	ChopBin\\$/;"	m
jobs	tools/Makefile	/^jobs 	   =	stLFR_2_10X cpSpeed trunk_mark\\$/;"	m
jobs_o	dev_tools/Makefile	/^jobs_o 	   =	${BarcodeOnContig_o}  ${BarcodeOnBin_o} ${FormatBarcodeOnRef_o} \\$/;"	m
jobs_o	main/Makefile	/^jobs_o 	   =	${ChopBin_o} \\$/;"	m
jobs_o	tools/Makefile	/^jobs_o 	   =	${stLFR_2_10X_o} ${cpSpeed_o}\\$/;"	m
jump_conn	soap2/contigGraph.h	/^            int jump_conn;$/;"	m	struct:BGIQD::SOAP2::KeyEdge
junction	stLFR/barcodeOnContig.h	/^                int junction ;$/;"	m	struct:BGIQD::stLFR::P2PGraph::Path
key	algorithm/disjoin_set/disjoin_set.h	/^                    Key key;$/;"	m	struct:BGIQD::Algorithm::DisJoin_Set::Node
key	algorithm/fibheap/fib_heap.h	/^                Key    key;$/;"	m	struct:BGIQD::FIBHEAP::Node
key_array	main/ContigDlink.cpp	/^    BGIQD::SOAP2::KeyEdge * key_array;$/;"	m	class:AppConfig::BGIQD::SOAP2	file:
key_map	main/ContigDlink.cpp	/^    std::map<unsigned int , unsigned int> key_map;$/;"	m	struct:AppConfig	file:
key_mutex	main/ContigDlink.cpp	/^    std::mutex * key_mutex;$/;"	m	class:AppConfig::std	file:
keyer	soap2/contigGraphDepth.h	/^                NodeTypeDetector keyer ;$/;"	m	struct:BGIQD::SOAP2::DepthSearchEAEnder
keyer	soap2/contigGraphSPF.h	/^            NodeTypeDetector keyer ;$/;"	m	struct:BGIQD::SOAP2::SFPEnder
keys	main/ContigDlink.cpp	/^    std::set<unsigned int> keys;$/;"	m	struct:AppConfig	file:
keysize	algorithm/collection/collection.h	/^                size_t keysize() const $/;"	f	struct:BGIQD::Collection::Collection
l	common/args/argsparser.h	/^                long l;$/;"	m	union:BGIQD::ARGS::args_union::data
l	common/log/log.h	/^        logger & l;$/;"	m	class:BGIQD::LOG::timer
left	algorithm/bi_list/bi_list.h	/^                BiListPtr left;$/;"	m	struct:BGIQD::BILIST::BiList
len_map	dev_tools/SolveMulti.cpp	/^std::vector<int> len_map;$/;"	v
lend	common/log/log.h	/^struct lend{};$/;"	s	namespace:BGIQD::LOG
length	algorithm/graph/SPFSearch_test.cpp	/^        int length ;$/;"	m	struct:TestGraph::Node	file:
length	algorithm/graph/SPFSearch_test.cpp	/^    int length;$/;"	m	struct:L_NodeBase	file:
length	biocommon/sam_bam/sam_parser.h	/^        int length ;$/;"	m	struct:BGIQD::SAM::Head::SequenceData
length	dev_tools/ContigRoadFill2Fasta.cpp	/^        int             length ;$/;"	m	struct:GlobalContig::ContigFastA	file:
length	main/ChopBin.cpp	/^        int length;$/;"	m	struct:AppConfig::ConfigBarcodeInfo	file:
length	main/StaticsticUnique.cpp	/^        int length;$/;"	m	struct:AppConfig::ContigInfo	file:
length	soap2/contigFasta.h	/^            int             length ;$/;"	m	struct:BGIQD::SOAP2::ContigFastA
length	soap2/contigGraph.h	/^            int length;$/;"	m	struct:BGIQD::SOAP2::ContigRoad
length	soap2/contigGraph.h	/^            int length;$/;"	m	struct:BGIQD::SOAP2::Edge
length	soap2/contigGraph.h	/^            int length;$/;"	m	struct:BGIQD::SOAP2::KeyConn
length	soap2/contigGraphSearch.h	/^            int length ;$/;"	m	struct:BGIQD::SOAP2::Node_EA
length	soap2/graphEA.h	/^            int length;$/;"	m	struct:BGIQD::SOAP2::Edge
length	stLFR/barcodeOnContig.h	/^                int length ;$/;"	m	struct:BGIQD::stLFR::P2PGraph::Edge
length_all	soap2/contigType.h	/^                long length_all ;$/;"	m	struct:BGIQD::SOAP2::ContigTypeDetecter
level	algorithm/graph/GraphTrunk.h	/^                int level;$/;"	m	struct:BGIQD::GRAPH::TrunkNode
level	common/log/log.h	/^        std::string level;$/;"	m	class:BGIQD::LOG::detaillog
levelname	common/log/logfilter.h	/^        static std::string levelname(loglevel l)$/;"	f	class:BGIQD::LOG::logfilter
lger	dev_tools/LinkCheck.cpp	/^BGIQD::LOG::logger lger;$/;"	v
lger	dev_tools/LinkCheck_1.cpp	/^BGIQD::LOG::logger lger;$/;"	v
lger	main/BinCluster.cpp	/^    BGIQD::LOG::logger lger;$/;"	m	struct:AppConfig	file:
lger	main/ContigDlink.cpp	/^    BGIQD::LOG::logger lger;$/;"	m	struct:AppConfig	file:
lger	main/FillContigRoad.cpp	/^    BGIQD::LOG::logger lger;$/;"	m	struct:GlobalConfig	file:
linear	dev_tools/ContigRoadFill2Fasta.cpp	/^        std::string     linear;$/;"	m	struct:GlobalContig::ContigFastA	file:
linear	soap2/contigFasta.h	/^            std::string     linear;$/;"	m	struct:BGIQD::SOAP2::ContigFastA
linear	soap2/graphEA.h	/^            std::string     linear;$/;"	m	struct:BGIQD::SOAP2::Edge
linear_del	main/MergeContig.cpp	/^    int linear_del ;$/;"	m	struct:AppConfig	file:
linear_fill	main/MergeContig.cpp	/^    BGIQD::stLFR::ContigRoadFills linear_fill;$/;"	m	struct:AppConfig	file:
linear_graph_ea	main/MergeContig.cpp	/^    BGIQD::SOAP2::GraphEA linear_graph_ea; \/\/ for new graph from linear step$/;"	m	struct:AppConfig	file:
linear_length	stLFR/LineGroup.h	/^            int linear_length;$/;"	m	struct:BGIQD::stLFR::ContigRoad
lines	dev_tools/job12.cpp	/^typedef std::map<std::pair<int , int > ,float> lines;$/;"	t	file:
loadArc	main/ContigDlink.cpp	/^    void loadArc()$/;"	f	struct:AppConfig
loadBinBarcodeInfo	dev_tools/contig_barcode.cpp	/^    void loadBinBarcodeInfo(const std::string & file ,  binBarcodeInfo &data)$/;"	f	namespace:BGIQD::JOB01
loadCluster	main/ContigDlink.cpp	/^    void loadCluster()$/;"	f	struct:AppConfig
loadCluster	stLFR/ContigCluster.cpp	/^        void ContigCluster::loadCluster( const std::string & file)$/;"	f	class:BGIQD::stLFR::ContigCluster
loadCluterData	dev_tools/LinearClusterResult.cpp	/^void loadCluterData(const std::string & file , cluters & data)$/;"	f
loadCluterData	dev_tools/MergeClusterResult.cpp	/^void loadCluterData( cluters & data)$/;"	f
loadContigBarcodeInfo	dev_tools/contig_barcode.cpp	/^    void loadContigBarcodeInfo( const std::string & file ,int binsize , contigBarcodeInfo & data)$/;"	f	namespace:BGIQD::JOB01
loadContigRef	dev_tools/LinearClusterResult.cpp	/^void loadContigRef( const std::string & file , contigRef & data )$/;"	f
loadContigTypes	dev_tools/ContigTypeByRef.cpp	/^void loadContigTypes( const std::string & file , contigTypes & types )$/;"	f
loadGraph	dev_tools/job12.cpp	/^void loadGraph(lines & l , contigPos & c , DisJoin_Set<int> & d)$/;"	f
loadRefBarcodeInfo	dev_tools/contig_barcode.cpp	/^    void loadRefBarcodeInfo( const std::string & file, refBarcodeInfo & data )$/;"	f	namespace:BGIQD::JOB01
loadRefBarcodeUniqueInfo	dev_tools/contig_barcode.cpp	/^    void loadRefBarcodeUniqueInfo( const std::string & file, refBarcodeUniqueInfo & data )$/;"	f	namespace:BGIQD::JOB01
loadRefContigInfo	dev_tools/contig_barcode.cpp	/^    void loadRefContigInfo( const std::string & file , refContigInfo & data , contigLens & lens )$/;"	f	namespace:BGIQD::JOB01
loadUpdateEdge	main/ContigDlink.cpp	/^    void loadUpdateEdge( )$/;"	f	struct:AppConfig
log	common/test/Test.h	/^        static BGIQD::LOG::logger  log;$/;"	m	struct:Test
log	dev_tools/ContigRoadFill2Fasta.cpp	/^    BGIQD::LOG::logger log;$/;"	m	struct:GlobalContig	file:
log	main/ChopBin.cpp	/^    BGIQD::LOG::logger log;$/;"	m	struct:AppConfig	file:
log	main/StaticsticUnique.cpp	/^    BGIQD::LOG::logger log;$/;"	m	struct:AppConfig	file:
log	test/test.cpp	/^BGIQD::LOG::logger Test::log ;$/;"	m	class:Test	file:
loger	main/LinearCDG.cpp	/^    BGIQD::LOG::logger loger;$/;"	m	struct:AppConfig	file:
loger	main/MergeContig.cpp	/^    BGIQD::LOG::logger loger;$/;"	m	struct:AppConfig	file:
loger	main/Sam2ReadOnContig.cpp	/^    BGIQD::LOG::logger loger;$/;"	m	struct:AppConfig	file:
logfilter	common/log/logfilter.h	/^        logfilter(){}$/;"	f	class:BGIQD::LOG::logfilter
logfilter	common/log/logfilter.h	/^class logfilter$/;"	c	namespace:BGIQD::LOG
logger	common/log/log.h	/^class logger$/;"	c	namespace:BGIQD::LOG
loglevel	common/log/logfilter.h	/^enum loglevel :int$/;"	g	namespace:BGIQD::LOG
logstring	common/log/log.cpp	/^    std::string detaillog::logstring(const std::string & str)$/;"	f	class:BGIQD::LOG::detaillog
logstring	common/log/log.h	/^        virtual std::string logstring(const std::string & str) final$/;"	f	class:BGIQD::LOG::simplelog
long_options	common/args/argsparser.h	/^        static struct option long_options[arg_max];$/;"	m	namespace:BGIQD::ARGS	typeref:struct:BGIQD::ARGS::option
lstart	common/log/log.h	/^struct lstart {};$/;"	s	namespace:BGIQD::LOG
ltrim	common/string/stringtools.cpp	/^    std::string ltrim(const std::string & str)$/;"	f	namespace:BGIQD::STRING
m_block_size	algorithm/incr_array/incr_array.h	/^                size_t m_block_size ;$/;"	m	struct:BGIQD::INCRARRAY::IncrArray
m_cache	biocommon/pair/pair_sam_parser.h	/^        std::vector<MatchData> m_cache;$/;"	m	class:BGIQD::SAM::PairedSAMParser
m_cache_next	biocommon/pair/pair_sam_parser.h	/^        std::vector<MatchData> m_cache_next;$/;"	m	class:BGIQD::SAM::PairedSAMParser
m_capacity	algorithm/incr_array/incr_array.h	/^                size_t m_capacity;$/;"	m	struct:BGIQD::INCRARRAY::IncrArray
m_combiner	common/multithread/MapReduce.h	/^        std::vector<Combiner<K2,V2>> m_combiner;$/;"	m	class:BGIQD::MultiThread::MapReduce
m_combiner_threads	common/multithread/MapReduce.h	/^        MultiThread m_combiner_threads;$/;"	m	class:BGIQD::MultiThread::MapReduce
m_condition_variable	common/multithread/JobQueue.h	/^            std::condition_variable m_condition_variable;$/;"	m	struct:BGIQD::MultiThread::JobQueue
m_curr	algorithm/incr_array/incr_array.h	/^                size_t m_curr ;$/;"	m	struct:BGIQD::INCRARRAY::IncrArray
m_headers	algorithm/incr_array/incr_array.h	/^                std::vector<Element * > m_headers;$/;"	m	struct:BGIQD::INCRARRAY::IncrArray
m_ist	biocommon/pair/pair_sam_parser.h	/^        std::istream & m_ist;$/;"	m	class:BGIQD::SAM::PairedSAMParser::std
m_line	biocommon/sam_bam/sam_parser.h	/^        const std::string m_line;$/;"	m	class:BGIQD::SAM::LineParser
m_line	stLFR/Line.h	/^        base_line  m_line;$/;"	m	class:BGIQD::stLFR::Line
m_line	stLFR/Line.h	/^        base_line  m_line;$/;"	m	class:BGIQD::stLFR::MultiLine
m_lines	stLFR/Line.h	/^        std::vector<Line*> m_lines;$/;"	m	class:BGIQD::stLFR::MultiLine
m_mapper	common/multithread/MapReduce.h	/^        std::vector<Maper<K1,V1,K2,V2>> m_mapper;$/;"	m	class:BGIQD::MultiThread::MapReduce
m_mapper_threads	common/multithread/MapReduce.h	/^        MultiThread m_mapper_threads; \/\/all result saved in shuffle$/;"	m	class:BGIQD::MultiThread::MapReduce
m_mutex	common/multithread/JobQueue.h	/^            std::mutex m_mutex;$/;"	m	struct:BGIQD::MultiThread::JobQueue
m_nodeHash	algorithm/disjoin_set/disjoin_set.h	/^                nodeHash m_nodeHash;$/;"	m	class:BGIQD::Algorithm::DisJoin_Set
m_num2tag	stLFR/barcodeId.h	/^        std::map<int , std::string > m_num2tag;$/;"	m	class:BGIQD::stLFR::BarcodeId
m_parentVector	algorithm/disjoin_set/disjoin_set.h	/^                std::vector<Node*> m_parentVector;$/;"	m	class:BGIQD::Algorithm::DisJoin_Set
m_prefix	soap2/fileName.h	/^                std::string m_prefix;$/;"	m	struct:BGIQD::SOAP2::FileNames
m_queue	common/multithread/JobQueue.h	/^            std::queue<Job > m_queue;$/;"	m	struct:BGIQD::MultiThread::JobQueue
m_queue	common/multithread/MultiThread.h	/^        JobQueue m_queue ;$/;"	m	struct:BGIQD::MultiThread::MultiThread
m_reducer	common/multithread/MapReduce.h	/^        std::vector<Reducer<K2,V2,V3>> m_reducer;$/;"	m	class:BGIQD::MultiThread::MapReduce
m_reducer_threads	common/multithread/MapReduce.h	/^        MultiThread m_reducer_threads;$/;"	m	class:BGIQD::MultiThread::MapReduce
m_results	common/multithread/MapReduce.h	/^        ShufflerResult m_results;$/;"	m	class:BGIQD::MultiThread::Shuffler
m_shuffler	common/multithread/MapReduce.h	/^        std::vector<Shuffler<K2,V2>> m_shuffler;$/;"	m	class:BGIQD::MultiThread::MapReduce
m_tag2num	stLFR/barcodeId.h	/^        std::map<std::string , int > m_tag2num;$/;"	m	class:BGIQD::stLFR::BarcodeId
m_threads	common/multithread/MultiThread.h	/^        std::vector<std::thread*> m_threads;$/;"	m	struct:BGIQD::MultiThread::MultiThread
main	dev_tools/BarcodeOnBin.cpp	/^int main(int argc ,char **argv)$/;"	f
main	dev_tools/BarcodeOnContig.cpp	/^int main(int argc , char ** argv)$/;"	f
main	dev_tools/ClusterGap.cpp	/^int main()$/;"	f
main	dev_tools/ClusterLengthSim.cpp	/^int main(int argc , char ** argv)$/;"	f
main	dev_tools/ContigGraphType.cpp	/^int main()$/;"	f
main	dev_tools/ContigRoadFill2Fasta.cpp	/^int main(int argc , char ** argv)$/;"	f
main	dev_tools/ContigTypeByRef.cpp	/^int main(int argc ,char **argv)$/;"	f
main	dev_tools/FormatBarcodeOnRef.cpp	/^int main(int argc , char **argv )$/;"	f
main	dev_tools/LinearClusterResult.cpp	/^int main(int argc , char ** argv)$/;"	f
main	dev_tools/LinkCheck.cpp	/^int main(int argc , char **argv)$/;"	f
main	dev_tools/LinkCheck_1.cpp	/^int main(int argc , char **argv)$/;"	f
main	dev_tools/MergeClusterResult.cpp	/^int main()$/;"	f
main	dev_tools/SolveMulti.cpp	/^int main(int argc , char ** argv)$/;"	f
main	dev_tools/UnicomGraph.cpp	/^int main()$/;"	f
main	dev_tools/bin_sim_len.cpp	/^int main(int argc , char ** argv)$/;"	f
main	dev_tools/bin_simularity.cpp	/^int main(int argc , char ** argv)$/;"	f
main	dev_tools/job12.cpp	/^int main()$/;"	f
main	main/BinCluster.cpp	/^int main(int argc ,char **argv)$/;"	f
main	main/ChopBin.cpp	/^int main(int argc , char ** argv)$/;"	f
main	main/ContigDlink.cpp	/^int main(int argc , char **argv)$/;"	f
main	main/FillContigRoad.cpp	/^int  main(int argc, char **argv)$/;"	f
main	main/LinearCDG.cpp	/^int main(int argc , char ** argv)$/;"	f
main	main/MergeContig.cpp	/^int main(int argc , char **argv)$/;"	f
main	main/MinTree.cpp	/^int main(int argc , char **argv )$/;"	f
main	main/Sam2ReadOnContig.cpp	/^int main(int argc , char ** argv)$/;"	f
main	main/StaticsticUnique.cpp	/^int main(int argc , char ** argv)$/;"	f
main	test/test.cpp	/^int main(int argc, char ** argv)$/;"	f
main	tools/cpSpeed.cpp	/^int main(int argc , char **argv)$/;"	f
main	tools/stLFR_2_10X.cpp	/^int main(int argc , char **argv)$/;"	f
main	tools/trunk_mark.cpp	/^int main(int argc , char **argv)$/;"	f
main	unused/graph/test.cpp	/^int main()$/;"	f
map1	dev_tools/SolveMulti.cpp	/^std::map<std::string,std::vector<int> > map1;$/;"	v
map2	dev_tools/SolveMulti.cpp	/^std::map<std::string,std::vector<float> > map2;$/;"	v
map2csv	dev_tools/bin_sim_len.cpp	/^void map2csv(const std::map<size_t , std::string> &heads$/;"	f
map2csv	dev_tools/bin_simularity.cpp	/^void map2csv(const std::map<size_t , std::string> &heads$/;"	f
map_value	dev_tools/SolveMulti.cpp	/^std::map<std::string , std::vector<std::tuple<float,std::string , int , float>>> map_value;$/;"	v
maper	common/multithread/MapReduce.h	/^        typedef std::function<std::pair<K2,V2>(K1 k , V1 v)> maper;$/;"	t	class:BGIQD::MultiThread::Maper
maps	dev_tools/SolveMulti.cpp	/^std::map<std::string, std::map<int, sort_t1> > maps;$/;"	v
mark	algorithm/fibheap/fib_heap.h	/^                bool   mark;$/;"	m	struct:BGIQD::FIBHEAP::Node
marked	algorithm/graph/GraphTrunk.h	/^                bool marked;$/;"	m	struct:BGIQD::GRAPH::TrunkNode
maxContig	dev_tools/ContigRoadFill2Fasta.cpp	/^    unsigned int maxContig;$/;"	m	struct:GlobalContig	file:
maxContig	soap2/contigFasta.h	/^                unsigned int maxContig;$/;"	m	class:BGIQD::SOAP2::ContigFastAMap
max_depth	soap2/contigGraphDepth.h	/^                int max_depth ;$/;"	m	struct:BGIQD::SOAP2::DepthSearchEAEnder
max_length	main/FillContigRoad.cpp	/^    int max_length;$/;"	m	struct:GlobalConfig	file:
max_length	soap2/contigGraphDepth.h	/^                int max_length ;$/;"	m	struct:BGIQD::SOAP2::DepthSearchEAEnder
max_length	soap2/contigGraphSPF.h	/^            int max_length ;$/;"	m	struct:BGIQD::SOAP2::SFPEnder
maxlevel	common/log/logfilter.h	/^            loglevel maxlevel;$/;"	m	struct:BGIQD::LOG::logfilter::modulelogrole
maxlevel	common/log/logfilter.h	/^            loglevel maxlevel;$/;"	m	struct:BGIQD::LOG::logfilter::specialrole
median	dev_tools/bin_sim_len.cpp	/^void median(std::map<size_t,double> & map , const std::map<size_t , size_t> index)$/;"	f
median	dev_tools/bin_simularity.cpp	/^void median(std::map<size_t,double> & map , const std::map<size_t , size_t> index)$/;"	f
min	algorithm/fibheap/fib_heap.h	/^                Node * min ;$/;"	m	struct:BGIQD::FIBHEAP::FibHeap
min	dev_tools/bin_sim_len.cpp	/^inline size_t min(size_t i , size_t j) $/;"	f
min	dev_tools/bin_simularity.cpp	/^inline size_t min(size_t i , size_t j) $/;"	f
min	main/StaticsticUnique.cpp	/^    int min;$/;"	m	struct:AppConfig	file:
min_len	soap2/contigType.h	/^                int min_len;$/;"	m	struct:BGIQD::SOAP2::ContigTypeDetecter
mintrees	main/MinTree.cpp	/^    std::map<BGIQD::stLFR::ContigSimGraph::NodeId , BGIQD::stLFR::ContigSimGraph> mintrees;$/;"	m	struct:AppConf	file:
mintreetrunks	main/MinTree.cpp	/^    std::map<BGIQD::stLFR::ContigSimGraph::NodeId , BGIQD::stLFR::ContigSimGraph> mintreetrunks;$/;"	m	struct:AppConf	file:
mode	common/files/gzstream.h	/^    int              mode;               \/\/ I\/O mode$/;"	m	class:GZSTREAM_NAMESPACE::gzstreambuf
module	common/log/log.h	/^        std::string module;$/;"	m	class:BGIQD::LOG::detaillog
module	common/log/logfilter.h	/^            std::string module;$/;"	m	struct:BGIQD::LOG::logfilter::modulelogrole
module	common/log/logfilter.h	/^            std::string module;$/;"	m	struct:BGIQD::LOG::logfilter::specialrole
modulelogrole	common/log/logfilter.h	/^        struct modulelogrole$/;"	s	class:BGIQD::LOG::logfilter
n	algorithm/fibheap/fib_heap.h	/^                long long n ;$/;"	m	struct:BGIQD::FIBHEAP::FibHeap
name	biocommon/sam_bam/sam_parser.h	/^        std::string name ;$/;"	m	struct:BGIQD::SAM::Head::SequenceData
name	common/args/argsparser.h	/^            std::string name ;$/;"	m	struct:BGIQD::ARGS::args_union
name	unused/fastqa/fasta.h	/^    std::string name;$/;"	m	struct:BGIQD::FASTQA::SeqItem
needMerge	stLFR/LineGroup.h	/^            bool needMerge() const { return linear_length > 1 ; };$/;"	f	struct:BGIQD::stLFR::ContigRoad
new_graph_ea	main/MergeContig.cpp	/^    BGIQD::SOAP2::GraphEA new_graph_ea; \/\/ for new graph from super_contig$/;"	m	struct:AppConfig	file:
next	algorithm/graph/Graph.h	/^                EdgeId      next;$/;"	m	struct:BGIQD::GRAPH::GraphEdgeBase
next	algorithm/graph/GraphTest.cpp	/^        int next ;$/;"	m	struct:TestGraph1::Edge	file:
next	algorithm/graph/SPFSearch_test.cpp	/^        int next ;$/;"	m	struct:TestGraph::Edge	file:
next	dev_tools/contig_barcode.h	/^        int next ;$/;"	m	struct:BGIQD::JOB01::BarcodeNum
next	soap2/contigGraph.h	/^            Arc * next ;$/;"	m	struct:BGIQD::SOAP2::Arc
next	soap2/graphEA.h	/^            Arc * next ;$/;"	m	struct:BGIQD::SOAP2::Arc
next	unused/fastqa/fasta.h	/^    SeqItem next;$/;"	m	struct:BGIQD::FASTQA::SeqItemFactory
nextContigNum	dev_tools/ContigRoadFill2Fasta.cpp	/^    unsigned int nextContigNum()$/;"	f	struct:GlobalContig
nextContigNum	soap2/contigFasta.h	/^                unsigned int nextContigNum()$/;"	f	class:BGIQD::SOAP2::ContigFastAMap
nextE	unused/graph/Graph.h	/^                EdgeIndex nextE;$/;"	m	class:BGIQD::Graph::DiGraph_VE
nextV	unused/graph/Graph.h	/^                VertexIndex nextV;$/;"	m	class:BGIQD::Graph::DiGraph_VE
nexts	unused/graph/Vertex.h	/^            std::vector<EdgeIndex> nexts;$/;"	m	struct:BGIQD::Graph::VertexWithEdge
nodeHash	algorithm/disjoin_set/disjoin_set.h	/^            typedef std::map<Key , Node * > nodeHash;$/;"	t	class:BGIQD::Algorithm::DisJoin_Set
node_id	algorithm/graph/Graph.h	/^                typename Edge::EdgeNodeId node_id ;$/;"	m	struct:BGIQD::GRAPH::EdgeIterator
nodes	algorithm/graph/DepthSearch.h	/^                std::map<NodeId , Node>                     nodes;$/;"	m	struct:BGIQD::GRAPH::DepthSearch
nodes	algorithm/graph/Graph.h	/^                std::map<GraphNodeId , Node > nodes ;$/;"	m	struct:BGIQD::GRAPH::GraphAccessBase
nodes	algorithm/graph/GraphBasic.h	/^                Nodes nodes ;$/;"	m	struct:BGIQD::GRAPH::ListGraphBasic
nodes	algorithm/graph/GraphTest.cpp	/^    std::map< char , Node> nodes ;$/;"	m	struct:TestGraph1	file:
nodes	algorithm/graph/SPFSearch_test.cpp	/^    std::map< char , Node> nodes ;$/;"	m	struct:TestGraph	file:
nodes	soap2/contigGraphDepth.h	/^                std::stack<SNode> nodes;$/;"	m	struct:BGIQD::SOAP2::DepthSearchEAEnder
nodes	stLFR/barcodeOnContig.h	/^                std::set<unsigned int > nodes;$/;"	m	struct:BGIQD::stLFR::P2PGraph::Path
non_const_traits	algorithm/incr_array/incr_array.h	/^            struct non_const_traits$/;"	s	namespace:BGIQD::INCRARRAY
now	algorithm/graph/GraphTest.cpp	/^    NodeId now ;$/;"	m	struct:Ender2	file:
now	common/time/timetools.h	/^        static timepoint now() $/;"	f	struct:BGIQD::TIME::timepoint
num	biocommon/sam_bam/sam_parser.h	/^    int num;$/;"	m	union:BGIQD::SAM::FLAGS_INT
ogzstream	common/files/gzstream.h	/^    ogzstream( const char* name, int mode = std::ios::out)$/;"	f	class:GZSTREAM_NAMESPACE::ogzstream
ogzstream	common/files/gzstream.h	/^    ogzstream() : std::ostream( &buf) {}$/;"	f	class:GZSTREAM_NAMESPACE::ogzstream
ogzstream	common/files/gzstream.h	/^class ogzstream : public gzstreambase, public std::ostream {$/;"	c	namespace:GZSTREAM_NAMESPACE
on	common/log/logfilter.h	/^            bool on;$/;"	m	struct:BGIQD::LOG::logfilter::specialrole
open	common/files/gzstream.cpp	/^gzstreambuf* gzstreambuf::open( const char* name, int open_mode) {$/;"	f	class:GZSTREAM_NAMESPACE::gzstreambuf
open	common/files/gzstream.cpp	/^void gzstreambase::open( const char* name, int open_mode) {$/;"	f	class:GZSTREAM_NAMESPACE::gzstreambase
open	common/files/gzstream.h	/^    void open( const char* name, int open_mode = std::ios::in) {$/;"	f	class:GZSTREAM_NAMESPACE::igzstream
open	common/files/gzstream.h	/^    void open( const char* name, int open_mode = std::ios::out) {$/;"	f	class:GZSTREAM_NAMESPACE::ogzstream
opened	common/files/gzstream.h	/^    char             opened;             \/\/ open\/close state of stream$/;"	m	class:GZSTREAM_NAMESPACE::gzstreambuf
operator !=	algorithm/graph/Graph.h	/^                bool operator != ( const EdgeIterator & ei )const$/;"	f	struct:BGIQD::GRAPH::EdgeIterator
operator !=	algorithm/graph/GraphBasic.h	/^                bool operator != ( const  IGraphEdgeBasic & i )$/;"	f	struct:BGIQD::GRAPH::IGraphEdgeBasic
operator !=	algorithm/graph/GraphBasic.h	/^                bool operator != ( const IDigraphEdgeBase & i )$/;"	f	struct:BGIQD::GRAPH::IDigraphEdgeBase
operator !=	algorithm/incr_array/incr_array.h	/^            bool operator != ( const iterator_base & o ) const {$/;"	f	struct:BGIQD::INCRARRAY::iterator_base
operator *	algorithm/graph/Graph.h	/^                const Edge & operator*() const  { return *curr ; }$/;"	f	struct:BGIQD::GRAPH::EdgeIterator
operator *	algorithm/incr_array/incr_array.h	/^            reference operator*() $/;"	f	struct:BGIQD::INCRARRAY::iterator_base
operator +	algorithm/incr_array/incr_array.h	/^            iterator_base  operator + ( size_t i) const $/;"	f	struct:BGIQD::INCRARRAY::iterator_base
operator +	common/time/timetools.cpp	/^    timeperoid timeperoid::operator+( const timeperoid & back_period ) const$/;"	f	class:BGIQD::TIME::timeperoid
operator +	common/time/timetools.cpp	/^    timepoint timepoint::operator+( const timeperoid & back_period ) const$/;"	f	class:BGIQD::TIME::timepoint
operator ++	algorithm/graph/Graph.h	/^                EdgeIterator & operator ++() {$/;"	f	struct:BGIQD::GRAPH::EdgeIterator
operator ++	algorithm/incr_array/incr_array.h	/^            iterator_base & operator++ ()$/;"	f	struct:BGIQD::INCRARRAY::iterator_base
operator ++	algorithm/incr_array/incr_array.h	/^            iterator_base & operator++ (int i)$/;"	f	struct:BGIQD::INCRARRAY::iterator_base
operator +=	algorithm/collection/collection.h	/^                Collection & operator +=( const Collection & other)$/;"	f	struct:BGIQD::Collection::Collection
operator +=	algorithm/incr_array/incr_array.h	/^            iterator_base & operator += ( size_t i)$/;"	f	struct:BGIQD::INCRARRAY::iterator_base
operator -	algorithm/incr_array/incr_array.h	/^            iterator_base  operator - ( size_t i) const $/;"	f	struct:BGIQD::INCRARRAY::iterator_base
operator -	common/time/timetools.cpp	/^    timeperoid timeperoid::operator-( const timeperoid & back_period ) const$/;"	f	class:BGIQD::TIME::timeperoid
operator -	common/time/timetools.cpp	/^    timeperoid timepoint::operator-( const timepoint & prev_point ) const $/;"	f	class:BGIQD::TIME::timepoint
operator -	common/time/timetools.cpp	/^    timepoint timepoint::operator-( const timeperoid & back_period ) const$/;"	f	class:BGIQD::TIME::timepoint
operator --	algorithm/incr_array/incr_array.h	/^            iterator_base & operator-- ()$/;"	f	struct:BGIQD::INCRARRAY::iterator_base
operator --	algorithm/incr_array/incr_array.h	/^            iterator_base & operator-- (int i)$/;"	f	struct:BGIQD::INCRARRAY::iterator_base
operator -=	algorithm/collection/collection.h	/^                Collection & operator -= (const Collection & other )$/;"	f	struct:BGIQD::Collection::Collection
operator -=	algorithm/incr_array/incr_array.h	/^            iterator_base & operator -= ( size_t i)$/;"	f	struct:BGIQD::INCRARRAY::iterator_base
operator ->	algorithm/graph/Graph.h	/^                const Edge * operator->() const  { return curr ; }$/;"	f	struct:BGIQD::GRAPH::EdgeIterator
operator ->	algorithm/incr_array/incr_array.h	/^            pointer operator->()$/;"	f	struct:BGIQD::INCRARRAY::iterator_base
operator <	algorithm/incr_array/incr_array.h	/^            bool operator < ( const iterator_base & o )const { $/;"	f	struct:BGIQD::INCRARRAY::iterator_base
operator <	stLFR/barcodeOnContig.h	/^                bool operator < ( const Path & a) const$/;"	f	struct:BGIQD::stLFR::P2PGraph::Path
operator <<	common/log/log.h	/^        logger & operator << (const T & t)$/;"	f	class:BGIQD::LOG::logger
operator <<	common/log/log.h	/^        logger & operator << (const lend & )$/;"	f	class:BGIQD::LOG::logger
operator <<	common/log/log.h	/^        logger & operator << (const lstart & )$/;"	f	class:BGIQD::LOG::logger
operator <=	algorithm/incr_array/incr_array.h	/^            bool operator <= ( const iterator_base & o )const { $/;"	f	struct:BGIQD::INCRARRAY::iterator_base
operator =	algorithm/collection/collection.h	/^                Collection & operator = ( const Collection & other) $/;"	f	struct:BGIQD::Collection::Collection
operator =	algorithm/graph/Graph.h	/^                EdgeIterator & operator = ( const EdgeIterator & ei )$/;"	f	struct:BGIQD::GRAPH::EdgeIterator
operator =	algorithm/incr_array/incr_array.h	/^            const_iterator& operator = ( const const_iterator& o )$/;"	f	struct:BGIQD::INCRARRAY::const_iterator
operator =	algorithm/incr_array/incr_array.h	/^            iterator& operator = ( const iterator& o )$/;"	f	struct:BGIQD::INCRARRAY::iterator
operator =	algorithm/incr_array/incr_array.h	/^            iterator_base & operator = ( const iterator_base & o )$/;"	f	struct:BGIQD::INCRARRAY::iterator_base
operator ==	algorithm/graph/Graph.h	/^                bool operator == ( const EdgeIterator & ei )const$/;"	f	struct:BGIQD::GRAPH::EdgeIterator
operator ==	algorithm/graph/GraphBasic.h	/^                bool operator == (const  IDigraphEdgeBase & i )$/;"	f	struct:BGIQD::GRAPH::IDigraphEdgeBase
operator ==	algorithm/graph/GraphBasic.h	/^                bool operator == (const  IGraphEdgeBasic & i )$/;"	f	struct:BGIQD::GRAPH::IGraphEdgeBasic
operator ==	algorithm/incr_array/incr_array.h	/^            bool operator == ( const iterator_base & o ) const {$/;"	f	struct:BGIQD::INCRARRAY::iterator_base
operator >	algorithm/incr_array/incr_array.h	/^            bool operator > ( const iterator_base & o ) const { $/;"	f	struct:BGIQD::INCRARRAY::iterator_base
operator >=	algorithm/incr_array/incr_array.h	/^            bool operator >= ( const iterator_base & o ) const { $/;"	f	struct:BGIQD::INCRARRAY::iterator_base
operator []	algorithm/incr_array/incr_array.h	/^                Element & operator[](size_t i )$/;"	f	struct:BGIQD::INCRARRAY::IncrArray
optional	common/args/argsparser.h	/^            bool optional;$/;"	m	struct:BGIQD::ARGS::args_union
origin	biocommon/sam_bam/sam_parser.h	/^    bool origin ;$/;"	m	struct:BGIQD::SAM::MatchData
os	.ycm_extra_conf.py	/^import os$/;"	i
ost	common/log/log.h	/^        std::ostream * ost;$/;"	m	class:BGIQD::LOG::logger::std
other_from	algorithm/graph/SPFSearch.h	/^                std::set<NodeId>  other_from;$/;"	m	struct:BGIQD::GRAPH::SPFNode
overflow	common/files/gzstream.cpp	/^int gzstreambuf::overflow( int c) { \/\/ used for output buffer only$/;"	f	class:GZSTREAM_NAMESPACE::gzstreambuf
ox1	biocommon/sam_bam/sam_parser.h	/^    int ox1:1;$/;"	m	struct:BGIQD::SAM::FLAGS
ox10	biocommon/sam_bam/sam_parser.h	/^    int ox10:1;$/;"	m	struct:BGIQD::SAM::FLAGS
ox100	biocommon/sam_bam/sam_parser.h	/^    int ox100:1;$/;"	m	struct:BGIQD::SAM::FLAGS
ox2	biocommon/sam_bam/sam_parser.h	/^    int ox2:1;$/;"	m	struct:BGIQD::SAM::FLAGS
ox20	biocommon/sam_bam/sam_parser.h	/^    int ox20:1;$/;"	m	struct:BGIQD::SAM::FLAGS
ox200	biocommon/sam_bam/sam_parser.h	/^    int ox200:1;$/;"	m	struct:BGIQD::SAM::FLAGS
ox4	biocommon/sam_bam/sam_parser.h	/^    int ox4:1;$/;"	m	struct:BGIQD::SAM::FLAGS
ox40	biocommon/sam_bam/sam_parser.h	/^    int ox40:1;$/;"	m	struct:BGIQD::SAM::FLAGS
ox400	biocommon/sam_bam/sam_parser.h	/^    int ox400:1;$/;"	m	struct:BGIQD::SAM::FLAGS
ox8	biocommon/sam_bam/sam_parser.h	/^    int ox8:1;$/;"	m	struct:BGIQD::SAM::FLAGS
ox80	biocommon/sam_bam/sam_parser.h	/^    int ox80:1;$/;"	m	struct:BGIQD::SAM::FLAGS
ox800	biocommon/sam_bam/sam_parser.h	/^    int ox800:1;$/;"	m	struct:BGIQD::SAM::FLAGS
pair_num	tools/stLFR_2_10X.cpp	/^    long pair_num ;$/;"	m	struct:AppConf	file:
parent	algorithm/disjoin_set/disjoin_set.h	/^                    Node * parent;$/;"	m	struct:BGIQD::Algorithm::DisJoin_Set::Node
parse_string	dev_tools/SolveMulti.cpp	/^sort_t1 parse_string(const std::string &s)$/;"	f
pass	main/StaticsticUnique.cpp	/^    std::set<unsigned int> pass ;$/;"	m	struct:AppConfig	file:
path	algorithm/graph/DepthSearch.h	/^                std::stack<EdgeItr>                         path;$/;"	m	struct:BGIQD::GRAPH::DepthSearch
path_length	soap2/contigGraphDepth.h	/^            int path_length ;$/;"	m	struct:BGIQD::SOAP2::DNode_EA
path_num	stLFR/barcodeOnContig.h	/^            int path_num;$/;"	m	struct:BGIQD::stLFR::P2PGraph
path_num_freq	main/FillContigRoad.cpp	/^    BGIQD::FREQ::Freq<int> path_num_freq;$/;"	m	struct:GlobalConfig	file:
paths	stLFR/barcodeOnContig.h	/^                std::vector<Edge> paths;$/;"	m	struct:BGIQD::stLFR::P2PGraph::Path
pointer	algorithm/incr_array/incr_array.h	/^                typedef typename T::Element * pointer;$/;"	t	class:BGIQD::INCRARRAY::non_const_traits::T
pointer	algorithm/incr_array/incr_array.h	/^                typedef typename T::Element const * pointer;$/;"	t	class:BGIQD::INCRARRAY::const_traits::T
pointer	algorithm/incr_array/incr_array.h	/^            typedef typename T::pointer pointer;$/;"	t	struct:BGIQD::INCRARRAY::iterator_base
pre_type	algorithm/graph/GraphTest.cpp	/^    BGIQD::GRAPH::DepthSearchEdgeType pre_type;$/;"	m	struct:Ender1	file:
preload	stLFR/barcodeId.cpp	/^    bool BarcodeIdHelper::preload = false ;$/;"	m	class:BGIQD::stLFR::BarcodeIdHelper	file:
preload	stLFR/barcodeId.h	/^        static bool preload ;$/;"	m	class:BGIQD::stLFR::BarcodeIdHelper
prev	algorithm/graph/DepthSearch.h	/^                NodeId                              prev ;$/;"	m	struct:BGIQD::GRAPH::DepthSearchNode
prev	algorithm/graph/GraphTrunk.h	/^                NodeId prev;$/;"	m	struct:BGIQD::GRAPH::TrunkNode
prev	algorithm/graph/SPFSearch.h	/^                NodeId prev ;$/;"	m	struct:BGIQD::GRAPH::SPFNode
prev_2	algorithm/graph/GraphTrunk.h	/^                NodeId prev_2;$/;"	m	struct:BGIQD::GRAPH::TrunkNode
printContigBarcodeInfo	dev_tools/contig_barcode.cpp	/^    void printContigBarcodeInfo($/;"	f	namespace:BGIQD::JOB01
printContigTypes	dev_tools/ContigTypeByRef.cpp	/^void printContigTypes( const std::string & file , const contigTypes & types)$/;"	f
print_contigPos	dev_tools/LinearClusterResult.cpp	/^void print_contigPos(const contigRef & data)$/;"	f
print_show	dev_tools/ClusterGap.cpp	/^void print_show(const std::string & line , std::map<int , int > & data )$/;"	f
print_show	dev_tools/LinearClusterResult.cpp	/^void print_show( int seed, const cluter_show & data , bool s )$/;"	f
print_show	dev_tools/job12.cpp	/^void print_show(const std::string & line ,contigPos   & data , lines & l ,DisJoin_Set<int> &d)$/;"	f
print_usage	test/test.cpp	/^static void print_usage()$/;"	f	file:
printv	dev_tools/SolveMulti.cpp	/^void printv(const std::vector<T> & t)$/;"	f
process	unused/fastqa/fasta.cpp	/^    SeqItemFactory::Process SeqItemFactory::process( const std::string &line, BGIQD::FASTQA::SeqItem &item )$/;"	f	class:BGIQD::FASTQA::SeqItemFactory
process_fasta	unused/fastqa/fasta.cpp	/^    SeqItemFactory::Process SeqItemFactory::process_fasta( const std::string &line, BGIQD::FASTQA::SeqItem &item )$/;"	f	class:BGIQD::FASTQA::SeqItemFactory
process_fastq	unused/fastqa/fasta.cpp	/^    SeqItemFactory::Process SeqItemFactory::process_fastq( const std::string &line, BGIQD::FASTQA::SeqItem &item )$/;"	f	class:BGIQD::FASTQA::SeqItemFactory
push_back	algorithm/incr_array/incr_array.h	/^                void push_back(const Element & e)$/;"	f	struct:BGIQD::INCRARRAY::IncrArray
quality	biocommon/sam_bam/sam_parser.h	/^    int  quality;$/;"	m	struct:BGIQD::SAM::MatchData
quality	unused/fastqa/fasta.h	/^    std::string quality;$/;"	m	struct:BGIQD::FASTQA::SeqItem
random_from_map	dev_tools/bin_sim_len.cpp	/^size_t random_from_map(std::map<size_t,size_t> & map , size_t & max)$/;"	f
random_from_map	dev_tools/bin_simularity.cpp	/^size_t random_from_map(std::map<size_t,size_t> & map , size_t & max)$/;"	f
random_seq	tools/stLFR_2_10X.cpp	/^    const std::string random_seq;$/;"	m	struct:AppConf	file:
rdbuf	common/files/gzstream.h	/^    gzstreambuf* rdbuf() { return &buf; }$/;"	f	class:GZSTREAM_NAMESPACE::gzstreambase
rdbuf	common/files/gzstream.h	/^    gzstreambuf* rdbuf() { return gzstreambase::rdbuf(); }$/;"	f	class:GZSTREAM_NAMESPACE::igzstream
rdbuf	common/files/gzstream.h	/^    gzstreambuf* rdbuf() { return gzstreambase::rdbuf(); }$/;"	f	class:GZSTREAM_NAMESPACE::ogzstream
readName2Barcode	stLFR/readName2Barcode.cpp	/^std::string readName2Barcode( const std::string & read ) $/;"	f	namespace:BGIQD::stLFR
read_len	biocommon/sam_bam/sam_parser.h	/^    int read_len;$/;"	m	struct:BGIQD::SAM::MatchData
read_name	biocommon/sam_bam/sam_parser.h	/^    std::string read_name;$/;"	m	struct:BGIQD::SAM::MatchData
real_contig	soap2/contigGraph.h	/^            std::vector<unsigned int> real_contig;$/;"	m	struct:BGIQD::SOAP2::ContigRoad
reducer	common/multithread/MapReduce.h	/^        typedef std::function< std::pair<K2 ,V3>(const K2 & ,const std::vector<V2>) > reducer;$/;"	t	class:BGIQD::MultiThread::Reducer
refBarcodeInfo	dev_tools/contig_barcode.h	/^typedef std::map<int , barcodeList> refBarcodeInfo;$/;"	t	namespace:BGIQD::JOB01
refBarcodeUniqueInfo	dev_tools/contig_barcode.h	/^typedef std::map<int , barcodeSet> refBarcodeUniqueInfo;$/;"	t	namespace:BGIQD::JOB01
refContigInfo	dev_tools/contig_barcode.h	/^typedef std::map<int , contigList> refContigInfo;$/;"	t	namespace:BGIQD::JOB01
ref_name	biocommon/sam_bam/sam_parser.h	/^    std::string ref_name;$/;"	m	struct:BGIQD::SAM::MatchData
reference	algorithm/incr_array/incr_array.h	/^                typedef typename T::Element & reference;$/;"	t	class:BGIQD::INCRARRAY::non_const_traits::T
reference	algorithm/incr_array/incr_array.h	/^                typedef typename T::Element const & reference;$/;"	t	class:BGIQD::INCRARRAY::const_traits::T
reference	algorithm/incr_array/incr_array.h	/^            typedef typename T::reference reference;$/;"	t	struct:BGIQD::INCRARRAY::iterator_base
relations	main/BinCluster.cpp	/^    BGIQD::stLFR::BinRelationArray  relations;$/;"	m	struct:AppConfig	file:
replace_all	common/string/stringtools.cpp	/^    void replace_all( std::string &strBig,$/;"	f	namespace:BGIQD::STRING
report	main/FillContigRoad.cpp	/^void report()$/;"	f
report_freq	main/LinearCDG.cpp	/^    void report_freq()$/;"	f	struct:AppConfig
resize	algorithm/incr_array/incr_array.h	/^                void resize( size_t i )$/;"	f	struct:BGIQD::INCRARRAY::IncrArray
right	algorithm/bi_list/bi_list.h	/^                BiListPtr right;$/;"	m	struct:BGIQD::BILIST::BiList
road_fill_freq	main/FillContigRoad.cpp	/^    BGIQD::FREQ::Freq<std::string> road_fill_freq;$/;"	m	struct:GlobalConfig	file:
roads	main/FillContigRoad.cpp	/^    BGIQD::stLFR::ContigRoads roads;$/;"	m	struct:GlobalConfig	file:
roads	stLFR/LineGroup.h	/^            std::vector<ContigRoad>  roads;$/;"	m	struct:BGIQD::stLFR::ContigRoads
roles	common/log/logfilter.h	/^        std::vector<specialrole> roles;$/;"	m	class:BGIQD::LOG::logfilter
root	stLFR/barcodeOnContig.h	/^            unsigned int root ;$/;"	m	struct:BGIQD::stLFR::P2PGraph
root_target_union	stLFR/barcodeOnContig.h	/^            BarcodeOnContig root_target_union;$/;"	m	struct:BGIQD::stLFR::P2PGraph
round	main/MergeContig.cpp	/^    int round ;$/;"	m	struct:AppConfig	file:
rtrim	common/string/stringtools.cpp	/^    std::string rtrim(const std::string & str)$/;"	f	namespace:BGIQD::STRING
run	common/multithread/MultiThread.h	/^    static void run(JobQueue & queue)$/;"	f	struct:BGIQD::MultiThread::Thread
s	algorithm/graph/GraphTest.cpp	/^    std::stack<NodeId> s;$/;"	m	struct:Ender2	file:
s	common/args/argsparser.h	/^                std::string *s;$/;"	m	class:BGIQD::ARGS::args_union::data::std
save	dev_tools/contig_barcode.cpp	/^    void BarcodeNum::save( const std::string & file) const$/;"	f	class:BGIQD::JOB01::BarcodeNum
saveBinBarcodeInfo	dev_tools/contig_barcode.cpp	/^    void saveBinBarcodeInfo(const std::string & file ,const  binBarcodeInfo &data)$/;"	f	namespace:BGIQD::JOB01
saveRefBarcodeUniqueInfo	dev_tools/contig_barcode.cpp	/^    void saveRefBarcodeUniqueInfo(const std::string & file , const refBarcodeUniqueInfo & data)$/;"	f	namespace:BGIQD::JOB01
searcher	main/FillContigRoad.cpp	/^    Searcher searcher;$/;"	m	struct:SearchResult	file:
self	algorithm/bi_list/bi_list.h	/^                T * self;$/;"	m	struct:BGIQD::BILIST::BiList
seq	unused/fastqa/fasta.h	/^    std::string seq;$/;"	m	struct:BGIQD::FASTQA::SeqItem
seqCompleteReverse	biocommon/seq/tool_func.h	/^        static std::string seqCompleteReverse(const std::string & line)$/;"	f	namespace:BGIQD::SEQ
seqCompleteReverse	dev_tools/ContigRoadFill2Fasta.cpp	/^    static std::string seqCompleteReverse(const std::string & line)$/;"	f	struct:GlobalContig
seqCompleteReverse	unused/fastqa/tool_func.h	/^    static std::string seqCompleteReverse(const std::string & line)$/;"	f
sequenceData	biocommon/sam_bam/sam_parser.h	/^        SequenceData sequenceData;$/;"	m	struct:BGIQD::SAM::Head::Data
set_value	common/args/argsparser.h	/^            void set_value( const  char * value , bool df )$/;"	f	struct:BGIQD::ARGS::args_union
setted	common/args/argsparser.h	/^            bool setted ;$/;"	m	struct:BGIQD::ARGS::args_union
shuffle_map	dev_tools/bin_sim_len.cpp	/^void shuffle_map(std::map<size_t , std::map<size_t,size_t> > & map)$/;"	f
shuffle_map	dev_tools/bin_simularity.cpp	/^void shuffle_map(std::map<size_t , std::map<size_t,size_t> > & map)$/;"	f
sim	soap2/contigGraph.h	/^            float sim ;$/;"	m	struct:BGIQD::SOAP2::KeyConn
sim	stLFR/contigSimGraph.h	/^            float sim ;$/;"	m	struct:BGIQD::stLFR::Edge
sim_map	dev_tools/SolveMulti.cpp	/^std::vector<float> sim_map;$/;"	v
simplelog	common/log/log.h	/^class simplelog$/;"	c	namespace:BGIQD::LOG
sims	stLFR/CBB.h	/^            std::map<unsigned int , BinSimularity> sims;$/;"	m	struct:BGIQD::stLFR::BinRelation
sims	stLFR/CBB.h	/^            std::map<unsigned int , ContigSimularity> sims ;$/;"	m	struct:BGIQD::stLFR::ContigRelation
simularity	dev_tools/bin_sim_len.cpp	/^inline std::tuple<int,int,double> simularity($/;"	f
simularity	dev_tools/bin_simularity.cpp	/^inline std::tuple<int,int,double> simularity($/;"	f
simularity	stLFR/CBB.h	/^            float simularity ;$/;"	m	struct:BGIQD::stLFR::ContigSimularity
simularity	stLFR/CBB.h	/^            float simularity;$/;"	m	struct:BGIQD::stLFR::BinSimularity
singleton	common/log/logfilter.cpp	/^    logfilter & logfilter::singleton() $/;"	f	class:BGIQD::LOG::logfilter
size	algorithm/collection/collection.h	/^                size_t size() const $/;"	f	struct:BGIQD::Collection::Collection
size	algorithm/incr_array/incr_array.h	/^                size_t size() const { return m_curr ; }$/;"	f	struct:BGIQD::INCRARRAY::IncrArray
smallest_edge_id	algorithm/graph/MinTree.h	/^                    EdgeId   smallest_edge_id ;$/;"	m	struct:BGIQD::GRAPH::MinTreeHelper::MTSearchNode
son	algorithm/fibheap/fib_heap.h	/^                Node * son;$/;"	m	struct:BGIQD::FIBHEAP::Node
sort_t1	dev_tools/SolveMulti.cpp	/^typedef std::tuple<int,float,std::string> sort_t1;$/;"	t	file:
sorted	stLFR/Line.h	/^        bool sorted;$/;"	m	class:BGIQD::stLFR::MultiLine
source_cpp	dev_tools/Makefile	/^source_cpp =	..\/common\/files\/file_reader.cpp \\$/;"	m
source_cpp	main/Makefile	/^source_cpp =	..\/common\/files\/file_reader.cpp \\$/;"	m
source_cpp	test/Makefile	/^source_cpp =	..\/common\/files\/file_reader.cpp \\$/;"	m
source_cpp	tools/Makefile	/^source_cpp =	..\/common\/files\/file_reader.cpp \\$/;"	m
source_o	dev_tools/Makefile	/^source_o		= ${source_cpp:%.cpp=%.o}$/;"	m
source_o	main/Makefile	/^source_o		= ${source_cpp:%.cpp=%.o}$/;"	m
source_o	test/Makefile	/^source_o		= ${source_cpp:%.cpp=%.o}$/;"	m
source_o	tools/Makefile	/^source_o		= ${source_cpp:%.cpp=%.o}$/;"	m
specialrole	common/log/logfilter.h	/^        struct specialrole$/;"	s	class:BGIQD::LOG::logfilter
split	common/string/stringtools.cpp	/^    std::vector<std::string>  split( const std::string & str , const std::string & spliter ) $/;"	f	namespace:BGIQD::STRING
split	common/string/stringtools.cpp	/^    std::vector<std::string>  split( const std::string & str) $/;"	f	namespace:BGIQD::STRING
split_graphs	main/MinTree.cpp	/^    std::map<BGIQD::stLFR::ContigSimGraph::NodeId , BGIQD::stLFR::ContigSimGraph> split_graphs;$/;"	m	struct:AppConf	file:
stLFR	stLFR/CBB.cpp	/^    namespace stLFR {$/;"	n	namespace:BGIQD	file:
stLFR	stLFR/CBB.h	/^    namespace stLFR {$/;"	n	namespace:BGIQD
stLFR	stLFR/ContigCluster.cpp	/^    namespace stLFR{$/;"	n	namespace:BGIQD	file:
stLFR	stLFR/ContigCluster.h	/^    namespace stLFR{$/;"	n	namespace:BGIQD
stLFR	stLFR/Line.h	/^namespace stLFR {$/;"	n	namespace:BGIQD
stLFR	stLFR/LineGroup.cpp	/^    namespace stLFR{$/;"	n	namespace:BGIQD	file:
stLFR	stLFR/LineGroup.h	/^    namespace stLFR {$/;"	n	namespace:BGIQD
stLFR	stLFR/barcodeId.cpp	/^namespace stLFR{$/;"	n	namespace:BGIQD	file:
stLFR	stLFR/barcodeId.h	/^namespace stLFR{$/;"	n	namespace:BGIQD
stLFR	stLFR/barcodeOnContig.cpp	/^    namespace stLFR {$/;"	n	namespace:BGIQD	file:
stLFR	stLFR/barcodeOnContig.h	/^    namespace stLFR {$/;"	n	namespace:BGIQD
stLFR	stLFR/contigSimGraph.h	/^    namespace stLFR {$/;"	n	namespace:BGIQD
stLFR	stLFR/readName2Barcode.cpp	/^namespace stLFR{$/;"	n	namespace:BGIQD	file:
stLFR	stLFR/readName2Barcode.h	/^namespace stLFR{$/;"	n	namespace:BGIQD
stLFR_2_10X_cpp	tools/Makefile	/^stLFR_2_10X_cpp 	=	stLFR_2_10X.cpp$/;"	m
stLFR_2_10X_o	tools/Makefile	/^stLFR_2_10X_o   =	${stLFR_2_10X_cpp:%.cpp=%.o} ${source_cpp:%.cpp=%.o}$/;"	m
start	algorithm/graph/DepthSearch.h	/^                NodeId                                      start;$/;"	m	struct:BGIQD::GRAPH::DepthSearch
start	common/log/log.h	/^        TIME::timepoint start ;$/;"	m	class:BGIQD::LOG::timer
start	dev_tools/LinkCheck.cpp	/^    int start ;$/;"	m	struct:A	file:
start	dev_tools/LinkCheck_1.cpp	/^    int start ;$/;"	m	struct:A	file:
start_position_on_read	biocommon/sam_bam/sam_parser.h	/^    int start_position_on_read;$/;"	m	struct:BGIQD::SAM::MatchInfo
start_position_on_ref	biocommon/sam_bam/sam_parser.h	/^    int start_position_on_ref;$/;"	m	struct:BGIQD::SAM::MatchInfo
status	stLFR/LineGroup.h	/^            } status;$/;"	m	struct:BGIQD::stLFR::ContigRoad	typeref:enum:BGIQD::stLFR::ContigRoad::FillStatus
strategy	main/FillContigRoad.cpp	/^    FillStrategy strategy;$/;"	m	struct:GlobalConfig	file:
sub_graph	stLFR/barcodeOnContig.h	/^            std::map<unsigned int , P2PGraph::Edge> sub_graph;$/;"	m	struct:BGIQD::stLFR::P2PGraph
succ	main/FillContigRoad.cpp	/^    bool succ ;$/;"	m	struct:SearchResult	file:
sum	dev_tools/bin_sim_len.cpp	/^inline size_t sum(const std::map<size_t , size_t> & hash)$/;"	f
sum	dev_tools/bin_simularity.cpp	/^inline size_t sum(const std::map<size_t , size_t> & hash)$/;"	f
super_gen	main/MergeContig.cpp	/^    bool super_gen ;$/;"	m	struct:AppConfig	file:
sync	common/files/gzstream.cpp	/^int gzstreambuf::sync() {$/;"	f	class:GZSTREAM_NAMESPACE::gzstreambuf
t	common/args/argsparser.h	/^            type t;$/;"	m	struct:BGIQD::ARGS::args_union
tailin	soap2/contigGraph.h	/^            bool tailin;$/;"	m	struct:BGIQD::SOAP2::ContigRoad
tailin	stLFR/LineGroup.h	/^            bool tailin;$/;"	m	struct:BGIQD::stLFR::ContigRoad
target	stLFR/barcodeOnContig.h	/^            unsigned int target;$/;"	m	struct:BGIQD::stLFR::P2PGraph
testFibHeap	algorithm/fibheap/fib_heap_test.cpp	/^typedef BGIQD::FIBHEAP::FibHeap<testFibHeapNode> testFibHeap;$/;"	t	file:
testFibHeapNode	algorithm/fibheap/fib_heap_test.cpp	/^typedef BGIQD::FIBHEAP::Node<int , int > testFibHeapNode;$/;"	t	file:
testFunc	common/test/Test.h	/^    typedef std::function<void()> testFunc ;$/;"	t	struct:Test
test_cpp	test/Makefile	/^test_cpp   =	test.cpp\\$/;"	m
test_o	test/Makefile	/^test_o 	   =	${test_cpp:%.cpp=%.o} ${source_cpp:%.cpp=%.o}$/;"	m
the_map	common/test/Test.h	/^    static TestMap & the_map()$/;"	f	struct:Test
the_one	common/log/logfilter.cpp	/^    logfilter* logfilter::the_one = NULL ;$/;"	m	class:BGIQD::LOG::logfilter	file:
the_one	common/log/logfilter.h	/^        static logfilter * the_one ;$/;"	m	class:BGIQD::LOG::logfilter
the_one	stLFR/barcodeId.cpp	/^    BarcodeId BarcodeId::the_one ;$/;"	m	class:BGIQD::stLFR::BarcodeId	file:
the_one	stLFR/barcodeId.h	/^        static BarcodeId the_one;$/;"	m	class:BGIQD::stLFR::BarcodeId
theme	common/log/log.h	/^        ilogtheme * theme;$/;"	m	class:BGIQD::LOG::logger
themes	common/log/logfilter.h	/^        std::vector<ilogtheme *>themes;$/;"	m	class:BGIQD::LOG::logfilter
thresold	main/BinCluster.cpp	/^    float thresold;$/;"	m	struct:AppConfig	file:
timeperoid	common/time/timetools.h	/^struct timeperoid $/;"	s	namespace:BGIQD::TIME
timepoint	common/time/timetools.h	/^struct timepoint$/;"	s	namespace:BGIQD::TIME
timer	common/log/log.h	/^        timer( logger & a_logger , const std::string &job_description)$/;"	f	class:BGIQD::LOG::timer
timer	common/log/log.h	/^class timer$/;"	c	namespace:BGIQD::LOG
tip	dev_tools/ContigRoadFill2Fasta.cpp	/^        int             tip;$/;"	m	struct:GlobalContig::ContigFastA	file:
tip	main/StaticsticUnique.cpp	/^        int  tip ;$/;"	m	struct:AppConfig::ContigInfo	file:
tip	soap2/contigFasta.h	/^            int             tip;$/;"	m	struct:BGIQD::SOAP2::ContigFastA
to	algorithm/graph/Graph.h	/^                NodeId      to ;$/;"	m	struct:BGIQD::GRAPH::GraphEdgeBase
to	algorithm/graph/GraphBasic.h	/^                NodeId      to ;$/;"	m	struct:BGIQD::GRAPH::IGraphEdgeBasic
to	algorithm/graph/GraphTest.cpp	/^        char to ; $/;"	m	struct:TestGraph1::Edge	file:
to	algorithm/graph/SPFSearch_test.cpp	/^        char to ; $/;"	m	struct:TestGraph::Edge	file:
to	soap2/contigGraph.h	/^            Kmer to ;$/;"	m	struct:BGIQD::SOAP2::Edge
to	soap2/contigGraph.h	/^            std::map<unsigned int , KeyConn> to;$/;"	m	struct:BGIQD::SOAP2::KeyEdge
to	soap2/contigGraph.h	/^            unsigned int to;$/;"	m	struct:BGIQD::SOAP2::Arc
to	soap2/contigGraph.h	/^            unsigned int to;$/;"	m	struct:BGIQD::SOAP2::KeyConn
to	soap2/graphEA.h	/^            Kmer to ;$/;"	m	struct:BGIQD::SOAP2::Edge
to	soap2/graphEA.h	/^            unsigned int to;$/;"	m	struct:BGIQD::SOAP2::Arc
to	unused/graph/Edge.h	/^                VertexIndex to;$/;"	m	class:BGIQD::Graph::Edge
to_bool	common/args/argsparser.h	/^            bool to_bool() const { assert(t == is_bool); return d.b ; }$/;"	f	struct:BGIQD::ARGS::args_union
to_float	common/args/argsparser.h	/^            float to_float() const { assert( t== is_float) ; return d.f ; }$/;"	f	struct:BGIQD::ARGS::args_union
to_int	common/args/argsparser.h	/^            int to_int() const { assert( t == is_int) ; return d.i ; }$/;"	f	struct:BGIQD::ARGS::args_union
to_long	common/args/argsparser.h	/^            long to_long() const { assert(t == is_long) ;return d.l ; }$/;"	f	struct:BGIQD::ARGS::args_union
to_size	soap2/contigGraph.h	/^            int to_size ;$/;"	m	struct:BGIQD::SOAP2::KeyEdge
to_string	common/args/argsparser.h	/^            std::string to_string() const $/;"	f	struct:BGIQD::ARGS::args_union
to_string	common/time/timetools.cpp	/^    std::string timeperoid::to_string() const $/;"	f	class:BGIQD::TIME::timeperoid
to_string	common/time/timetools.cpp	/^    std::string timepoint::to_string() const $/;"	f	class:BGIQD::TIME::timepoint
to_string	stLFR/LineGroup.cpp	/^        std::string ContigRoad::to_string() const$/;"	f	class:BGIQD::stLFR::ContigRoad
to_vector_string	common/args/argsparser.h	/^            std::vector<std::string> to_vector_string() const $/;"	f	struct:BGIQD::ARGS::args_union
tos	stLFR/barcodeOnContig.h	/^                std::set<unsigned int> tos;$/;"	m	struct:BGIQD::stLFR::P2PGraph::Edge
total	main/StaticsticUnique.cpp	/^    long total ;$/;"	m	struct:AppConfig	file:
total_barcode	stLFR/barcodeOnContig.h	/^                int total_barcode;$/;"	m	struct:BGIQD::stLFR::P2PGraph::Path
total_cov	stLFR/barcodeOnContig.h	/^                float total_cov;$/;"	m	struct:BGIQD::stLFR::P2PGraph::Path
total_length	stLFR/barcodeOnContig.h	/^                int total_length;$/;"	m	struct:BGIQD::stLFR::P2PGraph::Path
total_size	soap2/contigGraph.h	/^            int total_size;$/;"	m	struct:BGIQD::SOAP2::KeyEdge
traisId	algorithm/graph/Graph.h	/^                typedef traits                            traisId;$/;"	t	struct:BGIQD::GRAPH::PathEndHelperBase
traits_1	algorithm/graph/GraphTest.cpp	/^struct traits_1 {} ;$/;"	s	file:
traits_1	algorithm/graph/SPFSearch_test.cpp	/^struct traits_1 {} ;$/;"	s	file:
traits_2	algorithm/graph/GraphTest.cpp	/^struct traits_2 {} ;$/;"	s	file:
traits_2	algorithm/graph/SPFSearch_test.cpp	/^struct traits_2 {} ;$/;"	s	file:
traits_search_node	soap2/contigGraphSearch.h	/^        struct traits_search_node {} ;$/;"	s	namespace:BGIQD::SOAP2
traits_search_path	soap2/contigGraphSearch.h	/^        struct traits_search_path {} ;$/;"	s	namespace:BGIQD::SOAP2
trim	common/string/stringtools.cpp	/^    std::string trim(const std::string & str)$/;"	f	namespace:BGIQD::STRING
true_from	main/FillContigRoad.cpp	/^    unsigned int true_from ;$/;"	m	struct:SearchResult	file:
true_to	main/FillContigRoad.cpp	/^    unsigned int true_to ;$/;"	m	struct:SearchResult	file:
trunk_mark_cpp	tools/Makefile	/^trunk_mark_cpp 	=	trunk_mark.cpp$/;"	m
trunk_mark_o	tools/Makefile	/^trunk_mark_o   =	${trunk_mark_cpp:%.cpp=%.o} ${source_cpp:%.cpp=%.o}$/;"	m
type	algorithm/graph/DepthSearch.h	/^                Type                                type ;$/;"	m	struct:BGIQD::GRAPH::DepthSearchNode
type	algorithm/graph/SPFSearch.h	/^                Type type;$/;"	m	struct:BGIQD::GRAPH::SPFNode
type	biocommon/sam_bam/sam_parser.h	/^    CIGAR type;$/;"	m	struct:BGIQD::SAM::MatchInfo
type	biocommon/sam_bam/sam_parser.h	/^    HeadType type ;$/;"	m	struct:BGIQD::SAM::Head
type	common/args/argsparser.h	/^                args_union::type type() { return args_union::type::is_bool; }$/;"	f	struct:BGIQD::ARGS::args_traits
type	common/args/argsparser.h	/^                args_union::type type() { return args_union::type::is_float; }$/;"	f	struct:BGIQD::ARGS::args_traits
type	common/args/argsparser.h	/^                args_union::type type() { return args_union::type::is_int ; }$/;"	f	struct:BGIQD::ARGS::args_traits
type	common/args/argsparser.h	/^                args_union::type type() { return args_union::type::is_string; }$/;"	f	struct:BGIQD::ARGS::args_traits
type	common/args/argsparser.h	/^                args_union::type type() { return args_union::type::is_vector_string; }$/;"	f	struct:BGIQD::ARGS::args_traits
type	common/args/argsparser.h	/^            enum type $/;"	g	struct:BGIQD::ARGS::args_union
type	main/MergeContig.cpp	/^    WorkType type ;$/;"	m	struct:AppConfig	file:
type	soap2/contigGraphSearch.h	/^            EndType type ;$/;"	m	struct:BGIQD::SOAP2::Node_EA
type	stLFR/contigSimGraph.h	/^            Type type ;$/;"	m	struct:BGIQD::stLFR::Node
type	unused/fastqa/fasta.h	/^    Type type;$/;"	m	struct:BGIQD::FASTQA::SeqDatabase
type	unused/fastqa/fasta.h	/^    Type type;$/;"	m	struct:BGIQD::FASTQA::SeqItemFactory
underflow	common/files/gzstream.cpp	/^int gzstreambuf::underflow() { \/\/ used for input buffer only$/;"	f	class:GZSTREAM_NAMESPACE::gzstreambuf
updateMap1	dev_tools/ClusterGap.cpp	/^void updateMap1(std::map<int,float> & map , int key , float value )$/;"	f
updateMap1	dev_tools/LinearClusterResult.cpp	/^void updateMap1(std::map<int,float> & map , int key , float value )$/;"	f
updateMap1	dev_tools/MergeClusterResult.cpp	/^void updateMap1(std::map<int,float> & map , int key , float value )$/;"	f
updateMap1	dev_tools/job12.cpp	/^void updateMap1(lines&map1, int key1 , int key2, float v)$/;"	f
value	algorithm/fibheap/fib_heap.h	/^                Value  value;$/;"	m	struct:BGIQD::FIBHEAP::Node
value	algorithm/graph/GraphTrunk_test.cpp	/^    int value ;$/;"	m	struct:TKEdge	file:
value	algorithm/graph/MinTree_test.cpp	/^    int value ;$/;"	m	struct:MTEdge	file:
version	biocommon/sam_bam/sam_parser.h	/^        std::string version;$/;"	m	struct:BGIQD::SAM::Head::VersionData
versionData	biocommon/sam_bam/sam_parser.h	/^        VersionData  versionData;$/;"	m	struct:BGIQD::SAM::Head::Data
vertexs	unused/graph/Graph.h	/^                std::vector<G_Vertex> vertexs;$/;"	m	class:BGIQD::Graph::DiGraph_VE
vs	common/args/argsparser.h	/^                std::vector<std::string> *vs;$/;"	m	class:BGIQD::ARGS::args_union::data::std
wall	common/time/timetools.h	/^        timeval wall;$/;"	m	struct:BGIQD::TIME::timeperoid
wall	common/time/timetools.h	/^        timeval wall;$/;"	m	struct:BGIQD::TIME::timepoint
x	algorithm/fibheap/fib_heap.h	/^                        Node * x;$/;"	m	struct:BGIQD::FIBHEAP::FibHeap::DelayHeapLinkInfo
y	algorithm/fibheap/fib_heap.h	/^                        Node * y;$/;"	m	struct:BGIQD::FIBHEAP::FibHeap::DelayHeapLinkInfo
ycm_core	.ycm_extra_conf.py	/^import ycm_core$/;"	i
~DisJoin_Set	algorithm/disjoin_set/disjoin_set.h	/^                ~DisJoin_Set() {$/;"	f	class:BGIQD::Algorithm::DisJoin_Set
~ILine	stLFR/Line.h	/^        virtual ~ILine() {}$/;"	f	class:BGIQD::stLFR::ILine
~IncrArray	algorithm/incr_array/incr_array.h	/^                virtual ~IncrArray()$/;"	f	struct:BGIQD::INCRARRAY::IncrArray
~Line	stLFR/Line.h	/^        virtual ~Line(){}$/;"	f	class:BGIQD::stLFR::Line
~MultiLine	stLFR/Line.h	/^        virtual ~MultiLine()$/;"	f	class:BGIQD::stLFR::MultiLine
~args_union	common/args/argsparser.h	/^            ~args_union()$/;"	f	struct:BGIQD::ARGS::args_union
~detaillog	common/log/log.h	/^        virtual ~detaillog() {}$/;"	f	class:BGIQD::LOG::detaillog
~gzstreambase	common/files/gzstream.cpp	/^gzstreambase::~gzstreambase() {$/;"	f	class:GZSTREAM_NAMESPACE::gzstreambase
~gzstreambuf	common/files/gzstream.h	/^    ~gzstreambuf() { close(); }$/;"	f	class:GZSTREAM_NAMESPACE::gzstreambuf
~ilogtheme	common/log/log.h	/^        virtual ~ilogtheme() {}$/;"	f	class:BGIQD::LOG::ilogtheme
~iterator_base	algorithm/incr_array/incr_array.h	/^            virtual ~iterator_base() {} ;$/;"	f	struct:BGIQD::INCRARRAY::iterator_base
~logfilter	common/log/logfilter.cpp	/^    logfilter::~logfilter()$/;"	f	class:BGIQD::LOG::logfilter
~simplelog	common/log/log.h	/^        virtual ~simplelog() {}$/;"	f	class:BGIQD::LOG::simplelog
~timer	common/log/log.h	/^        ~timer()$/;"	f	class:BGIQD::LOG::timer
